/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/staff_list/task-status/{taskId}": {
    get: operations["inflect_word_api_v1_render_inflect_get"];
  },
  "/api/v1/search": {
    /**
     * Get all ServiceID
     * @description Get all Profiles
     */
    post: operations["get_all_api_v1_search_post"];
  };
  "/api/v1/auth/login": {
    /**
     * Login
     * @description Login to the system.
     *
     * - **email**: required and should be a valid email format.
     * - **password**: required.
     */
    post: operations["login_api_v1_auth_login_post"];
  };
  "/api/v1/auth/login/ecp": {
    /**
     * Login by ecp
     * @description Login to the system.
     *
     * - **certificate_blob**: required. auth_certificate.
     */
    post: operations["login_ecp_api_v1_auth_login_ecp_post"];
  };
  "/api/v1/auth/register": {
    /**
     * Register
     * @description Register new user to the system.
     *
     * - **email**: string required and should be a valid email format.
     * - **first_name**: required.
     * - **last_name**: required.
     * - **father_name**: optional.
     * - **group_id**: UUID - required and should exist in the database
     * - **position_id**: UUID - required and should exist in the database.
     * - **icon**: image with url format. This parameter is optional.
     * - **call_sign**: required.
     * - **id_number**: unique employee number. This parameter is required.
     * - **phone_number**: format (+77xxxxxxxxx). This parameter is optional.
     * - **address**: optional.
     * - **birthday**: format (YYYY-MM-DD). This parameter is optional.
     * - **status**: the current status of the employee
     * (e.g. "working", "on vacation", "sick", etc.). This parameter is optional.
     * - **status_till**: the date when the current status of the employee will end.
     *     This parameter is optional.
     * - **role_name**: required.
     * - **password**: required.
     * - **re_password**: required and should match the password field.
     */
    post: operations["register_api_v1_auth_register_post"];
  };
  "/api/v1/auth/register/candidate": {
    /**
     * Register Candidate
     * @description Register new candidate to the system.
     *
     * - **iin**: str
     */
    post: operations["register_candidate_api_v1_auth_register_candidate_post"];
  };
  "/api/v1/auth/refresh": {
    /** Refresh Token */
    get: operations["refresh_token_api_v1_auth_refresh_get"];
  };
  "/api/v1/actions": {
    /** Get All Actions */
    get: operations["get_all_actions_api_v1_actions_get"];
  };
  "/api/v1/auto-tags/{user_id}/": {
    /**
     * Get By User Id
     * @description Get User data through AutoTag
     *
     * Args:
     *     user_id (str): id of user from whom data is to be fetched
     *     auto_tag (str): auto_tag to be used to fetch data
     *     db (Session, optional): Instance of Session for database connection.
     *     Defaults to Depends(get_db).
     *     Authorize (AuthJWT, optional): JWTToken holder class. Defaults to Depends().
     *
     * Returns:
     *     Any: Result from AutoTag
     */
    get: operations["get_by_user_id_api_v1_auto_tags__user_id___get"];
  };
  "/api/v1/render/render": {
    /**
     * Генерация документа 'Заключение спец. проверки'
     * @description Генерация документа "Заключение спец. проверки"
     *
     * - **hr_document_template_id**: UUID - required
     * - **candidate_id**: UUID - required
     */
    post: operations["generate_api_v1_render_render_post"];
  };
  "/api/v1/render/render/finish-candidate": {
    /**
     * Генерация документа 'Заключение на зачисление'
     * @description Генерация документа "Заключение на зачисление"
     *
     * - **hr_document_template_id**: UUID - required
     * - **candidate_id**: UUID - required
     */
    post: operations["render_finish_candidate_api_v1_render_render_finish_candidate_post"];
  };
  "/api/v1/render/convert": {
    /** Convert */
    post: operations["convert_api_v1_render_convert_post"];
  };
  "/api/v1/render/convert_docx_to_html": {
    /** Convert Docx To Html */
    post: operations["convert_docx_to_html_api_v1_render_convert_docx_to_html_post"];
  };
  "/api/v1/render/convert/pdf": {
    /** Convert Html To Pdf */
    post: operations["convert_html_to_pdf_api_v1_render_convert_pdf_post"];
  };
  "/api/v1/render/inflect": {
    /** Inflect Word */
    get: operations["inflect_word_api_v1_render_inflect_get"];
  };
  "/api/v1/users": {
    /**
     * Get all Users
     * @description Get all Users
     *
     * - **hr_document_template_id**: str - The value which returns filtered
     *     results by hr_document_template_id.
     *     This parameter is optional and defaults to None
     * - **filter**: str - The value which returns filtered results.
     *     This parameter is optional and defaults to None
     * - **skip**: int - The number of users to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of users to return in response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_users_get"];
  };
  "/api/v1/users/{user_id}/templates/": {
    /**
     * Check if user has access to template
     * @description Check if user has access to template
     *
     * - **user_id**: str - The value which returns filtered results by user_id.
     */
    get: operations["is_template_accessible_for_user_api_v1_users__user_id__templates__get"];
  };
  "/api/v1/users/archived": {
    /**
     * Get all Users
     * @description Get all Users
     * - **filter**: str - The value which returns filtered results.
     *     This parameter is optional and defaults to None
     * - **skip**: int - The number of users to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of users to return in response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_archived_api_v1_users_archived_get"];
  };
  "/api/v1/users/active": {
    /**
     * Get all Users
     * @description Get all Users
     * - **filter**: str - The value which returns filtered results.
     * This parameter is optional and defaults to None
     * - **skip**: int - The number of users to skip before returning the results.
     * This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of users to return in response.
     * This parameter is optional and defaults to 10.
     */
    get: operations["get_all_active_api_v1_users_active_get"];
  };
  "/api/v1/users/jurisdiction": {
    /**
     * Get all Users by Jurisdiction
     * @description Get all Users by juridction
     *
     * - **skip**: int - The number of users to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of users to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_by_jurisdiction_api_v1_users_jurisdiction_get"];
  };
  "/api/v1/users/staff-unit/{id}": {
    /**
     * Get all Users by Staff Unit
     * @description Get all Users by Staff Unit
     *
     * - **id**: UUID - required and should exist in the database.
     */
    get: operations["get_all_by_staff_unit_api_v1_users_staff_unit__id__get"];
  };
  "/api/v1/users/position/{id}": {
    /**
     * Get all Users by Staff Unit
     * @description Get all Users by Position
     *
     * - **id**: UUID - required and should exist in the database.
     */
    get: operations["get_all_by_position_api_v1_users_position__id__get"];
  };
  "/api/v1/users/schedule/{id}": {
    /**
     * Get all Users by ScheduleYear
     * @description Get all Users by Plan
     *
     * - **id**: UUID - required and should exist in the database.
     * - **skip**: int - The number of users to skip before returning the results.
     * This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of users to return in response.
     * This parameter is optional and defaults to 10.
     */
    get: operations["get_all_by_schedule_id_api_v1_users_schedule__id__get"];
  };
  "/api/v1/users/{id}/": {
    /**
     * Get User by id
     * @description Get User by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_users__id___get"];
    /**
     * Update User Patch
     * @description Update User
     *
     * - **id**: UUID - id of the User.
     * - **email**: string required and should be a valid email format.
     * - **first_name**: required.
     * - **last_name**: required.
     * - **father_name**: optional.
     * - **icon**: image with url format. This parameter is optional.
     * - **call_sign**: required.
     * - **id_number**: unique employee number. This parameter is required.
     * - **phone_number**: format (+77xxxxxxxxx). This parameter is optional.
     * - **address**: optional.
     * - **status**: the current status of the employee
     *     (e.g. "working", "on vacation", "sick", etc.).
     *     This parameter is optional.
     * - **status_till**: the date when the current status
     *     of the employee will end. This parameter is optional.
     */
    patch: operations["update_user_patch_api_v1_users__id___patch"];
  };
  "/api/v1/users/fields": {
    /**
     * Get fields
     * @description Get fields
     *
     * This endpoint does not accept any parameters and returns all fields.
     */
    get: operations["get_fields_api_v1_users_fields_get"];
  };
  "/api/v1/users/profile": {
    /** Get Profile */
    get: operations["get_profile_api_v1_users_profile_get"];
  };
  "/api/v1/users/templates/{user_id}/": {
    /** Get Templates */
    get: operations["get_templates_api_v1_users_templates__user_id___get"];
  };
  "/api/v1/users/short/{id}/": {
    /** Get Short User */
    get: operations["get_short_user_api_v1_users_short__id___get"];
  };
  "/api/v1/users/iins/": {
    /** Get Short User */
    post: operations["get_short_user_api_v1_users_iins__post"];
  };
  "/api/v1/hr-document-status": {
    /**
     * Get all HrDocumentStatus
     * @description Get all HrDocumentStatus
     *
     * - **skip**: int - The number of HrDocumentStatus
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrDocumentStatus
     *     to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_hr_document_status_get"];
  };
  "/api/v1/hr-document-status/{id}/": {
    /**
     * Get HrDocumentStatus by id
     * @description Get HrDocumentStatus by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_hr_document_status__id___get"];
  };
  "/api/v1/hr-documents/not-signed": {
    /**
     * Get all not signed HrDocuments
     * @description Get all not signed HrDocuments
     *
     * - **skip**: int - The number of HrDocuments to skip
     *     before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrDocuments to return in the response.
     *     This parameter is optional and defaults to 10.
     * - **filter**: str - The value which returns filtered results.
     *     This parameter is optional and defaults to None
     */
    get: operations["get_not_signed_api_v1_hr_documents_not_signed_get"];
  };
  "/api/v1/hr-documents/signed": {
    /**
     * Get all not signed HrDocuments
     * @description Get all not signed HrDocuments
     *
     * - **skip**: int - The number of HrDocuments to skip
     *     before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrDocuments to return in the response.
     *     This parameter is optional and defaults to 10.
     * - **filter**: str - The value which returns filtered results.
     *     This parameter is optional and defaults to None
     */
    get: operations["get_signed_api_v1_hr_documents_signed_get"];
  };
  "/api/v1/hr-documents/initialized": {
    /**
     * Get all initialized HrDocuments
     * @description Get all initialized HrDocuments
     *
     * - **skip**: int - The number of HrDocuments to skip
     *     before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrDocuments to return in the response.
     *     This parameter is optional and defaults to 10.
     * - **filter**: str - The value which returns filtered results.
     *     This parameter is optional and defaults to None
     */
    get: operations["get_initialized_api_v1_hr_documents_initialized_get"];
  };
  "/api/v1/hr-documents/all/": {
    /**
     * Get all al HrDocuments by user
     * @description Get all all HrDocuments
     *
     * - **skip**: int - The number of HrDocuments to skip
     *     before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrDocuments to return in the response.
     *     This parameter is optional and defaults to 10.
     * - **filter**: str - The value which returns filtered results.
     *     This parameter is optional and defaults to None
     * - **user_id**: UUID - optional defaults to authorized user.
     *     User ID of the subject of the HrDocument.
     */
    get: operations["get_all_api_v1_hr_documents_all__get"];
  };
  "/api/v1/hr-documents/allDocuments/": {
    /**
     * Get all al HrDocuments by user
     * @description Get all HrDocuments
     *
     * - **skip**: int - The number of HrDocuments to skip
     *     before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrDocuments to return in the response.
     *     This parameter is optional and defaults to 10.
     * - **filter**: str - The value which returns filtered results.
     *     This parameter is optional and defaults to None
     * - **user_id**: UUID - optional defaults to authorized user.
     *     User ID of the subject of the HrDocument.
     */
    get: operations["get_all_api_v1_hr_documents_allDocuments__get"];
  };
  "/api/v1/hr-documents/ecp_sign_all/": {
    /**
     * Sign HrDocument with ecp
     * @description Sign HrDocument
     *
     * The user must have a role that allows them to sign this HR document.
     *
     * - **id**: UUID - the ID of HrDocument. This is required.
     * - **comment**: A comment on the signed document.
     * - **is_signed**: bool - indicating whether the document is signed.
     */
    post: operations["sign_ecp_all_api_v1_hr_documents_ecp_sign_all__post"];
  };
  "/api/v1/hr-documents/ecp_sign/{id}/": {
    /**
     * Sign HrDocument with ecp
     * @description Sign HrDocument
     *
     * The user must have a role that allows them to sign this HR document.
     *
     * - **id**: UUID - the ID of HrDocument. This is required.
     * - **comment**: A comment on the signed document.
     * - **is_signed**: bool - indicating whether the document is signed.
     */
    post: operations["sign_ecp_api_v1_hr_documents_ecp_sign__id___post"];
  };
  "/api/v1/hr-documents/ecp_initialize": {
    /**
     * Initialize HrDocument
     * @description Initialize HrDocument
     *
     * The user must have a role that allows them to create HR documents.
     *
     * - **hr_document_template_id**: UUID - required.
     *     HrDocument will be initialized based on HrDocumentTemplate.
     * - **due_date**: the end date of this document - format (YYYY-MM-DD).
     *     This parameter is required.
     * - **properties**: A dictionary containing properties for the HrDocument.
     * - **user_ids**: UUID - required and should exist in database.
     *     A list of user IDs to be assigned to the HrDocument.
     * - **document_step_users_ids**: UUID - required and should exist in database.
     *     Dictionary of priority to user IDs to be assigned to the HrDocument.
     * - **certificate_blob**: string - required.
     *     The certificate's string representation.
     */
    post: operations["initialize_with_certificate_api_v1_hr_documents_ecp_initialize_post"];
  };
  "/api/v1/hr-documents": {
    /**
     * Initialize HrDocument
     * @description Initialize HrDocument
     *
     * The user must have a role that allows them to create HR documents.
     *
     * - **hr_document_template_id**: UUID - required.
     *     HrDocument will be initialized based on HrDocumentTemplate.
     * - **due_date**: the end date of this document - format (YYYY-MM-DD).
     *     This parameter is required.
     * - **properties**: A dictionary containing properties for the HrDocument.
     * - **user_ids**: UUID - required and should exist in database.
     *     A list of user IDs to be assigned to the HrDocument.
     * - **document_step_users_ids**: UUID - required and should exist in database.
     *     Dictionary of priority to user IDs to be assigned to the HrDocument.
     */
    post: operations["initialize_api_v1_hr_documents_post"];
  };
  "/api/v1/hr-documents/drafts": {
    /**
     * Get all Draft HrDocuments
     * @description Get all Draft HrDocuments
     * - **filter**: str - The value which returns filtered results.
     *     This parameter is optional and defaults to None
     * - **skip**: int - The number of HrDocuments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrDocuments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_draft_documents_api_v1_hr_documents_drafts_get"];
    /**
     * Save HrDocument to Draft
     * @description Save HrDocument
     *
     * The user must have a role that allows them to create HR documents.
     *
     *     - **hr_document_template_id**: UUID - required.
     *         HrDocument will be initialized based on HrDocumentTemplate.
     *     - **due_date**: the end date of this document - format (YYYY-MM-DD).
     *         This parameter is required.
     *     - **properties**: A dictionary containing properties for the HrDocument.
     *     - **user_ids**: UUID - required and should exist in database.
     *         A list of user IDs to be assigned to the HrDocument.
     */
    post: operations["save_to_draft_api_v1_hr_documents_drafts_post"];
  };
  "/api/v1/hr-documents/drafts/{id}": {
    /**
     * Initialize Draft HrDocument
     * @description Initialize Draft HrDocument
     *
     * The user must have a role that allows them to create HR documents.
     *
     * - **document_id**: UUID - required.
     * - **due_date**: the end date of this document - format (YYYY-MM-DD).
     *     This parameter is required.
     * - **properties**: A dictionary containing properties for the HrDocument.
     * - **user_ids**: UUID - required and should exist in database.
     *     A list of user IDs to be assigned to the HrDocument.
     */
    post: operations["initialize_draft_document_api_v1_hr_documents_drafts__id__post"];
  };
  "/api/v1/hr-documents/{id}/": {
    /**
     * Get HrDocument by id
     * @description Get HrDocument by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_hr_documents__id___get"];
    /**
     * Update HrDocument
     * @description Update HrDocument
     *
     * - **id**: UUID - the id of HrDocument. This is required.
     * - **hr_document_template_id**: UUID - required.
     *     HrDocument will be initialized based on HrDocumentTemplate.
     * - **due_date**: the end date of this document - format (YYYY-MM-DD).
     *     This parameter is required.
     * - **properties**: A dictionary containing properties for the HrDocument.
     * - **user_ids**: UUID - required and should exist in database.
     *     A list of user IDs to be assigned to the HrDocument.
     * - **status**: the status of the HrDocument.
     *     This field should accept one of the following statuses:
     *
     * * Иницилизирован
     * * В процессе
     * * Завершен
     * * Отменен
     * * На доработке
     */
    put: operations["update_api_v1_hr_documents__id___put"];
    /**
     * Sign HrDocument
     * @description Sign HrDocument
     *
     * The user must have a role that allows them to sign this HR document.
     *
     * - **id**: UUID - the ID of HrDocument. This is required.
     * - **comment**: A comment on the signed document.
     * - **is_signed**: bool - indicating whether the document is signed.
     */
    post: operations["sign_api_v1_hr_documents__id___post"];
    /**
     * Delete HrDocument
     * @description Delete HrDocument
     *
     * - **id**: UUID - required.
     */
    delete: operations["delete_api_v1_hr_documents__id___delete"];
  };
  "/api/v1/hr-documents/generate/{id}/": {
    /**
     * Generate HrDocument
     * @description This endpoint generates a HR document based on the given document ID. (pdf)
     *
     * It takes a document ID as input,
     * retrieves the corresponding HR document from the database,
     * retrieves the HR document template associated with the document,
     * renders the template with the document's properties,
     * and saves the resulting Word document to a temporary file.
     * It then returns a FileResponse
     * containing the generated document as an attachment
     * that can be downloaded by the user.
     *
     * - **id**: UUID - required.
     */
    get: operations["generate_api_v1_hr_documents_generate__id___get"];
  };
  "/api/v1/hr-documents/generate-html/{id}/": {
    /**
     * Generate HrDocument
     * @description This endpoint generates a HR document based on the given document ID. (html)
     *
     * It takes a document ID as input,
     * retrieves the corresponding HR document from the database,
     * retrieves the HR document template associated with the document,
     * renders the template with the document's properties,
     * and saves the resulting Word document to a temporary file.
     * It then returns a FileResponse containing
     * the generated document as an attachment that can be downloaded by the user.
     *
     * - **id**: UUID - required.
     */
    get: operations["generate_html_api_v1_hr_documents_generate_html__id___get"];
  };
  "/api/v1/hr-documents/options": {
    /**
     * Get data by option
     * @description Get data by option
     *
     * - **option**: required. This field should accept one of the following options:
     *
     * * staff_unit
     * * actual_staff_unit
     * * staff_division
     * * rank
     * * badges
     */
    get: operations["get_data_by_option_api_v1_hr_documents_options_get"];
  };
  "/api/v1/hr-documents/signee/{id}/": {
    /**
     * Get Signee
     * @description Get signee
     *
     * - **id**: UUID - required.
     */
    get: operations["get_signee_api_v1_hr_documents_signee__id___get"];
  };
  "/api/v1/hr-documents/initialize/staff_list/{id}/": {
    /**
     * Initialize HrDocument from staff list
     * @description Initialize HrDocument from staff list
     *
     * - **id**: UUID - required.
     */
    post: operations["initialize_from_staff_list_api_v1_hr_documents_initialize_staff_list__id___post"];
  };
  "/api/v1/hr-documents/qrs/{id}/": {
    /**
     * Get Qrs
     * @description Get qrs
     *
     * - **id**: hr_document_id - required.
     */
    get: operations["get_qrs_api_v1_hr_documents_qrs__id___get"];
  };
  "/api/v1/hr-documents/generate_document_for_expiring/{contract_id}/{contract_type_id}/": {
    /**
     * Generate draft for expiring contracts
     * @description Generate draft for expiring contracts
     */
    get: operations["generate_document_for_expiring_api_v1_hr_documents_generate_document_for_expiring__contract_id___contract_type_id___get"];
  };
  "/api/v1/service_staff_function_type": {
    /**
     * Get all ServiceStaffFunctionType
     * @description Get all ServiceStaffFunctionType
     *
     * - **skip**: int - The number of ServiceStaffFunctionType
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ServiceStaffFunctionType
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_service_staff_function_type_get"];
    /**
     * Create ServiceStaffFunctionType
     * @description Create ServiceStaffFunctionType
     *
     * - **name**: required
     */
    post: operations["create_api_v1_service_staff_function_type_post"];
  };
  "/api/v1/service_staff_function_type/{id}/": {
    /**
     * Get ServiceStaffFunctionType by id
     * @description Get ServiceStaffFunctionType by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_service_staff_function_type__id___get"];
    /**
     * Update ServiceFunction
     * @description Update ServiceFunction
     *
     * - **id**: UUID - the ID of ServiceStaffFunctionType to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_service_staff_function_type__id___put"];
    /**
     * Delete ServiceStaffFunctionType
     * @description Delete ServiceStaffFunctionType
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_service_staff_function_type__id___delete"];
  };
  "/api/v1/service_staff_function": {
    /**
     * Get all ServiceStaffFunction
     * @description Get all ServiceStaffFunction
     *
     * - **skip**: int - The number of ServiceStaffFunction
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ServiceStaffFunction
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_service_staff_function_get"];
    /**
     * Create ServiceStaffFunction
     * @description Create ServiceStaffFunction
     *
     * - **name**: required
     * - **service_function_type_id**: UUID - required.
     *     The id of service function type.
     * - **spend_hours_per_week**: int - optional.
     */
    post: operations["create_api_v1_service_staff_function_post"];
  };
  "/api/v1/service_staff_function/{id}/": {
    /**
     * Get ServiceStaffFunction by id
     * @description Get ServiceStaffFunction by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_service_staff_function__id___get"];
    /**
     * Update ServiceStaffFunction
     * @description Update ServiceStaffFunction
     *
     * - **name**: required
     * - **service_function_type_id**: UUID - required.
     * The id of service function type.
     * - **spend_hours_per_week**: int - optional.
     */
    put: operations["update_api_v1_service_staff_function__id___put"];
    /**
     * Delete ServiceStaffFunction
     * @description Delete ServiceStaffFunction
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_service_staff_function__id___delete"];
  };
  "/api/v1/service_staff_function/duplicate/{id}/": {
    /**
     * Duplicate
     * @description Duplicate ServiceStaffFunction
     *
     * - **id**: UUID - required
     */
    post: operations["duplicate_api_v1_service_staff_function_duplicate__id___post"];
  };
  "/api/v1/document_function_type": {
    /**
     * Get all ServiceStaffFunctionType
     * @description Get all ServiceStaffFunctionType
     *
     * - **skip**: int - The number of ServiceStaffFunctionType
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ServiceStaffFunctionType
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_document_function_type_get"];
    /**
     * Create ServiceStaffFunctionType
     * @description Create ServiceStaffFunctionType
     *
     * - **name**: required
     */
    post: operations["create_api_v1_document_function_type_post"];
  };
  "/api/v1/document_function_type/{id}/": {
    /**
     * Get ServiceStaffFunctionType by id
     * @description Get ServiceStaffFunctionType by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_document_function_type__id___get"];
    /**
     * Update ServiceFunction
     * @description Update ServiceFunction
     *
     * - **id**: UUID - the ID of ServiceStaffFunctionType to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_document_function_type__id___put"];
    /**
     * Delete ServiceStaffFunctionType
     * @description Delete ServiceStaffFunctionType
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_document_function_type__id___delete"];
  };
  "/api/v1/document_staff_function": {
    /**
     * Get all DocumentStaffFunction
     * @description Get all DocumentStaffFunction
     *
     * - **skip**: int - The number of DocumentStaffFunction
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of DocumentStaffFunction
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_document_staff_function_get"];
    /** Create Function */
    post: operations["create_function_api_v1_document_staff_function_post"];
  };
  "/api/v1/document_staff_function/{id}/": {
    /**
     * Get DocumentStaffFunction by id
     * @description Get DocumentStaffFunction by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_document_staff_function__id___get"];
    /**
     * Update DocumentStaffFunction
     * @description Update DocumentStaffFunction
     */
    put: operations["update_api_v1_document_staff_function__id___put"];
    /**
     * Delete DocumentStaffFunction
     * @description Delete DocumentStaffFunction
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_document_staff_function__id___delete"];
  };
  "/api/v1/document_staff_function/duplicate/{id}/": {
    /** Duplicate */
    post: operations["duplicate_api_v1_document_staff_function_duplicate__id___post"];
  };
  "/api/v1/document_staff_function/constructor/": {
    /** Create Function For Constructor */
    post: operations["create_function_for_constructor_api_v1_document_staff_function_constructor__post"];
  };
  "/api/v1/document_staff_function/staff_unit/{id}": {
    /** Get Staff Units By Id */
    get: operations["get_staff_units_by_id_api_v1_document_staff_function_staff_unit__id__get"];
  };
  "/api/v1/document_staff_function/append_to_staff_unit/": {
    /** Append To Staff Unit */
    post: operations["append_to_staff_unit_api_v1_document_staff_function_append_to_staff_unit__post"];
  };
  "/api/v1/staff_division": {
    /**
     * Get all Staff Divisions
     * @description Get all Staff Divisions
     *
     * - **skip**: int - The number of staff divisions
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff divisions
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_staff_division_get"];
    /**
     * Create Staff Division
     * @description Create Staff Division
     *
     * - **parent_group_id**: the id of the parent group. This parameter is optional.
     * - **name**: required
     * - **description**: a long description. This parameter is optional.
     */
    post: operations["create_api_v1_staff_division_post"];
  };
  "/api/v1/staff_division/schedule/": {
    /**
     * Get all Staff Divisions
     * @description Get all Staff Divisions
     *
     * - **skip**: int - The number of staff divisions
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff divisions
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_schedule_api_v1_staff_division_schedule__get"];
  };
  "/api/v1/staff_division/departments/": {
    /**
     * Get all Staff Divisions
     * @description Get all Staff Divisions
     *
     * - **skip**: int - The number of staff divisions
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff divisions
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_departments_api_v1_staff_division_departments__get"];
  };
  "/api/v1/staff_division/division_parents/{id}/": {
    /**
     * Get Staff Division and all his parents
     * @description Get all Staff Divisions
     *
     * - **id**: uuid - The id of staff division. This parameter is required.
     */
    get: operations["get_division_parents_by_id_api_v1_staff_division_division_parents__id___get"];
  };
  "/api/v1/staff_division/division_parents_minimized/{id}/": {
    /**
     * Get Staff Division and all his parents with fewer parameters
     * @description Get all Staff Divisions
     *
     * - **id**: uuid - The id of staff division. This parameter is required.
     */
    get: operations["get_division_parents_by_id_minimized_api_v1_staff_division_division_parents_minimized__id___get"];
  };
  "/api/v1/staff_division/{id}/": {
    /**
     * Get Staff Division by id
     * @description Get Staff Division by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_staff_division__id___get"];
    /**
     * Update Staff Division
     * @description Update Staff Division
     *
     * - **id**: UUID - id of the Staff Division.
     * - **parent_group_id**: the id of the parent group. This parameter is optional.
     * - **name**: required
     * - **description**: a long description. This parameter is optional.
     */
    put: operations["update_api_v1_staff_division__id___put"];
    /**
     * Update parent of Staff Division
     * @description Update parent of Staff Division
     *
     * - **id**: UUID - staff division id. It is required
     * - **parent_group_id**: the id of the parent group. It is required
     */
    post: operations["update_parent_api_v1_staff_division__id___post"];
    /**
     * Delete Staff Division
     * @description Delete Staff Division
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_staff_division__id___delete"];
  };
  "/api/v1/staff_division/schedule/{id}/": {
    /**
     * Get Staff Division by id
     * @description Get Staff Division by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_schedule_api_v1_staff_division_schedule__id___get"];
  };
  "/api/v1/staff_division/get-department-of/{id}/": {
    /**
     * Get Staff Division one level by id
     * @description Get Department of staff division
     *
     * - **id**: uuid - The id of staff division. This parameter is required.
     */
    get: operations["get_all_one_level_for_id_api_v1_staff_division_get_department_of__id___get"];
  };
  "/api/v1/staff_division/one-level/{id}/": {
    /**
     * Get Staff Division one level by id
     * @description Get all Staff Divisions
     *
     * - **id**: uuid - The id of staff division. This parameter is required.
     */
    get: operations["get_all_one_level_for_id_api_v1_staff_division_one_level__id___get"];
  };
  "/api/v1/staff_division/one-level-matreshka": {
    /**
     * Get Staff Division one level by id
     * @description Get all Staff Divisions
     *
     * - **id**: uuid - The id of staff division. This parameter is required.
     */
    get: operations["get_all_one_level_for_id_api_v1_staff_division_one_level_matreshka_get"];
  };
  "/api/v1/staff_division/name/{id}": {
    /**
     * Get Staff Division by id
     * @description Get Staff Division by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_full_name_by_id_api_v1_staff_division_name__id__get"];
  };
  "/api/v1/staff_division/types": {
    /**
     * Get Staff Division types
     * @description Get all Staff Division Types
     */
    get: operations["get_division_types_api_v1_staff_division_types_get"];
  };
  "/api/v1/staff_division/ids/{id}/": {
    /** Get ids of all parents of Staff Division */
    get: operations["get_parent_ids_api_v1_staff_division_ids__id___get"];
  };
  "/api/v1/hr-documents-info": {
    /**
     * Get all HrDocumentInfo
     * @description Get all HrDocumentInfo
     *
     * - **skip**: int - The number of HrDocumentInfo
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrDocumentInfo
     *     to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_hr_documents_info_get"];
    /**
     * Create HrDocumentInfo
     * @description Create HrDocumentInfo
     *
     * - **hr_document_step_id**: UUID - the id of HrDocumentStep associated
     *     with this document info. This is required.
     * - **signed_by**: UUID - the id of the user who signed this document info.
     *     This field is optional.
     * - **comment**: a comment regarding this document info.
     * - **is_signed**: bool - whether or not this document info has been signed.
     * - **hr_document_id**: UUID - the id of the HrDocument associated
     *     with this document info.
     * - **signed_at**: the datetime at which this document info was signed.
     *     This field is optional. Format (YYYY-MM-DD)
     */
    post: operations["create_api_v1_hr_documents_info_post"];
  };
  "/api/v1/hr-documents-info/{id}/": {
    /**
     * Get HrDocumentInfo by id
     * @description Get HrDocumentInfo by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_hr_documents_info__id___get"];
    /**
     * Update HrDocumentInfo
     * @description Update HrDocumentInfo
     *
     * - **id**: UUID - the id of the HrDocumentInfo. This is required.
     * - **hr_document_step_id**: UUID - the id of HrDocumentStep associated
     *     with this document info. This is required.
     * - **signed_by**: UUID - the id of the user who signed this document info.
     *     This field is optional.
     * - **comment**: a comment regarding this document info.
     * - **is_signed**: bool - whether or not this document info has been signed.
     * - **hr_document_id**: UUID - the id of the HrDocument
     *     associated with this document info.
     * - **signed_at**: the datetime at which this document info was signed.
     *     This field is optional. Format (YYYY-MM-DD)
     */
    put: operations["update_api_v1_hr_documents_info__id___put"];
    /**
     * Delete HrDocumentInfo
     * @description Delete HrDocumentInfo
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_hr_documents_info__id___delete"];
  };
  "/api/v1/hr-documents-info/history/{id}/": {
    /**
     * Get History by document id
     * @description Get History by document id
     *
     * The function returns a list of HrDocumentHistoryRead objects,
     * which represent the history of the HR document.
     *
     * - **id**: UUID - required.
     */
    get: operations["get_history_by_document_id_api_v1_hr_documents_info_history__id___get"];
  };
  "/api/v1/hr-documents-step": {
    /**
     * Get all HrDocumentStep
     * @description Get all HrDocumentStep
     *
     * - **id**: UUID - the id of HrDocumentTemplate. This parameter is required.
     */
    get: operations["get_all_api_v1_hr_documents_step_get"];
    /**
     * Create HrDocumentStep
     * @description Crete HrDocumentStep
     *
     * - **hr_document_template_id**: UUID - the id of HrDocumentTemplate.
     *     This step will depend to this template. This field is required.
     * - **previous_step_id**: UUID - the id of previous HrDocumentStep.
     *     This parameter is optional.
     * - **staff_unit_id**: UUID - the id of StaffUnit. This is required.
     * - **staff_function_id**: UUID - the id of StaffFunction. This is required.
     */
    post: operations["create_api_v1_hr_documents_step_post"];
  };
  "/api/v1/hr-documents-step/{id}/": {
    /**
     * Get HrDocumentStep by id
     * @description Get HrDocumentStep by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_hr_documents_step__id___get"];
    /**
     * Update HrDocumentStep
     * @description Update HrDocumentStep
     *
     * - **id**: UUID - required
     * - **hr_document_template_id**: UUID - the id of HrDocumentTemplate.
     *     This step will depend on this template. This field is required.
     * - **previous_step_id**: UUID - the id of previous HrDocumentStep.
     *      This parameter is optional.
     * - **staff_unit_id**: UUID - the id of StaffUnit. This is required.
     * - **staff_function_id**: UUID - the id of StaffFunction.
     *     This is required.
     *
     * > Note that child steps **can not change** template type,
     * > and **template will be changed for every child steps**
     * if you want to change template for parent step
     */
    put: operations["update_api_v1_hr_documents_step__id___put"];
    /**
     * Delete HrDocumentStep
     * @description Delete HrDocumentStep
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_hr_documents_step__id___delete"];
  };
  "/api/v1/hr-documents-template": {
    /**
     * Get all HrDocumentTemplate
     * @description Get all HrDocumentTemplate
     *
     * - **skip**: int - The number of HrDocumentTemplate
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrDocumentTemplate
     *     to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_hr_documents_template_get"];
    /**
     * Create HrDocumentTemplate
     * @description Create HrDocumentTemplate
     *
     * - **name**: required
     * - **path**: string - the current location of this document.
     *     This is required.
     * - **subject_type**: int - the subject type of the HrDocumentTemplate.
     *     This field should necessarily accept one of the following types.
     * - **properties**: Dict[str, dict] - details which
     *     will be replaced while creating HrDocument.
     *     This is required.
     *
     * - CANDIDATE = 1
     * - EMPLOYEE = 2
     * - PERSONNEL = 3
     * - STAFF = 4
     */
    post: operations["create_api_v1_hr_documents_template_post"];
  };
  "/api/v1/hr-documents-template/archive": {
    /** Get All Archived */
    get: operations["get_all_archived_api_v1_hr_documents_template_archive_get"];
  };
  "/api/v1/hr-documents-template/draft": {
    /** Get HrDocumentTemplate drafts */
    get: operations["get_all_draft_api_v1_hr_documents_template_draft_get"];
    /**
     * Create HrDocumentTemplate draft
     * @description Create HrDocumentTemplate draft
     *
     * - **name**: required
     * - **path**: string - the current location of this document.
     *     This is required.
     * - **subject_type**: int - the subject type of the HrDocumentTemplate.
     *     This field should necessarily accept one of the following types.
     * - **properties**: Dict[str, dict] - details which
     *     will be replaced while creating HrDocument.
     *
     * - CANDIDATE = 1
     * - EMPLOYEE = 2
     * - PERSONNEL = 3
     * - STAFF = 4
     */
    post: operations["create_draft_api_v1_hr_documents_template_draft_post"];
  };
  "/api/v1/hr-documents-template/{id}/": {
    /**
     * Get HrDocumentTemplate by id
     * @description Get HrDocumentTemplate by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_hr_documents_template__id___get"];
    /**
     * Update HrDocumentTemplate
     * @description Update HrDocumentTeplate
     *
     * - **id**: UUID - required.
     * - **name**: required
     * - **path**: string - the current location of this document.
     *     This is required.
     * - **subject_type**: int - the subject type of the HrDocumentTemplate.
     *     This field should necessarily accept one of the following types.
     * - **properties**: Dict[str, dict] - details which will be replaced
     *     while creating HrDocument. This is required.
     *
     * * CANDIDATE = 1
     * * EMPLOYEE = 2
     * * PERSONNEL = 3
     * * STAFF = 4
     */
    put: operations["update_api_v1_hr_documents_template__id___put"];
    /**
     * Delete HrDocumentTemplate
     * @description Delete HrDocumentTemplate
     *
     * - **id**: UUID - required.
     */
    delete: operations["delete_api_v1_hr_documents_template__id___delete"];
  };
  "/api/v1/hr-documents-template/steps/{id}": {
    /**
     * Get HrDocumentTemplate by step id
     * @description Get HrDocumentTemplate by step id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_steps_by_document_template_id_api_v1_hr_documents_template_steps__id__get"];
  };
  "/api/v1/hr-documents-template/duplicate/{id}": {
    /** Duplicate */
    get: operations["duplicate_api_v1_hr_documents_template_duplicate__id__get"];
  };
  "/api/v1/hr-documents-template/corrections/": {
    /** Suggest Corrections */
    post: operations["suggest_corrections_api_v1_hr_documents_template_corrections__post"];
  };
  "/api/v1/user-stats": {
    /**
     * Get all UserStats
     * @description Get all UserStats
     *
     * - **skip**: int - The number of UserStats
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of UserStats
     *      to return in the response.
     *      This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_user_stats_get"];
    /**
     * Create UserStat
     * @description Create UserStat
     *
     * - **user_id**: UUID - the ID of the user.
     *     This parameter is required and should exist in database.
     * - **physical_training**: int - representing the user's
     *     physical training score.
     * - **fire_training**: int - representing the user's fire training score.
     * - **attendance**: int - representing the user's attendance score.
     * - **activity**: int - representing the user's activity score.
     * - **opinion_of_colleagues**: int - representing the user's opinion
     *     of colleagues score.
     * - **opinion_of_management**: int - representing the user's opinion
     *     of management score.
     */
    post: operations["create_api_v1_user_stats_post"];
  };
  "/api/v1/user-stats/{id}/": {
    /**
     * Get UserStat by id
     * @description Get UserStat by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_user_stats__id___get"];
    /**
     * Update UserStat
     * @description Update UserStat
     *
     * - **id**: UUID - the ID of the UserStat.
     *     This is required.
     * - **user_id**: UUID - the ID of the user.
     *     This parameter is required and should exist in database.
     * - **physical_training**: int - representing the user's
     *     physical training score.
     *     This is required.
     * - **fire_training**: int - representing the user's fire
     *     training score.
     *     This is required.
     * - **attendance**: int - representing the user's attendance score.
     *     This is required.
     * - **activity**: int - representing the user's activity score.
     *     This is required.
     * - **opinion_of_colleagues**: int - representing the user's
     *     opinion of colleagues score.
     *      This is required.
     * - **opinion_of_management**: int - representing the user's
     *     opinion of management score.
     *     This is required.
     */
    put: operations["update_api_v1_user_stats__id___put"];
    /**
     * Delete UserStat
     * @description Delete UserStat
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_user_stats__id___delete"];
  };
  "/api/v1/staff_unit": {
    /**
     * Get all Staff Units
     * @description Get all Staff Units
     *
     * - **skip**: int - The number of staff units
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff units
     *      to return in the response.
     *      This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_staff_unit_get"];
    /**
     * Create Staff Unit
     * @description Create Staff Unit
     *
     * - **name**: required
     * - **max_rank_id**: UUID - required and should exist in the database
     * - **description**: a long description. This parameter is optional.
     */
    post: operations["create_api_v1_staff_unit_post"];
  };
  "/api/v1/staff_unit/position/": {
    /**
     * Create Staff Unit
     * @description Create Staff Unit with new position
     *
     * - **max_rank_id**: UUID - required and should exist in the database
     */
    post: operations["create_with_position_api_v1_staff_unit_position__post"];
  };
  "/api/v1/staff_unit/{id}/": {
    /**
     * Get Staff Unit by id
     * @description Get Staff Unit by id
     *
     * - **id** - UUID - required
     */
    get: operations["get_by_id_api_v1_staff_unit__id___get"];
    /**
     * Update Staff Unit
     * @description Update Staff Unit
     *
     * - **id**: UUID - required
     * - **name**: required
     * - **position_id**: id of position.
     *     This parameter is optional.
     * - **staff_division_id**: id of staff_division.
     *     This parameter is optional.
     */
    put: operations["update_api_v1_staff_unit__id___put"];
    /**
     * Delete Staff Unit
     * @description Delete Staff Unit
     *
     * - **id** - UUID - required
     */
    delete: operations["delete_api_v1_staff_unit__id___delete"];
  };
  "/api/v1/staff_unit/get-service-staff-functions/{id}": {
    /**
     * Get ServiceStaffFunctions by StaffUnit id
     * @description Get ServiceStaffFunctions by StaffUnit id
     *
     * - **id** - UUID - required
     */
    get: operations["get_service_staff_functions_api_v1_staff_unit_get_service_staff_functions__id__get"];
  };
  "/api/v1/staff_unit/add-service-staff-function": {
    /**
     * Add ServiceStaffFunction
     * @description Add ServiceStaffFunction to StaffUnit
     */
    post: operations["add_service_staff_function_api_v1_staff_unit_add_service_staff_function_post"];
  };
  "/api/v1/staff_unit/remove-service-staff-function": {
    /**
     * Remove ServiceStaffFunction
     * @description Remove ServiceStaffFunction from StaffUnit
     */
    post: operations["remove_service_staff_function_api_v1_staff_unit_remove_service_staff_function_post"];
  };
  "/api/v1/staff_unit/get-document-staff-functions/{id}": {
    /**
     * Get DocumentStaffFunctions by StaffUnit id
     * @description Get DocumentStaffFunctions by StaffUnit id
     *
     * - **id** - UUID - required
     */
    get: operations["get_document_staff_functions_api_v1_staff_unit_get_document_staff_functions__id__get"];
  };
  "/api/v1/staff_unit/add-document-staff-function": {
    /**
     * Add DocumentStaffFunction
     * @description Add DocumentStaffFunction to StaffUnit
     */
    post: operations["add_document_staff_function_api_v1_staff_unit_add_document_staff_function_post"];
  };
  "/api/v1/staff_unit/add-document-staff-function/position": {
    /**
     * Add DocumentStaffFunction
     * @description Add DocumentStaffFunction to StaffUnit
     */
    post: operations["add_document_staff_function_by_position_api_v1_staff_unit_add_document_staff_function_position_post"];
  };
  "/api/v1/staff_unit/remove-document-staff-function": {
    /**
     * Remove DocumentStaffFunction
     * @description Remove DocumentStaffFunction from StaffUnit
     */
    post: operations["remove_document_staff_function_api_v1_staff_unit_remove_document_staff_function_post"];
  };
  "/api/v1/staff_unit/staff_division/{id}/": {
    /**
     * Get Staff Units by staff_division_id
     * @description Get Staff Units by staff_division_id
     *
     * - **staff_division_id** - UUID - required
     * - **skip**: int - The number of staff units
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff units
     *     to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_by_staff_division_id_api_v1_staff_unit_staff_division__id___get"];
  };
  "/api/v1/equipments": {
    /**
     * Get all Equipments
     * @description Get all Equipments
     *
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_equipments_get"];
    /**
     * Create Equipment
     * @description Create Equipment
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_api_v1_equipments_post"];
  };
  "/api/v1/equipments/{id}/": {
    /**
     * Get Equipment by id
     * @description Get Equipment by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_equipments__id___get"];
    /**
     * Update Equipment
     * @description Update Equipment
     *
     * - **id**: UUID - the id of equipment to update. This parameter is required
     * - **name**: required
     * - **quantity**: required
     */
    put: operations["update_api_v1_equipments__id___put"];
    /**
     * Delete Equipment
     * @description Delete Equipment
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_equipments__id___delete"];
  };
  "/api/v1/equipments/type/clothing/": {
    /**
     * Get all Clothing Equipments
     * @description Get all Clothing Equipments
     *
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_clothing_api_v1_equipments_type_clothing__get"];
    /** Create Army Equipments Type */
    post: operations["create_cloth_eq_type_api_v1_equipments_type_clothing__post"];
  };
  "/api/v1/equipments/type/clothing/{id}": {
    /** Get Clothing Equipment type by id */
    get: operations["get_clothing_by_id_api_v1_equipments_type_clothing__id__get"];
  };
  "/api/v1/equipments/model/clothing/": {
    /**
     * Get all Clothing Equipments
     * @description Get all Clothing Equipments
     *
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_clothing_api_v1_equipments_model_clothing__get"];
    /** Create Army Equipments Model */
    post: operations["create_cloth_eq_model_api_v1_equipments_model_clothing__post"];
  };
  "/api/v1/equipments/type/army/": {
    /**
     * Get all Army Equipments
     * @description Get all Army Equipments
     *
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_army_api_v1_equipments_type_army__get"];
    /** Create Army Equipments Type */
    post: operations["create_army_eq_type_api_v1_equipments_type_army__post"];
  };
  "/api/v1/equipments/type/army/{id}": {
    /** Get Army Equipment type by id */
    get: operations["get_army_by_id_api_v1_equipments_type_army__id__get"];
  };
  "/api/v1/equipments/type/other/": {
    /**
     * Get all Other Equipments
     * @description Get all Other Equipments
     *
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_other_api_v1_equipments_type_other__get"];
    /** Create Other Equipments Type */
    post: operations["create_other_eq_type_api_v1_equipments_type_other__post"];
  };
  "/api/v1/equipments/type/other/{id}": {
    /** Get Other Equipment type by id */
    get: operations["get_other_by_id_api_v1_equipments_type_other__id__get"];
  };
  "/api/v1/equipments/type/all": {
    /**
     * Get all Types of Equipments
     * @description Get all Types of Equipments
     *
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_types_api_v1_equipments_type_all_get"];
  };
  "/api/v1/equipmentsavailable/{user_id}/": {
    /**
     * Get all available Equipments for user
     * @description Get all available Equipments for user
     *
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_available_api_v1_equipmentsavailable__user_id___get"];
  };
  "/api/v1/equipments/model/other/": {
    /** Create Other Equipments Model */
    post: operations["create_other_eq_model_api_v1_equipments_model_other__post"];
  };
  "/api/v1/equipments/model/army/": {
    /** Create Army Equipments Model */
    post: operations["create_army_eq_model_api_v1_equipments_model_army__post"];
  };
  "/api/v1/badges": {
    /**
     * Get all Badges
     * @description Get all Badges
     *
     * - **skip**: int - The number of badges to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of badges to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_badges_get"];
    /**
     * Create
     * @description Create new badge
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_badges_post"];
  };
  "/api/v1/badges/{id}/": {
    /**
     * Get Badge by id
     * @description Get badge by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_badges__id___get"];
    /**
     * Update Badge
     * @description Update badge
     *
     * - **id**: UUID - the ID of badge to update. This is required.
     * - **name**: required.
     * - **url**: image url. This parameter is required.
     */
    put: operations["update_api_v1_badges__id___put"];
    /**
     * Delete Badge
     * @description Delete badge
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_badges__id___delete"];
  };
  "/api/v1/badges/black-beret": {
    /**
     * Black Beret
     * @description Get black beret badge
     */
    get: operations["black_beret_api_v1_badges_black_beret_get"];
  };
  "/api/v1/ranks": {
    /**
     * Get all Ranks
     * @description Get all Ranks
     *
     * - **skip**: int - The number of ranks
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ranks
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_ranks_get"];
    /**
     * Create Rank
     * @description Create Rank
     *
     * - **name**: required
     */
    post: operations["create_api_v1_ranks_post"];
  };
  "/api/v1/ranks/by-name/": {
    /**
     * Get all Ranks by name
     * @description Get all Ranks
     *
     * - **skip**: int - The number of ranks
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ranks
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_ranks_by_name__get"];
  };
  "/api/v1/ranks/{id}/": {
    /**
     * Get Rank by id
     * @description Get Rank by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_ranks__id___get"];
    /**
     * Update Rank
     * @description Update Rank
     *
     * - **id**: UUID - the ID of badge to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_ranks__id___put"];
    /**
     * Delete Rank
     * @description Delete Rank
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_ranks__id___delete"];
  };
  "/api/v1/contracts": {
    /**
     * Get all Ranks
     * @description Get all Ranks
     *
     * - **skip**: int - The number of ranks
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ranks
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_contracts_get"];
    /**
     * Create Rank
     * @description Create Rank
     *
     * - **name**: required
     */
    post: operations["create_api_v1_contracts_post"];
  };
  "/api/v1/contracts/types": {
    /**
     * Get all Contract Types
     * @description Get all Contract Types
     *
     * - **skip**: int - The number of contract types
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of contract types
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_contract_types_api_v1_contracts_types_get"];
    /** Create contract type */
    post: operations["create_contract_type_api_v1_contracts_types_post"];
  };
  "/api/v1/contracts/{id}/": {
    /**
     * Get Rank by id
     * @description Get Rank by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_contracts__id___get"];
    /**
     * Update Rank
     * @description Update Rank
     *
     * - **id**: UUID - the ID of badge to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_contracts__id___put"];
    /**
     * Delete Rank
     * @description Delete Rank
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_contracts__id___delete"];
  };
  "/api/v1/jurisdictions": {
    /**
     * Get all Jurisdictions
     * @description Get all Jurisdictions
     *
     * - **skip**: int - The number of Jurisdictions
     *  to skip before returning the results.
     *  This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Jurisdictions
     *  to return in the response.
     *  This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_jurisdictions_get"];
  };
  "/api/v1/jurisdictions/{id}/": {
    /**
     * Get Jurisdiction by id
     * @description Get Jurisdiction by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_jurisdictions__id___get"];
  };
  "/api/v1/notifications": {
    /**
     * Get all Notifications
     * @description Get all Notifications
     *
     * - **skip**: int - The number of Notifications
     *  to skip before returning the results.
     *  This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Notifications
     *  to return in the response.
     *  This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_notifications_get"];
    /**
     * Create Notification
     * @description Create Notification
     *
     * **name** - required - str
     */
    post: operations["create_api_v1_notifications_post"];
  };
  "/api/v1/notifications/{id}/": {
    /**
     * Delete Notification
     * @description Delete Notification
     *
     * - **id** - UUID - required
     */
    delete: operations["delete_api_v1_notifications__id___delete"];
  };
  "/api/v1/notifications/test": {
    /**
     * Test Notifications
     * @description Test all Notifications
     */
    get: operations["test_api_v1_notifications_test_get"];
  };
  "/api/v1/notifications/detailed": {
    /**
     * Get all Detailed Notifications
     * @description Get all Detailed Notifications
     *
     * - **skip**: int - The number of Notifications
     *  to skip before returning the results.
     *  This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Notifications
     *  to return in the response.
     *  This parameter is optional and defaults to 10.
     */
    get: operations["get_all_detailed_api_v1_notifications_detailed_get"];
    /**
     * Create Detailed Notification
     * @description Create Detailed Notifications
     *
     * **name** - required - str
     */
    post: operations["create_api_v1_notifications_detailed_post"];
  };
  "/api/v1/privelege_emergencies": {
    /**
     * Get all Privelege Emergencies
     * @description Get all Military Units
     *
     * - **skip**: int - The number of Military Units
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Military Units
     *      to return in the response.
     *      This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_privelege_emergencies_get"];
    /**
     * Create Military Unit
     * @description Create Military Unit
     *
     * **name** - required - str
     */
    post: operations["create_api_v1_privelege_emergencies_post"];
  };
  "/api/v1/privelege_emergencies/forms/": {
    /**
     * Get all Privelege Emergency Forms
     * @description Get all Privelege Emergency Forms
     */
    get: operations["get_all_forms_api_v1_privelege_emergencies_forms__get"];
  };
  "/api/v1/privelege_emergencies/{id}/": {
    /**
     * Get Privelege Emergency Unit by id
     * @description Get Privelege Emergency by id
     *
     * - **id** - UUID - required
     */
    get: operations["get_by_id_api_v1_privelege_emergencies__id___get"];
    /**
     * Update Privelege Emergency
     * @description Update Privelege Emergency
     *
     * **name** - required - str
     */
    put: operations["update_api_v1_privelege_emergencies__id___put"];
    /**
     * Delete Privelege Emergency
     * @description Delete Military Unit
     *
     * - **id** - UUID - required
     */
    delete: operations["delete_api_v1_privelege_emergencies__id___delete"];
  };
  "/api/v1/privelege_emergencies/user/{id}/": {
    /**
     * Get Privelege Emergency Unit by user id
     * @description Get Privelege Emergency by user id
     *
     * - **user_id** - UUID - required
     */
    get: operations["get_by_user_id_api_v1_privelege_emergencies_user__id___get"];
  };
  "/api/v1/coolness": {
    /**
     * Get all Coolness
     * @description Get all Coolness
     *
     * - **skip**: int - The number of Coolness to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Coolness to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_coolness_get"];
    /**
     * Create Coolness
     * @description Create Coolness
     *
     * **name** - required - str
     */
    post: operations["create_api_v1_coolness_post"];
  };
  "/api/v1/coolness/types/": {
    /**
     * Get all Coolness types
     * @description Get all Coolness types
     */
    get: operations["get_all_types_api_v1_coolness_types__get"];
  };
  "/api/v1/coolness/statuses/": {
    /**
     * Get all Coolness statuses
     * @description Get all Coolness statuses
     */
    get: operations["get_all_types_api_v1_coolness_statuses__get"];
  };
  "/api/v1/coolness/forms/": {
    /**
     * Get all Specialty Enum
     * @description Get all Specialty Enum
     */
    get: operations["get_all_forms_api_v1_coolness_forms__get"];
  };
  "/api/v1/coolness/{id}/": {
    /**
     * Get Coolness by id
     * @description Get Coolness by id
     *
     * - **id** - UUID - required
     */
    get: operations["get_by_id_api_v1_coolness__id___get"];
    /**
     * Update Coolness
     * @description Update Coolness
     *
     * **name** - required - str
     */
    put: operations["update_api_v1_coolness__id___put"];
    /**
     * Delete Coolness
     * @description Delete Coolness
     *
     * - **id** - UUID - required
     */
    delete: operations["delete_api_v1_coolness__id___delete"];
  };
  "/api/v1/personnal_reserve": {
    /**
     * Get all Privelege Emergencies
     * @description Get all Military Units
     *
     * - **skip**: int - The number of Military Units
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Military Units
     *      to return in the response.
     *      This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_personnal_reserve_get"];
    /**
     * Create Military Unit
     * @description Create Military Unit
     *
     * **name** - required - str
     */
    post: operations["create_api_v1_personnal_reserve_post"];
  };
  "/api/v1/personnal_reserve/forms/": {
    /**
     * Get all Reserve Enum
     * @description Get all Privelege Emergency Forms
     */
    get: operations["get_all_forms_api_v1_personnal_reserve_forms__get"];
  };
  "/api/v1/personnal_reserve/{id}/": {
    /**
     * Get Privelege Emergency Unit by id
     * @description Get Privelege Emergency by id
     *
     * - **id** - UUID - required
     */
    get: operations["get_by_id_api_v1_personnal_reserve__id___get"];
    /**
     * Update Privelege Emergency
     * @description Update Privelege Emergency
     *
     * **name** - required - str
     */
    put: operations["update_api_v1_personnal_reserve__id___put"];
    /**
     * Delete Privelege Emergency
     * @description Delete Military Unit
     *
     * - **id** - UUID - required
     */
    delete: operations["delete_api_v1_personnal_reserve__id___delete"];
  };
  "/api/v1/education/academic_degrees": {
    /**
     * Get all AcademicDegrees
     * @description Get all AcademicDegrees
     *
     * - **skip**: int - The number of AcademicDegrees
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of AcademicDegrees
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_academic_degrees_get"];
    /**
     * Create
     * @description Create new AcademicDegree
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_academic_degrees_post"];
  };
  "/api/v1/education/academic_degrees/{id}/": {
    /**
     * Get AcademicDegree by id
     * @description Get AcademicDegree by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_academic_degrees__id___get"];
    /**
     * Update AcademicDegree
     * @description Update AcademicDegree
     *
     * - **id**: UUID - the ID of AcademicDegree to update.
     *     This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_academic_degrees__id___put"];
    /**
     * Delete AcademicDegree
     * @description Delete AcademicDegree
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_academic_degrees__id___delete"];
  };
  "/api/v1/education/academic_degree_degrees": {
    /**
     * Get all AcademicDegreeDegrees
     * @description Get all AcademicDegreeDegrees
     *
     * - **skip**: int - The number of AcademicDegreeDegrees
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of AcademicDegreeDegrees
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_academic_degree_degrees_get"];
    /**
     * Create
     * @description Create new AcademicDegreeDegree
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_academic_degree_degrees_post"];
  };
  "/api/v1/education/academic_degree_degrees/{id}/": {
    /**
     * Get AcademicDegreeDegree by id
     * @description Get AcademicDegreeDegree by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_academic_degree_degrees__id___get"];
    /**
     * Update AcademicDegreeDegree
     * @description Update AcademicDegreeDegree
     *
     * - **id**: UUID - the ID of AcademicDegreeDegree to update.
     *     This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_academic_degree_degrees__id___put"];
    /**
     * Delete AcademicDegreeDegree
     * @description Delete AcademicDegreeDegree
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_academic_degree_degrees__id___delete"];
  };
  "/api/v1/education/academic_titles": {
    /**
     * Get all AcademicTitles
     * @description Get all AcademicTitles
     *
     * - **skip**: int - The number of AcademicTitles
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of AcademicTitles
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_academic_titles_get"];
    /**
     * Create
     * @description Create new AcademicTitle
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_academic_titles_post"];
  };
  "/api/v1/education/academic_titles/{id}/": {
    /**
     * Get AcademicTitle by id
     * @description Get AcademicTitle by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_academic_titles__id___get"];
    /**
     * Update AcademicTitle
     * @description Update AcademicTitle
     *
     * - **id**: UUID - the ID of AcademicTitle to update.
     *     This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_academic_titles__id___put"];
    /**
     * Delete AcademicTitle
     * @description Delete AcademicTitle
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_academic_titles__id___delete"];
  };
  "/api/v1/education/educations": {
    /**
     * Get all Educations
     * @description Get all Educations
     *
     * - **skip**: int - The number of Educations
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Educations
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_educations_get"];
    /**
     * Create
     * @description Create new Education
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_educations_post"];
  };
  "/api/v1/education/educations/{id}/": {
    /**
     * Get Education by id
     * @description Get Education by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_educations__id___get"];
    /**
     * Update Education
     * @description Update Education
     *
     * - **id**: UUID - the ID of Education to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_educations__id___put"];
    /**
     * Delete Education
     * @description Delete Education
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_educations__id___delete"];
  };
  "/api/v1/education/educational_profiles": {
    /**
     * Get all EducationalProfiles
     * @description Get all EducationalProfiles
     *
     * - **skip**: int - The number of EducationalProfiles
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of EducationalProfiles
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_educational_profiles_get"];
    /**
     * Create
     * @description Create new EducationalProfile
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_educational_profiles_post"];
  };
  "/api/v1/education/educational_profiles/{id}/": {
    /**
     * Get EducationalProfile by id
     * @description Get EducationalProfile by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_educational_profiles__id___get"];
    /**
     * Update EducationalProfile
     * @description Update EducationalProfile
     *
     * - **id**: UUID - the ID of EducationalProfile to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_educational_profiles__id___put"];
    /**
     * Delete EducationalProfile
     * @description Delete EducationalProfile
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_educational_profiles__id___delete"];
  };
  "/api/v1/education/educational_profiles/profile": {
    /** Get Profile */
    get: operations["get_profile_api_v1_education_educational_profiles_profile_get"];
  };
  "/api/v1/education/educational_profiles/profile/{id}": {
    /** Get Profile By Id */
    get: operations["get_profile_by_id_api_v1_education_educational_profiles_profile__id__get"];
  };
  "/api/v1/education/institutions": {
    /**
     * Get all Institutions
     * @description Get all Institutions
     *
     * - **skip**: int - The number of Institutions
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Institutions
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_institutions_get"];
    /**
     * Create
     * @description Create new Institution
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_institutions_post"];
  };
  "/api/v1/education/institutions/{id}/": {
    /**
     * Get Institution by id
     * @description Get Institution by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_institutions__id___get"];
    /**
     * Update Institution
     * @description Update Institution
     *
     * - **id**: UUID - the ID of Institution to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_institutions__id___put"];
    /**
     * Delete Institution
     * @description Delete Institution
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_institutions__id___delete"];
  };
  "/api/v1/education/institution_degree_types": {
    /**
     * Get all InstitutionDegreeTypes
     * @description Get all InstitutionDegreeTypes
     *
     * - **skip**: int - The number of InstitutionDegreeTypes
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of InstitutionDegreeTypes
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_institution_degree_types_get"];
    /**
     * Create
     * @description Create new InstitutionDegreeType
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_institution_degree_types_post"];
  };
  "/api/v1/education/institution_degree_types/{id}/": {
    /**
     * Get InstitutionDegreeType by id
     * @description Get InstitutionDegreeType by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_institution_degree_types__id___get"];
    /**
     * Update InstitutionDegreeType
     * @description Update InstitutionDegreeType
     *
     * - **id**: UUID - the ID of InstitutionDegreeType to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_institution_degree_types__id___put"];
    /**
     * Delete InstitutionDegreeType
     * @description Delete InstitutionDegreeType
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_institution_degree_types__id___delete"];
  };
  "/api/v1/education/languages": {
    /**
     * Get all Languages
     * @description Get all Languages
     *
     * - **skip**: int - The number of Languages
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Languages
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_languages_get"];
    /**
     * Create
     * @description Create new Language
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_languages_post"];
  };
  "/api/v1/education/languages/{id}/": {
    /**
     * Get Language by id
     * @description Get Language by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_languages__id___get"];
    /**
     * Update Language
     * @description Update Language
     *
     * - **id**: UUID - the ID of Language to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_languages__id___put"];
    /**
     * Delete Language
     * @description Delete Language
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_languages__id___delete"];
  };
  "/api/v1/education/language_proficiencies": {
    /**
     * Get all LanguageProficiencies
     * @description Get all LanguageProficiencies
     *
     * - **skip**: int - The number of LanguageProficiencies
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of LanguageProficiencies
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_language_proficiencies_get"];
    /**
     * Create
     * @description Create new LanguageProficiency
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_language_proficiencies_post"];
  };
  "/api/v1/education/language_proficiencies/{id}/": {
    /**
     * Get LanguageProficiency by id
     * @description Get LanguageProficiency by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_language_proficiencies__id___get"];
    /**
     * Update LanguageProficiency
     * @description Update LanguageProficiency
     *
     * - **id**: UUID - the ID of LanguageProficiency to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_language_proficiencies__id___put"];
    /**
     * Delete LanguageProficiency
     * @description Delete LanguageProficiency
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_language_proficiencies__id___delete"];
  };
  "/api/v1/education/sciences": {
    /**
     * Get all Sciences
     * @description Get all Sciences
     *
     * - **skip**: int - The number of Sciences
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Sciences
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_sciences_get"];
    /**
     * Create
     * @description Create new Science
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_sciences_post"];
  };
  "/api/v1/education/sciences/{id}/": {
    /**
     * Get Science by id
     * @description Get Science by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_sciences__id___get"];
    /**
     * Update Science
     * @description Update Science
     *
     * - **id**: UUID - the ID of Science to update.
     *     This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_sciences__id___put"];
    /**
     * Delete Science
     * @description Delete Science
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_sciences__id___delete"];
  };
  "/api/v1/education/specialties": {
    /**
     * Get all Specialties
     * @description Get all Specialties
     *
     * - **skip**: int - The number of Specialties
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Specialties
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_specialties_get"];
    /**
     * Create
     * @description Create new Specialty
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_specialties_post"];
  };
  "/api/v1/education/specialties/{id}/": {
    /**
     * Get Specialty by id
     * @description Get Specialty by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_specialties__id___get"];
    /**
     * Update Specialty
     * @description Update Specialty
     *
     * - **id**: UUID - the ID of Specialty to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_specialties__id___put"];
    /**
     * Delete Specialty
     * @description Delete Specialty
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_specialties__id___delete"];
  };
  "/api/v1/education/courses": {
    /**
     * Get all Courses
     * @description Get all Courses
     *
     * - **skip**: int - The number of Courses
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Courses
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_courses_get"];
    /**
     * Create
     * @description Create new Course
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_courses_post"];
  };
  "/api/v1/education/courses/{id}/": {
    /**
     * Get Course by id
     * @description Get Course by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_courses__id___get"];
    /**
     * Update Course
     * @description Update Course
     *
     * - **id**: UUID - the ID of Course to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_courses__id___put"];
    /**
     * Delete Course
     * @description Delete Course
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_courses__id___delete"];
  };
  "/api/v1/education/course_providers": {
    /**
     * Get all CourseProviders
     * @description Get all CourseProviders
     *
     * - **skip**: int - The number of CourseProviders
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of CourseProviders
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_course_providers_get"];
    /**
     * Create
     * @description Create new CourseProvider
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_course_providers_post"];
  };
  "/api/v1/education/course_providers/{id}/": {
    /**
     * Get CourseProvider by id
     * @description Get CourseProvider by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_course_providers__id___get"];
    /**
     * Update CourseProvider
     * @description Update CourseProvider
     *
     * - **id**: UUID - the ID of CourseProvider to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_course_providers__id___put"];
    /**
     * Delete CourseProvider
     * @description Delete CourseProvider
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_course_providers__id___delete"];
  };
  "/api/v1/education/academic_title_degrees": {
    /**
     * Get all AcademicTitleDegrees
     * @description Get all AcademicTitleDegrees
     *
     * - **skip**: int - The number of AcademicTitleDegrees
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of AcademicTitleDegrees
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_education_academic_title_degrees_get"];
    /**
     * Create
     * @description Create new AcademicTitleDegree
     *
     * - **name**: required
     */
    post: operations["create_api_v1_education_academic_title_degrees_post"];
  };
  "/api/v1/education/academic_title_degrees/{id}/": {
    /**
     * Get AcademicTitleDegree by id
     * @description Get AcademicTitleDegree by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_education_academic_title_degrees__id___get"];
    /**
     * Update AcademicTitleDegree
     * @description Update AcademicTitleDegree
     *
     * - **id**: UUID - the ID of AcademicTitleDegree to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_education_academic_title_degrees__id___put"];
    /**
     * Delete AcademicTitleDegree
     * @description Delete AcademicTitleDegree
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_education_academic_title_degrees__id___delete"];
  };
  "/api/v1/medical/anthropometric_data": {
    /**
     * Get all AnthropometricData
     * @description Get all AnthropometricData
     *
     * - **skip**: int - The number of AnthropometricData
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of AnthropometricData
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_medical_anthropometric_data_get"];
    /**
     * Create AnthropometricData
     * @description Create new AnthropometricData
     *
     * - **head_circumference**: int
     * - **shoe_size**: int
     * - **neck_circumference**: int
     * - **shape_size**: int
     * - **bust_size**: int
     * - **profile_id**: str
     */
    post: operations["create_api_v1_medical_anthropometric_data_post"];
  };
  "/api/v1/medical/anthropometric_data/{id}/": {
    /**
     * Get AnthropometricData by id
     * @description Get Anthropometric Data by id
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_medical_anthropometric_data__id___get"];
    /**
     * Update AnthropometricData
     * @description Update AnthropometricData
     *
     * - **id**: UUID - the ID of AnthropometricData to update. This is required.
     * - **head_circumference**: int
     * - **shoe_size**: int
     * - **neck_circumference**: int
     * - **shape_size**: int
     * - **bust_size**: int
     * - **profile_id**: str
     */
    put: operations["update_api_v1_medical_anthropometric_data__id___put"];
    /**
     * Delete AnthropometricData
     * @description Delete AnthropometricData
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_medical_anthropometric_data__id___delete"];
  };
  "/api/v1/medical/dispensary_registration": {
    /**
     * Get all DispensaryRegistration
     * @description Get all DispensaryRegistration
     *
     * - **skip**: int - The number of DispensaryRegistration
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of DispensaryRegistration
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_medical_dispensary_registration_get"];
    /**
     * Create DispensaryRegistration
     * @description Create new DispensaryRegistration
     *
     * - **initiator**: str
     * - **start_date**: datetime.datetime
     * - **end_date**: datetime.datetime
     * - **document_link**: str
     * - **profile_id**: str
     */
    post: operations["create_api_v1_medical_dispensary_registration_post"];
  };
  "/api/v1/medical/dispensary_registration/{id}/": {
    /**
     * Get DispensaryRegistration by id
     * @description Get DispensaryRegistration by id
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_medical_dispensary_registration__id___get"];
    /**
     * Update DispensaryRegistration
     * @description Update AcademicDegree
     *
     * - **id**: UUID - the ID of DispensaryRegistration to update. This is required.
     * - **initiator**: str
     * - **start_date**: datetime.datetime
     * - **end_date**: datetime.datetime
     * - **document_link**: str
     * - **profile_id**: str
     */
    put: operations["update_api_v1_medical_dispensary_registration__id___put"];
    /**
     * Delete DispensaryRegistration
     * @description Delete a DispensaryRegistration
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_medical_dispensary_registration__id___delete"];
  };
  "/api/v1/medical/age_group": {
    /**
     * Get all AgeGroup
     * @description Get all AgeGroupEnum
     */
    get: operations["get_all_api_v1_medical_age_group_get"];
  };
  "/api/v1/medical/general_user_information": {
    /**
     * Get all GeneralUserInformation
     * @description Get all GeneralUserInformation
     *
     * - **skip**: int - The number of GeneralUserInformation
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of GeneralUserInformation
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_medical_general_user_information_get"];
    /**
     * Create GeneralUserInformation
     * @description Create new GeneralUserInformation
     *
     * - **height**: int
     * - **blood_group**: str
     * - **age_group**: int
     * - **profile_id**: str
     */
    post: operations["create_api_v1_medical_general_user_information_post"];
  };
  "/api/v1/medical/general_user_information/{id}/": {
    /**
     * Get GeneralUserInformation by id
     * @description Get GeneralUserInformation by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_medical_general_user_information__id___get"];
    /**
     * Update GeneralUserInformation
     * @description Update GeneralUserInformation
     *
     * - **id**: UUID - the ID of GeneralUserInformation to update. This is required.
     * - **height**: int
     * - **blood_group**: str
     * - **age_group**: int
     * - **profile_id**: str
     */
    put: operations["update_api_v1_medical_general_user_information__id___put"];
    /**
     * Delete GeneralUserInformation
     * @description Delete a GeneralUserInformation
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_medical_general_user_information__id___delete"];
  };
  "/api/v1/medical/hospital_data": {
    /**
     * Get all HospitalData
     * @description Get all HospitalData
     *
     * - **skip**: int - The number of HospitalData
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HospitalData
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_medical_hospital_data_get"];
    /**
     * Create HospitalData
     * @description Create new HospitalData
     *
     * - **code**: str
     * - **reason**: str
     * - **place**: str
     * - **start_date**: datetime.datetime
     * - **end_date**: datetime.datetime
     * - **document_link**: str
     * - **profile_id**: str
     */
    post: operations["create_api_v1_medical_hospital_data_post"];
  };
  "/api/v1/medical/hospital_data/{id}/": {
    /**
     * Get HospitalData by id
     * @description Get Hospital Data by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_medical_hospital_data__id___get"];
    /**
     * Update HospitalData
     * @description Update HospitalData
     *
     * - **id**: UUID - the ID of Hospital Data to update. This is required.
     * - **code**: str
     * - **reason**: str
     * - **place**: str
     * - **start_date**: datetime.datetime
     * - **end_date**: datetime.datetime
     * - **document_link**: str
     * - **profile_id**: str
     */
    put: operations["update_api_v1_medical_hospital_data__id___put"];
    /**
     * Delete HospitalData
     * @description Delete a HospitalData
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_medical_hospital_data__id___delete"];
  };
  "/api/v1/medical/medical_profile": {
    /**
     * Get all MedicalProfile
     * @description Get all Medical Profile
     *
     * - **skip**: int - The number of MedicalProfile
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of MedicalProfile
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_medical_medical_profile_get"];
    /**
     * Create MedicalProfile
     * @description Create new MedicalProfile
     *
     * - **profile_id**: str
     */
    post: operations["create_api_v1_medical_medical_profile_post"];
  };
  "/api/v1/medical/medical_profile/{id}/": {
    /**
     * Get MedicalProfile by id
     * @description Get MedicalProfile by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_medical_medical_profile__id___get"];
    /**
     * Update MedicalProfile
     * @description Update Medical Profile
     *
     * - **id**: UUID - the ID of MedicalProfile to update. This is required.
     * - **profile_id**: str
     */
    put: operations["update_api_v1_medical_medical_profile__id___put"];
    /**
     * Delete MedicalProfile
     * @description Delete a MedicalProfile
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_medical_medical_profile__id___delete"];
  };
  "/api/v1/medical/medical_profile/profile": {
    /** Get Profile */
    get: operations["get_profile_api_v1_medical_medical_profile_profile_get"];
  };
  "/api/v1/medical/medical_profile/profile/{id}": {
    /** Get Profile By Id */
    get: operations["get_profile_by_id_api_v1_medical_medical_profile_profile__id__get"];
  };
  "/api/v1/medical/user_liberations": {
    /**
     * Get all UserLiberation
     * @description Get all UserLiberation
     *
     * - **skip**: int - The number of UserLiberation
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of UserLiberation
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_medical_user_liberations_get"];
    /**
     * Create UserLiberation
     * @description Create new UserLiberation
     *
     * - **reason**: str
     * - **liberation_name**: str
     * - **initiator**: str
     * - **start_date**: datetime.datetime
     * - **end_date**: datetime.datetime
     * - **profile_id**: str
     */
    post: operations["create_api_v1_medical_user_liberations_post"];
  };
  "/api/v1/medical/user_liberations/{id}/": {
    /**
     * Get UserLiberation by id
     * @description Get UserLiberation by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_medical_user_liberations__id___get"];
    /**
     * Update UserLiberation
     * @description Update UserLiberation
     *
     * - **id**: UUID - the ID of UserLiberation to update. This is required.
     * - **reason**: str
     * - **liberation_name**: str
     * - **initiator**: str
     * - **start_date**: datetime.datetime
     * - **end_date**: datetime.datetime
     * - **profile_id**: str
     */
    put: operations["update_api_v1_medical_user_liberations__id___put"];
    /**
     * Delete UserLiberation
     * @description Delete a UserLiberation
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_medical_user_liberations__id___delete"];
  };
  "/api/v1/medical/liberations": {
    /**
     * Get all Liberation
     * @description Get all Liberation
     *
     * - **skip**: int - The number of Liberation
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Liberation
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_medical_liberations_get"];
    /**
     * Create Liberation
     * @description Create new Liberation
     *
     * - **name**: str -required
     */
    post: operations["create_api_v1_medical_liberations_post"];
  };
  "/api/v1/medical/liberations/{id}/": {
    /**
     * Get Liberation by id
     * @description Get Hospital Data by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_medical_liberations__id___get"];
    /**
     * Update Liberation
     * @description Update Liberation
     *
     * - **id**: UUID - required.
     * - **name**: str -required
     */
    put: operations["update_api_v1_medical_liberations__id___put"];
    /**
     * Delete Liberation
     * @description Delete a Liberation
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_medical_liberations__id___delete"];
  };
  "/api/v1/medical/blood_types": {
    /** Get All */
    get: operations["get_all_api_v1_medical_blood_types_get"];
  };
  "/api/v1/profile": {
    /**
     * Get all Profiles
     * @description Get all Profiles
     */
    get: operations["get_all_api_v1_profile_get"];
    /**
     * Create
     * @description Create new profile
     *
     * no parameters required.
     */
    post: operations["create_api_v1_profile_post"];
  };
  "/api/v1/profile/{id}/": {
    /**
     * Get Profile by id
     * @description Get profile by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_profile__id___get"];
    /**
     * Update Profile
     * @description Update Profile
     */
    put: operations["update_api_v1_profile__id___put"];
    /**
     * Delete Profile
     * @description Delete Profile
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_profile__id___delete"];
  };
  "/api/v1/personal/family_status": {
    /**
     * Get all FamilyStatus
     * @description Get all FamilyStatus
     *
     * - **skip**: int - The number of FamilyStatus
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of FamilyStatus
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_family_status_get"];
  };
  "/api/v1/personal/family_status/{id}/": {
    /**
     * Get FamilyStatus by id
     * @description Get FamilyStatus by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_family_status__id___get"];
  };
  "/api/v1/personal/family_status/user/{user_id}": {
    /** Get Profile By Id */
    get: operations["get_profile_by_id_api_v1_personal_family_status_user__user_id__get"];
  };
  "/api/v1/personal/biographic_info": {
    /**
     * Get all BiographicInfo
     * @description Get all BiographicInfo
     *
     * - **skip**: int - The number of BiographicInfo
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of BiographicInfo
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_biographic_info_get"];
    /**
     * Create BiographicInfo
     * @description Create new BiographicInfo
     *
     * - **place_birth**: datetime.date -
     * - **gender**: bool
     * - **citizenship**: str
     * - **nationality**: str
     * - **family_status**: str
     * - **address**: str
     * - **profile_id**: str
     */
    post: operations["create_api_v1_personal_biographic_info_post"];
  };
  "/api/v1/personal/biographic_info/{id}/": {
    /**
     * Get BiographicInfo by id
     * @description Get BiographicInfo by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_biographic_info__id___get"];
    /**
     * Update BiographicInfo
     * @description Update BiographicInfo
     *
     * - **id**: UUID - the ID of BiographicInfo to update. This is required.
     * - **residence_address**: str
     */
    put: operations["update_api_v1_personal_biographic_info__id___put"];
    /**
     * Delete BiographicInfo
     * @description Delete BiographicInfo
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_personal_biographic_info__id___delete"];
  };
  "/api/v1/personal/driving_license": {
    /**
     * Get all DrivingLicense
     * @description Get all DrivingLicense
     *
     * - **skip**: int - The number of DrivingLicense
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of DrivingLicense
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_driving_license_get"];
    /**
     * Create DrivingLicense
     * @description Create new DrivingLicense
     *
     * - **document_number**: str
     * - **category**: List[str]
     * - **date_of_issue**: datetime.date
     * - **date_to**: datetime.date
     * - **document_link**: str
     * - **profile_id**: str
     */
    post: operations["create_api_v1_personal_driving_license_post"];
  };
  "/api/v1/personal/driving_license/{id}/": {
    /**
     * Get DrivingLicense by id
     * @description Get DrivingLicense by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_driving_license__id___get"];
    /**
     * Update DrivingLicense
     * @description Update DrivingLicense
     *
     * - **id**: UUID - the ID of DrivingLicense to update. This is required.
     * - **document_link**: str (url)
     */
    put: operations["update_api_v1_personal_driving_license__id___put"];
    /**
     * Delete DrivingLicense
     * @description Delete DrivingLicense
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_personal_driving_license__id___delete"];
  };
  "/api/v1/personal/driving_license/{id}/document_link/": {
    /**
     * Update DrivingLicense document_link
     * @description Update DrivingLicense document_link
     *
     * - **id**: UUID - the ID of DrivingLicense to update. This is required.
     * - **document_link**: str (url)
     */
    put: operations["update_document_link_api_v1_personal_driving_license__id__document_link__put"];
  };
  "/api/v1/personal/identification_card": {
    /**
     * Get all IdentificationCard
     * @description Get all IdentificationCard
     *
     * - **skip**: int - The number of IdentificationCard
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of IdentificationCard
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_identification_card_get"];
    /**
     * Create IdentificationCard
     * @description Create new IdentificationCard
     *
     * - **document_number**: str
     * - **date_of_issue**: datetime.date
     * - **date_to: datetime**.date
     * - **issued_by**: str
     * - **document_link**: str
     * - **profile_id**: str
     */
    post: operations["create_api_v1_personal_identification_card_post"];
  };
  "/api/v1/personal/identification_card/{id}/": {
    /**
     * Get IdentificationCard by id
     * @description Get IdentificationCard by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_identification_card__id___get"];
    /**
     * Update IdentificationCard
     * @description Update IdentificationCard
     *
     * - **id**: UUID - the ID of IdentificationCard to update. This is required.
     * - **document_link**: str (url)
     */
    put: operations["update_api_v1_personal_identification_card__id___put"];
    /**
     * Delete IdentificationCard
     * @description Delete IdentificationCard
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_personal_identification_card__id___delete"];
  };
  "/api/v1/personal/passport": {
    /**
     * Get all Passport
     * @description Get all Passport
     *
     * - **skip**: int - The number of Passport
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Passport
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_passport_get"];
    /**
     * Create Passport
     * @description Create new Passport
     *
     * - **document_number**: str
     * - **date_of_issue**: datetime.date
     * - **date_to**: datetime.date
     * - **document_link**: str
     * - **profile_id**: str
     */
    post: operations["create_api_v1_personal_passport_post"];
  };
  "/api/v1/personal/passport/{id}/": {
    /**
     * Get Passport by id
     * @description Get Passport by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_passport__id___get"];
    /**
     * Update Passport
     * @description Update Passport
     *
     * - **id**: UUID - the ID of Passport to update. This is required.
     * - **document_link**: str (url)
     */
    put: operations["update_api_v1_personal_passport__id___put"];
    /**
     * Delete Passport
     * @description Delete Passport
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_personal_passport__id___delete"];
  };
  "/api/v1/personal/personal_profile": {
    /**
     * Get all PersonalProfiles
     * @description Get all PersonalProfiles
     *
     * - **skip**: int - The number of PersonalProfiles
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of PersonalProfiles
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_personal_profile_get"];
    /**
     * Create PersonalProfiles
     * @description Create new PersonalProfiles
     *
     * no parameters required
     */
    post: operations["create_api_v1_personal_personal_profile_post"];
  };
  "/api/v1/personal/personal_profile/rand/{id}/": {
    /**
     * Get random personal document
     * @description Get all PersonalProfiles
     *
     * - **skip**: int - The number of PersonalProfiles
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of PersonalProfiles
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_rand_api_v1_personal_personal_profile_rand__id___get"];
  };
  "/api/v1/personal/personal_profile/{id}/": {
    /**
     * Get PersonalProfiles by id
     * @description Get PersonalProfiles by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_personal_profile__id___get"];
    /**
     * Delete PersonalProfiles
     * @description Delete PersonalProfiles
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_personal_personal_profile__id___delete"];
  };
  "/api/v1/personal/personal_profile/profile": {
    /** Get Profile */
    get: operations["get_profile_api_v1_personal_personal_profile_profile_get"];
  };
  "/api/v1/personal/personal_profile/profile/{id}": {
    /** Get Profile By Id */
    get: operations["get_profile_by_id_api_v1_personal_personal_profile_profile__id__get"];
  };
  "/api/v1/personal/sport_achievement": {
    /**
     * Get all SportAchievement
     * @description Get all SportAchievement
     *
     * - **skip**: int - The number of SportAchievement
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of SportAchievement
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_sport_achievement_get"];
    /**
     * Create SportAchievement
     * @description Create new SportAchievement
     *
     * - **name**: str
     * - **assignment_date**: datetime.date
     * - **document_link**: str
     * - **profile_id**: str
     */
    post: operations["create_api_v1_personal_sport_achievement_post"];
  };
  "/api/v1/personal/sport_achievement/{id}/": {
    /**
     * Get SportAchievement by id
     * @description Get SportAchievement by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_sport_achievement__id___get"];
    /**
     * Update SportAchievement
     * @description Update SportAchievement
     *
     * - **id**: UUID - the ID of SportAchievement to update. This is required.
     * - **name**: str
     * - **assignment_date**: datetime.date
     * - **document_link**: str
     * - **profile_id**: str
     */
    put: operations["update_api_v1_personal_sport_achievement__id___put"];
    /**
     * Delete SportAchievement
     * @description Delete SportAchievement
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_personal_sport_achievement__id___delete"];
  };
  "/api/v1/personal/sport_degree": {
    /**
     * Get all SportDegree
     * @description Get all SportDegree
     *
     * - **skip**: int - The number of SportDegree
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of SportDegree
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_sport_degree_get"];
    /**
     * Create SportDegree
     * @description Create new SportDegree
     *
     * - **name**: str
     * - **assignment_date**: datetime.date
     * - **document_link**: str
     * - **profile_id**: str
     */
    post: operations["create_api_v1_personal_sport_degree_post"];
  };
  "/api/v1/personal/sport_degree/{id}/": {
    /**
     * Get SportDegree by id
     * @description Get SportDegree by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_sport_degree__id___get"];
    /**
     * Update SportDegree
     * @description Update SportDegree
     *
     * - **id**: UUID - the ID of SportDegree to update. This is required.
     * - **name**: str
     * - **assignment_date**: datetime.date
     * - **document_link**: str
     * - **profile_id**: str
     */
    put: operations["update_api_v1_personal_sport_degree__id___put"];
    /**
     * Delete SportDegree
     * @description Delete SportDegree
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_personal_sport_degree__id___delete"];
  };
  "/api/v1/personal/tax_declaration": {
    /**
     * Get all TaxDeclaration
     * @description Get all TaxDeclaration
     *
     * - **skip**: int - The number of TaxDeclaration
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of TaxDeclaration
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_tax_declaration_get"];
    /**
     * Create TaxDeclaration
     * @description Create new TaxDeclaration
     *
     * - **id**: UUID - the ID of TaxDeclaration to update. This is required.
     * - **year**: str
     * - **is_paid**: bool
     * - **profile_id**: str
     */
    post: operations["create_api_v1_personal_tax_declaration_post"];
  };
  "/api/v1/personal/tax_declaration/{id}/": {
    /**
     * Get TaxDeclaration by id
     * @description Get TaxDeclaration by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_tax_declaration__id___get"];
    /**
     * Update TaxDeclaration
     * @description Update TaxDeclaration
     *
     * - **year**: str
     * - **is_paid**: bool
     * - **profile_id**: str
     */
    put: operations["update_api_v1_personal_tax_declaration__id___put"];
    /**
     * Delete TaxDeclaration
     * @description Delete TaxDeclaration
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_personal_tax_declaration__id___delete"];
  };
  "/api/v1/personal/user_financial_info": {
    /**
     * Get all UserFinancialInfo
     * @description Get all UserFinancialInfo
     *
     * - **skip**: int - The number of UserFinancialInfo
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of UserFinancialInfo
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_user_financial_info_get"];
    /**
     * Create UserFinancialInfo
     * @description Create new UserFinancialInfo
     *
     * - **iban**: str
     * - **housing_payments_iban**: str
     * - **profile_id**: str
     */
    post: operations["create_api_v1_personal_user_financial_info_post"];
  };
  "/api/v1/personal/user_financial_info/{id}/": {
    /**
     * Get UserFinancialInfo by id
     * @description Get UserFinancialInfo by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_personal_user_financial_info__id___get"];
    /**
     * Update UserFinancialInfo
     * @description Update UserFinancialInfo
     *
     * - **id**: UUID - the ID of UserFinancialInfo to update. This is required.
     * - **iban**: str
     * - **housing_payments_iban**: str
     * - **profile_id**: str
     */
    put: operations["update_api_v1_personal_user_financial_info__id___put"];
    /**
     * Delete UserFinancialInfo
     * @description Delete UserFinancialInfo
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_personal_user_financial_info__id___delete"];
  };
  "/api/v1/personal/sport_type": {
    /**
     * Get all SportType
     * @description Get all SportType
     *
     * - **skip**: int - The number of SportType
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of SportType
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_sport_type_get"];
    /**
     * Create SportType
     * @description Create new SportType
     *
     * - **name**: str
     */
    post: operations["create_api_v1_personal_sport_type_post"];
  };
  "/api/v1/personal/sport_type/{id}/": {
    /**
     * Get SportType by id
     * @description Get SportType by id
     */
    get: operations["get_by_id_api_v1_personal_sport_type__id___get"];
    /**
     * Update SportType by id
     * @description Update SportType by id
     *
     * - **name**: str
     */
    put: operations["update_api_v1_personal_sport_type__id___put"];
    /**
     * Delete SportType by id
     * @description Delete SportType by id
     */
    delete: operations["delete_api_v1_personal_sport_type__id___delete"];
  };
  "/api/v1/personal/sport_degree_type": {
    /**
     * Get all SportDereeTypes
     * @description Get all SportDegreeTypes
     *
     * - **skip**: int - The number of SportType
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of SportType
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_personal_sport_degree_type_get"];
    /**
     * Create SportDegreeType
     * @description Create new SportDegreeType
     *
     * - **name**: str
     */
    post: operations["create_api_v1_personal_sport_degree_type_post"];
  };
  "/api/v1/personal/sport_degree_type/{id}/": {
    /**
     * Get SportDegreeType by id
     * @description Get SportDegreeType by id
     */
    get: operations["get_by_id_api_v1_personal_sport_degree_type__id___get"];
    /**
     * Update SportDegreeType by id
     * @description Update SportDegreeType by id
     *
     * - **name**: str
     */
    put: operations["update_api_v1_personal_sport_degree_type__id___put"];
    /**
     * Delete SportDegreeType by id
     * @description Delete SportDegreeType by id
     */
    delete: operations["delete_api_v1_personal_sport_degree_type__id___delete"];
  };
  "/api/v1/additional/abroad-travel": {
    /**
     * Get all Abroad Travel
     * @description Get all Abroad Travel
     *
     * - **skip**: int - The number of abroad travel to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of abroad travel to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_abroad_travel_get"];
    /**
     * Create
     * @description Create new abroad travel
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_abroad_travel_post"];
  };
  "/api/v1/additional/abroad-travel/{id}/": {
    /**
     * Update Abroad Travel by id
     * @description Update abroad travel by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_abroad_travel__id___put"];
    /**
     * Delete Abroad Travel by id
     * @description Delete abroad travel by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_abroad_travel__id___delete"];
  };
  "/api/v1/additional/additional-profile": {
    /**
     * Get all Additional Profile
     * @description Get all Abroad Travel
     *
     * - **skip**: int - The number of abroad travel to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of abroad travel to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_additional_profile_get"];
    /**
     * Create
     * @description Create new abroad travel
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_additional_profile_post"];
  };
  "/api/v1/additional/additional-profile/{id}/": {
    /**
     * Get Additional Profile by id
     * @description Get additional profile by id
     *
     * - **name**: required
     */
    get: operations["get_by_id_api_v1_additional_additional_profile__id___get"];
    /**
     * Update Abroad Travel by id
     * @description Update abroad travel by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_additional_profile__id___put"];
    /**
     * Delete Abroad Travel by id
     * @description Delete abroad travel by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_additional_profile__id___delete"];
  };
  "/api/v1/additional/additional-profile/profile": {
    /** Get Profile */
    get: operations["get_profile_api_v1_additional_additional_profile_profile_get"];
  };
  "/api/v1/additional/additional-profile/profile/{id}/": {
    /** Get Profile By Id */
    get: operations["get_profile_by_id_api_v1_additional_additional_profile_profile__id___get"];
  };
  "/api/v1/additional/polygraph-check": {
    /**
     * Get all Polygraph Check
     * @description Get all Abroad Travel
     *
     * - **skip**: int - The number of abroad travel to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of abroad travel to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_polygraph_check_get"];
    /**
     * Create
     * @description Create new polyhraph_check
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_polygraph_check_post"];
  };
  "/api/v1/additional/polygraph-check/{id}/": {
    /**
     * Update polyhraph_check by id
     * @description Update polyhraph_check by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_polygraph_check__id___put"];
    /**
     * Delete polyhraph_check by id
     * @description Delete polyhraph_check by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_polygraph_check__id___delete"];
  };
  "/api/v1/additional/psychological-check": {
    /**
     * Get all psychological check
     * @description Get all psychological check
     *
     * - **skip**: int - The number of psychological check to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of psychological check to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_psychological_check_get"];
    /**
     * Create
     * @description Create new psychological check
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_psychological_check_post"];
  };
  "/api/v1/additional/psychological-check/{id}/": {
    /**
     * Update psychological check by id
     * @description Update psychological check by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_psychological_check__id___put"];
    /**
     * Delete psychological check by id
     * @description Delete psychological check by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_psychological_check__id___delete"];
  };
  "/api/v1/additional/special-check": {
    /**
     * Get all Polygraph Check
     * @description Get all special_check
     *
     * - **skip**: int - The number of special_check to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of special_check to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_special_check_get"];
    /**
     * Create
     * @description Create new special_check
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_special_check_post"];
  };
  "/api/v1/additional/special-check/{id}/": {
    /**
     * Update Abroad Travel by id
     * @description Update special_check by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_special_check__id___put"];
    /**
     * Delete special_check by id
     * @description Delete special_check by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_special_check__id___delete"];
  };
  "/api/v1/additional/violation": {
    /**
     * Get all Polygraph Check
     * @description Get all Abroad Travel
     *
     * - **skip**: int - The number of abroad travel to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of abroad travel to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_violation_get"];
    /**
     * Create
     * @description Create new abroad travel
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_violation_post"];
  };
  "/api/v1/additional/violation/{id}/": {
    /**
     * Update Abroad Travel by id
     * @description Update abroad travel by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_violation__id___put"];
    /**
     * Delete Abroad Travel by id
     * @description Delete abroad travel by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_violation__id___delete"];
  };
  "/api/v1/additional/properties": {
    /**
     * Get all Properties
     * @description Get all Properties
     *
     * - **skip**: int - The number of Propertiers to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Properties to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_properties_get"];
    /**
     * Create
     * @description Create new abroad travel
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_properties_post"];
  };
  "/api/v1/additional/properties/{id}/": {
    /**
     * Update property by id
     * @description Update property by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_properties__id___put"];
    /**
     * Delete properties by id
     * @description Delete properties by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_properties__id___delete"];
  };
  "/api/v1/additional/property_types": {
    /**
     * Get all Properties
     * @description Get all Properties
     *
     * - **skip**: int - The number of Properties to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Properties to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_property_types_get"];
    /**
     * Create
     * @description Create new abroad travel
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_property_types_post"];
  };
  "/api/v1/additional/property_types/{id}/": {
    /**
     * Get Property Type by id
     * @description Get property type by id
     */
    get: operations["get_by_id_api_v1_additional_property_types__id___get"];
    /**
     * Update Property Type by id
     * @description Update Property Type by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_property_types__id___put"];
    /**
     * Delete properties by id
     * @description Delete properties by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_property_types__id___delete"];
  };
  "/api/v1/additional/service-housings": {
    /**
     * Get all Service Housings
     * @description Get all Service Housings
     *
     * - **skip**: int - The number of Service Housings to skip before returning
     *             the results
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Service Housings to return in the response
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_service_housings_get"];
    /**
     * Create
     * @description Create new abroad travel
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_service_housings_post"];
  };
  "/api/v1/additional/service-housings/{id}/": {
    /**
     * Update
     * @description Update Service Housing
     *
     * - **id**: required
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_service_housings__id___put"];
    /**
     * Delete
     * @description Delete Service Housing
     *
     * - **id**: required
     */
    delete: operations["delete_api_v1_additional_service_housings__id___delete"];
  };
  "/api/v1/additional/vehicle": {
    /**
     * Get all Vehicles
     * @description Get all vehicle
     *
     * - **skip**: int - The number of vehicle to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of vehicle to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_vehicle_get"];
    /**
     * Create Vehicle
     * @description Create new vehicle
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_vehicle_post"];
  };
  "/api/v1/additional/vehicle/{id}/": {
    /**
     * Get Vehicle by id
     * @description Get vehicle by id
     *
     * - **skip**: int - The number of vehicle to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of vehicle to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_by_id_api_v1_additional_vehicle__id___get"];
    /**
     * Update Vehicle by id
     * @description Update abroad travel by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_vehicle__id___put"];
    /**
     * Delete Vehicle by id
     * @description Delete vehicle by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_vehicle__id___delete"];
  };
  "/api/v1/additional/country": {
    /**
     * Get all Country
     * @description Get all Country
     *
     * - **skip**: int - The number of country to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of country to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_country_get"];
    /**
     * Create
     * @description Create new country
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_country_post"];
  };
  "/api/v1/additional/country/{id}/": {
    /**
     * Get Country by id
     * @description Get country by id
     */
    get: operations["get_by_id_api_v1_additional_country__id___get"];
    /**
     * Update
     * @description Update country
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_country__id___put"];
    /**
     * Delete
     * @description Delete country
     */
    delete: operations["delete_api_v1_additional_country__id___delete"];
  };
  "/api/v1/additional/vehicle_type": {
    /**
     * Get all VehicleTypes
     * @description Get all vehicle_type
     *
     * - **skip**: int - The number of vehicle_type to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of vehicle_type to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_additional_vehicle_type_get"];
    /**
     * Create VehicleType
     * @description Create new vehicle_type
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_additional_vehicle_type_post"];
  };
  "/api/v1/additional/vehicle_type/{id}/": {
    /**
     * Get VehicleType by id
     * @description Get vehicle_type by id
     *
     * - **skip**: int - The number of vehicle_type to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of vehicle_type to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_by_id_api_v1_additional_vehicle_type__id___get"];
    /**
     * Update VehicleType by id
     * @description Update abroad travel by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    put: operations["update_api_v1_additional_vehicle_type__id___put"];
    /**
     * Delete VehicleType by id
     * @description Delete vehicle_type by id
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    delete: operations["delete_api_v1_additional_vehicle_type__id___delete"];
  };
  "/api/v1/family/families": {
    /** Get All */
    get: operations["get_all_api_v1_family_families_get"];
    /** Create */
    post: operations["create_api_v1_family_families_post"];
  };
  "/api/v1/family/families/violation/{family_id}/": {
    /** Add Violation */
    post: operations["add_violation_api_v1_family_families_violation__family_id___post"];
  };
  "/api/v1/family/families/abroad_travel/{family_id}/": {
    /** Add Abroad Travel */
    post: operations["add_violation_api_v1_family_families_abroad_travel__family_id___post"];
  };
  "/api/v1/family/families/{id}/": {
    /** Get */
    get: operations["get_api_v1_family_families__id___get"];
    /** Update */
    put: operations["update_api_v1_family_families__id___put"];
    /** Delete */
    delete: operations["delete_api_v1_family_families__id___delete"];
  };
  "/api/v1/family/family_relations": {
    /** Get All */
    get: operations["get_all_api_v1_family_family_relations_get"];
  };
  "/api/v1/family/family_relations/{id}/": {
    /** Get By Id */
    get: operations["get_by_id_api_v1_family_family_relations__id___get"];
  };
  "/api/v1/family/family_profiles": {
    /** Get All */
    get: operations["get_all_api_v1_family_family_profiles_get"];
    /** Create */
    post: operations["create_api_v1_family_family_profiles_post"];
  };
  "/api/v1/family/family_profiles/{id}/": {
    /** Get */
    get: operations["get_api_v1_family_family_profiles__id___get"];
    /** Update */
    put: operations["update_api_v1_family_family_profiles__id___put"];
    /** Delete */
    delete: operations["delete_api_v1_family_family_profiles__id___delete"];
  };
  "/api/v1/family/family_profiles/profile": {
    /** Get By Profile */
    get: operations["get_by_profile_api_v1_family_family_profiles_profile_get"];
  };
  "/api/v1/family/family_profiles/profile/{id}/": {
    /** Get By Profile Id */
    get: operations["get_by_profile_id_api_v1_family_family_profiles_profile__id___get"];
  };
  "/api/v1/staff_list": {
    /**
     * Get all Staff Lists
     * @description Get all Staff Lists
     *
     * - **skip**: int - The number of staff divisions
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff divisions
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_staff_list_get"];
    /**
     * Create Staff List
     * @description Create Staff List
     * - **parent_group_id**: the id of the parent group. This parameter is optional.
     * - **name**: required
     * - **description**: a long description. This parameter is optional.
     */
    post: operations["create_api_v1_staff_list_post"];
  };
  "/api/v1/staff_list/drafts/": {
    /**
     * Get Staff List history
     * @description Get Staff Lists drafts
     *
     * - **skip**: int - The number of staff divisions
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff divisions
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_drafts_api_v1_staff_list_drafts__get"];
  };
  "/api/v1/staff_list/signed/": {
    /**
     * Get Staff List history
     * @description Get Staff Lists signed
     *
     * - **skip**: int - The number of staff divisions
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff divisions
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_signed_api_v1_staff_list_signed__get"];
  };
  "/api/v1/staff_list/task-status/{task_id}": {
    /** Staff List task status */
    get: operations["get_result_api_v1_staff_list_task_status__task_id__get"];
  };
  "/api/v1/staff_list/{id}/": {
    /**
     * Get Staff List by id
     * @description Get Staff List by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_staff_list__id___get"];
    /**
     * Update Staff List
     * @description Update Staff List
     *
     * - **id**: UUID - id of the Staff Division.
     * - **parent_group_id**: the id of the parent group.
     *     This parameter is optional.
     * - **name**: required
     * - **description**: a long description.
     *     This parameter is optional.
     */
    put: operations["update_api_v1_staff_list__id___put"];
    /**
     * Delete Staff List
     * @description Delete Staff List
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_staff_list__id___delete"];
  };
  "/api/v1/staff_list/apply/{id}/": {
    /**
     * Apply Staff List
     * @description Update Staff List
     *
     * - **id**: UUID - id of the Staff List.
     * - **signed_by**: required
     * - **document_creation_date**: required
     * - **date_from**: date - format (YYYY-MM-DD).
     *     This parameter is required.
     */
    post: operations["apply_staff_list_api_v1_staff_list_apply__id___post"];
  };
  "/api/v1/staff_list/duplicate/{id}/": {
    /**
     * Duplicate Staff List
     * @description Duplicate Staff List
     *
     * - **id**: UUID - id of the Staff List.
     */
    post: operations["duplicate_api_v1_staff_list_duplicate__id___post"];
  };
  "/api/v1/archive_staff_division": {
    /**
     * Get all Staff Divisions
     * @description Get all Staff Divisions
     *
     * - **skip**: int - The number of staff divisions
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff divisions
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_archive_staff_division_get"];
    /**
     * Create Staff Division
     * @description Create Staff Division
     *
     * - **parent_group_id**: the id of the parent group. This parameter is optional.
     * - **name**: required
     * - **description**: a long description. This parameter is optional.
     */
    post: operations["create_api_v1_archive_staff_division_post"];
  };
  "/api/v1/archive_staff_division/one-level/": {
    /**
     * Get Staff Division one level by id
     * @description Get all Staff Divisions
     *
     * - **id**: uuid - The id of staff division. This parameter is required.
     */
    get: operations["get_all_one_level_for_id_api_v1_archive_staff_division_one_level__get"];
  };
  "/api/v1/archive_staff_division/division_parents/{id}/": {
    /**
     * Get Archive Staff Division and all his parents
     * @description Get all Staff Divisions
     *
     * - **id**: uuid - The id of staff division. This parameter is required.
     */
    get: operations["get_division_parents_by_id_api_v1_archive_staff_division_division_parents__id___get"];
  };
  "/api/v1/archive_staff_division/duplicate/{id}/": {
    /**
     * Duplicate Staff Division by id
     * @description Get Staff Division by id
     *
     * - **id**: UUID - required
     */
    get: operations["duplicate_api_v1_archive_staff_division_duplicate__id___get"];
  };
  "/api/v1/archive_staff_division/{id}/": {
    /**
     * Get Staff Division by id
     * @description Get Staff Division by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_archive_staff_division__id___get"];
    /**
     * Update Staff Division
     * @description Update Staff Division
     *
     * - **id**: UUID - id of the Staff Division.
     * - **parent_group_id**: the id of the parent group. This parameter is optional.
     * - **name**: required
     * - **description**: a long description. This parameter is optional.
     */
    put: operations["update_api_v1_archive_staff_division__id___put"];
    /**
     * Update parent of Staff Division
     * @description Update parent of Staff Division
     *
     * - **id**: UUID - staff division id. It is required
     * - **parent_group_id**: the id of the parent group. It is required
     */
    post: operations["update_parent_api_v1_archive_staff_division__id___post"];
    /**
     * Delete Staff Division
     * @description Delete Staff Division
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_archive_staff_division__id___delete"];
  };
  "/api/v1/service_archive_staff_function_type": {
    /**
     * Get all ArchiveStaffFunction
     * @description Get all ArchiveStaffFunction
     *
     * - **skip**: int - The number of ArchiveStaffFunction
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ArchiveStaffFunction
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_service_archive_staff_function_type_get"];
    /**
     * Create ArchiveStaffFunction
     * @description Create ArchiveStaffFunction
     *
     * - **parent_group_id**: the id of the parent group.
     *     This parameter is optional.
     * - **name**: required
     * - **description**: a long description. This parameter is optional.
     */
    post: operations["create_api_v1_service_archive_staff_function_type_post"];
  };
  "/api/v1/service_archive_staff_function_type/{id}/": {
    /**
     * Get ArchiveStaffFunction by id
     * @description Get ArchiveStaffFunction by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_service_archive_staff_function_type__id___get"];
    /**
     * Update ArchiveStaffFunction
     * @description Update ArchiveStaffFunction
     *
     * - **id**: UUID - id of the ArchiveStaffFunction.
     * - **parent_group_id**: the id of the parent group.
     *     This parameter is optional.
     * - **name**: required
     * - **description**: a long description.
     *     This parameter is optional.
     */
    put: operations["update_api_v1_service_archive_staff_function_type__id___put"];
    /**
     * Delete ArchiveStaffFunction
     * @description Delete ArchiveStaffFunction
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_service_archive_staff_function_type__id___delete"];
  };
  "/api/v1/archive_service_staff_function": {
    /**
     * Get all ServiceStaffFunction
     * @description Get all ServiceStaffFunction
     *
     * - **skip**: int - The number of ServiceStaffFunction
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ServiceStaffFunction
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_archive_service_staff_function_get"];
    /**
     * Create ServiceStaffFunction
     * @description Create ServiceStaffFunction
     *
     * - **name**: required
     * - **service_function_type_id**: UUID - required.
     *     The id of service function type.
     * - **spend_hours_per_week**: int - optional.
     */
    post: operations["create_api_v1_archive_service_staff_function_post"];
  };
  "/api/v1/archive_service_staff_function/{id}/": {
    /**
     * Get ServiceStaffFunction by id
     * @description Get ServiceStaffFunction by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_archive_service_staff_function__id___get"];
    /**
     * Update ServiceStaffFunction
     * @description Update ServiceStaffFunction
     *
     * - **name**: required
     * - **service_function_type_id**: UUID - required.
     *     The id of service function type.
     * - **spend_hours_per_week**: int - optional.
     */
    put: operations["update_api_v1_archive_service_staff_function__id___put"];
    /**
     * Delete ServiceStaffFunction
     * @description Delete ServiceStaffFunction
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_archive_service_staff_function__id___delete"];
  };
  "/api/v1/archive_service_staff_function/duplicate/{id}/": {
    /**
     * Duplicate
     * @description Duplicate ServiceStaffFunction
     *
     * - **id**: UUID - required
     */
    post: operations["duplicate_api_v1_archive_service_staff_function_duplicate__id___post"];
  };
  "/api/v1/archive_document_staff_function": {
    /**
     * Get all ArchiveDocumentStaffFunction
     * @description Get all DocumentStaffFunction
     *
     * - **skip**: int - The number of DocumentStaffFunction
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of DocumentStaffFunction
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_archive_document_staff_function_get"];
  };
  "/api/v1/archive_document_staff_function/{id}/": {
    /**
     * Get ArchiveDocumentStaffFunction by id
     * @description Get DocumentStaffFunction by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_archive_document_staff_function__id___get"];
    /**
     * Update ArchiveDocumentStaffFunction
     * @description Update DocumentStaffFunction
     */
    put: operations["update_api_v1_archive_document_staff_function__id___put"];
  };
  "/api/v1/archive_staff_function": {
    /**
     * Get all StaffFunction
     * @description Get all StaffFunction
     *
     * - **skip**: int - The number of StaffFunction to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of StaffFunction to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_archive_staff_function_get"];
    /**
     * Create StaffFunction
     * @description Create StaffFunction
     *
     * - **name**: required
     * - **service_function_type_id**: UUID - required.
     *     The id of service function type.
     * - **spend_hours_per_week**: int - optional.
     */
    post: operations["create_api_v1_archive_staff_function_post"];
  };
  "/api/v1/archive_staff_function/{id}/": {
    /**
     * Get StaffFunction by id
     * @description Get StaffFunction by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_archive_staff_function__id___get"];
    /**
     * Update StaffFunction
     * @description Update StaffFunction
     *
     * - **name**: required
     * - **service_function_type_id**: UUID - required.
     *     The id of service function type.
     * - **spend_hours_per_week**: int - optional.
     */
    put: operations["update_api_v1_archive_staff_function__id___put"];
    /**
     * Delete StaffFunction
     * @description Delete StaffFunction
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_archive_staff_function__id___delete"];
  };
  "/api/v1/archive_staff_function/duplicate/{id}/": {
    /**
     * Duplicate
     * @description Duplicate StaffFunction
     *
     * - **id**: UUID - required
     */
    post: operations["duplicate_api_v1_archive_staff_function_duplicate__id___post"];
  };
  "/api/v1/archive_staff_unit": {
    /**
     * Get all Staff Units
     * @description Get all Staff Units
     *
     * - **skip**: int - The number of staff units to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff units to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_archive_staff_unit_get"];
    /**
     * Create Staff Unit
     * @description Create Staff Unit
     *
     * - **name**: required
     * - **max_rank_id**: UUID - required and should exist in the database
     * - **description**: a long description. This parameter is optional.
     */
    post: operations["create_api_v1_archive_staff_unit_post"];
  };
  "/api/v1/archive_staff_unit/{id}/": {
    /**
     * Get Staff Unit by id
     * @description Get Staff Unit by id
     *
     * - **id** - UUID - required
     */
    get: operations["get_by_id_api_v1_archive_staff_unit__id___get"];
    /**
     * Update Staff Unit
     * @description Update Staff Unit
     *
     * - **id**: UUID - required
     * - **name**: required
     * - **max_rank_id**: UUID - required and should exist in the database
     * - **description**: a long description. This parameter is optional.
     */
    put: operations["update_api_v1_archive_staff_unit__id___put"];
    /**
     * Delete Staff Unit
     * @description Delete Staff Unit
     *
     * - **id** - UUID - required
     */
    delete: operations["delete_api_v1_archive_staff_unit__id___delete"];
  };
  "/api/v1/archive_staff_unit/disposition/all/": {
    /**
     * Dispose all Staff Units by ids
     * @description Update Archive Staff Unit
     *
     * - **staff_unit_ids**: List of the UUIDs - required
     * - **staff_list_id**: UUID - required
     */
    put: operations["send_to_disposition_api_v1_archive_staff_unit_disposition_all__put"];
  };
  "/api/v1/archive_staff_unituser/{user_id}/": {
    /**
     * Get Staff Unit by id
     * @description Get Staff Unit by user
     *
     * - **id** - UUID - required
     */
    get: operations["get_by_user_id_api_v1_archive_staff_unituser__user_id___get"];
  };
  "/api/v1/archive_staff_unit/get-service-staff-functions/{id}": {
    /**
     * Get ServiceStaffFunctions by StaffUnit id
     * @description Get ServiceStaffFunctions by StaffUnit id
     *
     * - **id** - UUID - required
     */
    get: operations["get_service_staff_functions_api_v1_archive_staff_unit_get_service_staff_functions__id__get"];
  };
  "/api/v1/archive_staff_unit/add-service-staff-function": {
    /**
     * Add ServiceStaffFunction
     * @description Add ServiceStaffFunction to StaffUnit
     */
    post: operations["add_service_staff_function_api_v1_archive_staff_unit_add_service_staff_function_post"];
  };
  "/api/v1/archive_staff_unit/remove-service-staff-function": {
    /**
     * Remove ServiceStaffFunction
     * @description Remove ServiceStaffFunction from StaffUnit
     */
    post: operations["remove_service_staff_function_api_v1_archive_staff_unit_remove_service_staff_function_post"];
  };
  "/api/v1/archive_staff_unit/get-document-staff-functions/{id}": {
    /**
     * Get DocumentStaffFunctions by StaffUnit id
     * @description Get DocumentStaffFunctions by StaffUnit id
     *
     * - **id** - UUID - required
     */
    get: operations["get_document_staff_functions_api_v1_archive_staff_unit_get_document_staff_functions__id__get"];
  };
  "/api/v1/archive_staff_unit/add-document-staff-function": {
    /**
     * Add DocumentStaffFunction
     * @description Add DocumentStaffFunction to StaffUnit
     */
    post: operations["add_document_staff_function_api_v1_archive_staff_unit_add_document_staff_function_post"];
  };
  "/api/v1/archive_staff_unit/remove-document-staff-function": {
    /**
     * Remove DocumentStaffFunction
     * @description Remove DocumentStaffFunction from StaffUnit
     */
    post: operations["remove_document_staff_function_api_v1_archive_staff_unit_remove_document_staff_function_post"];
  };
  "/api/v1/archive_staff_unit/staff_division/{id}/": {
    /**
     * Get Staff Units by staff_division_id
     * @description Get Staff Units by staff_division_id
     *
     * - **staff_division_id** - UUID - required
     * - **skip**: int - The number of staff units
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of staff units
     *     to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_by_staff_division_id_api_v1_archive_staff_unit_staff_division__id___get"];
  };
  "/api/v1/candidates": {
    /**
     * Get all Candidate
     * @description Get all Candidates.
     *
     * - **skip**: int - The number of Candidate
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Candidate
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_candidates_get"];
    /**
     * Create a Candidate
     * @description Create a Candidate.
     *
     * - **staff_unit_curator_id**: UUID - required and should exist in the database.
     *     This is a staff unit who is the supervisor of a certain candidate
     * - **staff_unit_id**: UUID - required and should exist in the database.
     */
    post: operations["create_api_v1_candidates_post"];
  };
  "/api/v1/candidates/drafts": {
    /**
     * Get all Draft Candidate
     * @description Get all Draft Candidates.
     *
     * - **skip**: int - The number of Candidate to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Candidate to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_draft_candidates_api_v1_candidates_drafts_get"];
  };
  "/api/v1/candidates/{id}": {
    /**
     * Get a Candidate by id
     * @description Get a Candidate by id.
     *
     * - **id**: UUID - required and should exist in the database.
     */
    get: operations["get_by_id_api_v1_candidates__id__get"];
    /**
     * Update a Candidate
     * @description Update a Candidate.
     *
     * - **staff_unit_curator_id**: UUID - optional and should exist in the database.
     *     This is a staff unit who is the supervisor of a certain candidate
     * - **staff_unit_id**: UUID - optional and should exist in the database.
     * - **status**: str - optional. Available statuses are provided below:
     *
     * 1. Активный
     * 2. Черновик
     */
    put: operations["update_api_v1_candidates__id__put"];
    /**
     * Delete a Candidate
     * @description Delete a Candidate.
     *
     * - **id**: required and should exist in the database.
     */
    delete: operations["delete_api_v1_candidates__id__delete"];
    /**
     * Update Essay for Candidate
     * @description Update a Candidate.
     *
     * - **id**: UUID - required and should exist in the database.
     * - **essay_id**: UUID - required and should exist in the database.
     */
    patch: operations["update_essay_api_v1_candidates__id__patch"];
  };
  "/api/v1/candidates/{id}/finish/": {
    /**
     * Finish studying the candidate
     * @description Finish studying the candidate.
     *
     * - **id**: UUID - required and should exist in the database.
     * - **essay_id**: UUID - required and should exist in the database.
     */
    post: operations["finish_candidate_api_v1_candidates__id__finish__post"];
  };
  "/api/v1/candidate_stage_info": {
    /**
     * Get all Incoming CandidateStageInfo
     * @description Get all Incoming CandidateStageInfo.
     *
     * - **skip**: int - The number of CandidateStageInfo
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of CandidateStageInfo
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_candidate_stage_info_get"];
    /**
     * Create a CandidateStageInfo
     * @description Create a CandidateStageInfo.
     *
     * - **candidate_id**: UUID - required and should exist in the database.
     * - **candidate_stage_type_id**: UUID - required and should exist in the database.
     * - **staff_unit_coordinate_id**: UUID - required and should exist in the database.
     * - **is_waits**: bool - optional.
     */
    post: operations["create_api_v1_candidate_stage_info_post"];
  };
  "/api/v1/candidate_stage_info/{id}": {
    /**
     * Get a CandidateStageInfo by id
     * @description Get a CandidateStageInfo by id.
     *
     * - **id**: UUID - required and should exist in the database.
     */
    get: operations["get_by_id_api_v1_candidate_stage_info__id__get"];
  };
  "/api/v1/candidate_stage_info/all/candidate/{candidate_id}": {
    /**
     * Get all CandidateStageInfo by candidate_id
     * @description Get all CandidateStageInfo by candidate_id.
     *
     * - **candidate_id**: UUID - required and should exist in the database.
     */
    get: operations["get_all_by_candidate_id_api_v1_candidate_stage_info_all_candidate__candidate_id__get"];
  };
  "/api/v1/candidate_stage_info/{id}/send": {
    /**
     * Send CandidateStageInfo send to Approval
     * @description Send CandidateStageInfo send to Approval
     *
     * - **id**: UUID - required.
     * - **staff_unit_coordinate_id**: uuid - optional and should exists in database
     */
    put: operations["send_to_approval_api_v1_candidate_stage_info__id__send_put"];
  };
  "/api/v1/candidate_stage_info/{id}/sign": {
    /**
     * Sign a CandidateStageInfo
     * @description Sign a CandidateStageInfo
     *
     * - **id**: UUID - required.
     */
    put: operations["sign_candidate_api_v1_candidate_stage_info__id__sign_put"];
  };
  "/api/v1/candidate_stage_info/sign_ecp/{id}/": {
    /**
     * Sign a CandidateStageInfo
     * @description Sign a CandidateStageInfo
     *
     * - **id**: UUID - required.
     */
    post: operations["sign_ecp_api_v1_candidate_stage_info_sign_ecp__id___post"];
  };
  "/api/v1/candidate_stage_info/{id}/reject": {
    /**
     * Reject a CandidateStageInfo
     * @description Reject a CandidateStageInfo
     *
     * - **id**: UUID - required and should exist in the database.
     */
    put: operations["reject_candidate_api_v1_candidate_stage_info__id__reject_put"];
  };
  "/api/v1/candidate_stage_info/{id}/": {
    /**
     * Update a CandidateStageInfo
     * @description Update a CandidateStageInfo.
     *
     * - **id**: UUID - required and should exist in the database.
     * - **candidate_id**: UUID - optional and should exist in the database.
     * - **candidate_stage_type_id**: UUID - optional and should exist in the database.
     * - **status**: str - optional.
     */
    put: operations["update_api_v1_candidate_stage_info__id___put"];
  };
  "/api/v1/candidate_stage_type": {
    /**
     * Get all CandidateStageType
     * @description Get all Candidates.
     *
     * - **skip**: int - The number of badges
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of badges
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_candidate_stage_type_get"];
    /**
     * Create a CandidateStageType
     * @description Create a CandidateStageType.
     *
     * - **name**: str - required
     */
    post: operations["create_api_v1_candidate_stage_type_post"];
  };
  "/api/v1/candidate_stage_type/{id}": {
    /**
     * Get a CandidateStageType by id
     * @description Get a CandidateStageType by id.
     *
     * - **id**: UUID - required and should exist in the database.
     */
    get: operations["get_by_id_api_v1_candidate_stage_type__id__get"];
    /**
     * Update a CandidateStageType
     * @description Update a CandidateStageType.
     *
     * - **id**: UUID - required and should exist in the database.
     * - **name**: str - required
     */
    put: operations["update_api_v1_candidate_stage_type__id__put"];
    /**
     * Delete a CandidateStageType
     * @description Delete a CandidateStageType.
     *
     * - **id**: UUID - required and should exist in the database.
     */
    delete: operations["delete_api_v1_candidate_stage_type__id__delete"];
  };
  "/api/v1/candidate_stage_question_type": {
    /**
     * Get all CandidateStageQuestionTypeEnum
     * @description Get all CandidateStageQuestionTypeEnumEnum
     */
    get: operations["get_all_api_v1_candidate_stage_question_type_get"];
  };
  "/api/v1/candidate_stage_question": {
    /**
     * Get all CandidateStageQuestion
     * @description Get all CandidateStageQuestion.
     *
     * - **skip**: int - The number of CandidateStageQuestion
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of CandidateStageQuestion
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_candidate_stage_question_get"];
    /**
     * Create a CandidateStageQuestion
     * @description Create a Candidate.
     *
     * - **question**: str - required
     * - **question_type**: str - required
     */
    post: operations["create_api_v1_candidate_stage_question_post"];
  };
  "/api/v1/candidate_stage_question/{id}": {
    /**
     * Get a CandidateStageQuestion by id
     * @description Get a CandidateStageQuestion by id.
     *
     * - **id**: UUID - required and should exist in the database.
     */
    get: operations["get_by_id_api_v1_candidate_stage_question__id__get"];
    /**
     * Update a CandidateStageQuestion
     * @description Update a CandidateStageQuestion.
     *
     * - **id**: UUID - required and should exist in the database.
     * - **question**: str - required
     * - **question_type**: str - required
     * - **candidate_stage_type_id**: UUID - required and should exist in the database.
     */
    put: operations["update_api_v1_candidate_stage_question__id__put"];
    /**
     * Delete a CandidateStageQuestion
     * @description Delete a CandidateStageQuestion.
     *
     * - **id**: UUID - required and should exist in the database.
     */
    delete: operations["delete_api_v1_candidate_stage_question__id__delete"];
  };
  "/api/v1/candidate_essay_type": {
    /**
     * Get all CandidateEssayType
     * @description Get all CandidateEssayType.
     *
     * - **skip**: int - The number of CandidateEssayType
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of CandidateEssayType
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_candidate_essay_type_get"];
    /**
     * Create a CandidateEssayType
     * @description Create a CandidateEssayType.
     *
     * - **name**: str - required
     */
    post: operations["create_api_v1_candidate_essay_type_post"];
  };
  "/api/v1/candidate_essay_type/{id}": {
    /**
     * Get a CandidateEssayType by id
     * @description Get a CandidateEssayType by id.
     *
     * - **id**: required and should exist in the database.
     */
    get: operations["get_by_id_api_v1_candidate_essay_type__id__get"];
    /**
     * Update a CandidateEssayType
     * @description Update a CandidateEssayType.
     *
     * - **id**: required and should exist in the database.
     * - **name**: str - required
     */
    put: operations["update_api_v1_candidate_essay_type__id__put"];
    /**
     * Delete a CandidateEssayType
     * @description Delete a CandidateEssayType.
     *
     * - **id**: required and should exist in the database.
     */
    delete: operations["delete_api_v1_candidate_essay_type__id__delete"];
  };
  "/api/v1/candidate_essay_type/candidate/{candidate_id}": {
    /**
     * Create a CandidateEssayType and set to Candidate
     * @description Create a CandidateEssayType and set to Candidate.
     *
     * - **id**: UUID - optional and should exist in the database.
     * - **name**: str - optional
     *
     * 1. If candidate chooses from existing essay types then you can set id of essay
     * 2. If candidate creates a new essay you can send name of the new essay to create
     */
    post: operations["create_and_set_to_candidate_api_v1_candidate_essay_type_candidate__candidate_id__post"];
  };
  "/api/v1/candidate_categories": {
    /**
     * Get all CandidateCategory
     * @description Get all CandidateCategory
     *
     * - **skip**: int - The number of CandidateCategory
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of CandidateCategory
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_candidate_categories_get"];
  };
  "/api/v1/candidate_stage_answer": {
    /**
     * Get all CandidateStageAnswer
     * @description Get all CandidateStageAnswer.
     *
     * - **skip**: int - The number of CandidateStageAnswer
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of CandidateStageAnswer
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_candidate_stage_answer_get"];
    /**
     * Create a CandidateStageAnswer for single question
     * @description Create a CandidateStageAnswer for single question
     *
     * - **candidate_stage_question_id**: UUID - required.
     *     Уникальный идентификатор для вопроса, на который дается ответ.
     * - **type**: str - optional.
     *     Тип данных ответа, который может быть:
     *     String, Choice, Text, Document, Essay, Sport score, Dropdown
     * - **answer_str**: str - optional.
     *     Фактический ответ, предоставленный кандидатом,
     *     если тип ответа - строка.
     * - **answer_bool**: boolean - optional.
     *     Логическое значение, представляющее ответ,
     *     если тип ответа является логическим.
     * - **answer**: str - optional.
     *     Фактический ответ, предоставленный кандидатом,
     *     если тип ответа TEXT.
     * - **document_link**: str - optional.
     *     Ссылка на документ или ресурс, подтверждающий ответ,
     *     предоставленный кандидатом, если тип ответа Document.
     * - **document_number**: str - optional.
     *     Уникальный идентификатор документа или ресурса,
     *     на который ссылается поле document_link.
     * - **candidate_essay_type_id**: UUID - optional.
     *     Уникальный идентификатор для типа вопроса эссе,
     *     на который требуется ответить, если type Essay
     * - **candidate_id**: UUID - required.
     *     Уникальный идентификатор кандидата,
     *     который предоставляет ответ.
     * - **category_id**: UUID - optional.
     *     Уникальный идентификатор для категории dropdown вопроса,
     *     на который дается ответ.
     * - **sport_score**: int - optional. Числовая оценка.
     */
    post: operations["create_api_v1_candidate_stage_answer_post"];
  };
  "/api/v1/candidate_stage_answer/{id}": {
    /**
     * Get a CandidateStageAnswer by id
     * @description Get a CandidateStageAnswer by id.
     *
     * - **id**: required and should exist in the database.
     */
    get: operations["get_by_id_api_v1_candidate_stage_answer__id__get"];
    /**
     * Update a CandidateStageAnswer
     * @description Update a CandidateStageAnswer.
     *
     * - **id**: required and should exist in the database.
     * - **candidate_stage_question_id**: UUID - required.
     *     Уникальный идентификатор для вопроса,
     *     на который дается ответ.
     * - **type**: str - optional.
     *     Тип данных ответа, который может быть:
     *     String, Choice, Text, Document,
     *     Essay, Sport score, Dropdown
     * - **answer_str**: str - optional.
     *     Фактический ответ,
     *     предоставленный кандидатом,
     *     если тип ответа - строка.
     * - **answer_bool**: boolean - optional.
     *     Логическое значение, представляющее ответ,
     *     если тип ответа является логическим.
     * - **answer**: str - optional.
     *     Фактический ответ, предоставленный кандидатом,
     *     если тип ответа TEXT.
     * - **document_link**: str - optional.
     *     Ссылка на документ или ресурс,
     *     подтверждающий ответ, предоставленный кандидатом,
     *     если тип ответа Document.
     * - **document_number**: str - optional.
     *     Уникальный идентификатор документа или ресурса,
     *     на который ссылается поле document_link.
     * - **candidate_essay_type_id**: UUID - optional.
     *     Уникальный идентификатор для типа вопроса эссе,
     *     на который требуется ответить, если type Essay
     * - **candidate_id**: UUID - required.
     *     Уникальный идентификатор кандидата,
     *     который предоставляет ответ.
     * - **category_id**: UUID - optional.
     *     Уникальный идентификатор для категории
     *     dropdown вопроса, на который дается ответ.
     */
    put: operations["update_api_v1_candidate_stage_answer__id__put"];
    /**
     * Delete a CandidateStageAnswer
     * @description Delete a CandidateStageAnswer.
     *
     * - **id**: required and should exist in the database.
     */
    delete: operations["delete_api_v1_candidate_stage_answer__id__delete"];
  };
  "/api/v1/candidate_stage_answer/all/candidate/{candidate_id}": {
    /**
     * Get all CandidateStageAnswer by candidate_id
     * @description Get all CandidateStageAnswer by candidate_id.
     *
     * - **candidate_id**: required and should exist in the database.
     */
    get: operations["get_all_by_candidate_id_api_v1_candidate_stage_answer_all_candidate__candidate_id__get"];
  };
  "/api/v1/candidate_stage_answer/list": {
    /**
     * Create CandidateStageAnswer for multiple questions
     * @description Create CandidateStageAnswer for multiple questions
     *
     * - **candidate_stage_question_id**: UUID - required.
     *     Уникальный идентификатор для вопроса,
     *     на который дается ответ.
     * - **type**: str - optional.
     *     Тип данных ответа, который может быть:
     *     String, Choice, Text, Document, Essay,
     *     Sport score, Dropdown
     * - **answer_str**: str - optional.
     *     Фактический ответ, предоставленный кандидатом,
     *     если тип ответа - строка.
     * - **answer_bool**: boolean - optional.
     *     Логическое значение, представляющее ответ,
     *     если тип ответа является логическим.
     * - **answer**: str - optional.
     *     Фактический ответ,
     *     предоставленный кандидатом, если тип ответа TEXT.
     * - **document_link**: str - optional.
     *     Ссылка на документ или ресурс,
     *     подтверждающий ответ, предоставленный кандидатом,
     *     если тип ответа Document.
     * - **document_number**: str - optional.
     *     Уникальный идентификатор документа или ресурса,
     *     на который ссылается поле document_link.
     * - **candidate_essay_type_id**: UUID - optional.
     *     Уникальный идентификатор для типа вопроса эссе,
     *     на который требуется ответить, если type Essay
     * - **candidate_id**: UUID - required.
     *     Уникальный идентификатор кандидата,
     *     который предоставляет ответ.
     * - **category_id**: UUID - optional.
     *     Уникальный идентификатор для категории dropdown вопроса,
     *     на который дается ответ.
     * - **sport_score**: int - optional. Числовая оценка.
     */
    post: operations["create_list_api_v1_candidate_stage_answer_list_post"];
  };
  "/api/v1/histories": {
    /**
     * Get all Histories
     * @description Get all Histories
     *
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_histories_get"];
    /**
     * Create History
     * @description Create History
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_api_v1_histories_post"];
  };
  "/api/v1/histories/enums": {
    /**
     * Get all History Enums
     * @description Get all History Enums
     */
    get: operations["get_all_enums_api_v1_histories_enums_get"];
  };
  "/api/v1/histories/personal/{user_id}": {
    /**
     * Get all Histories by user id
     * @description Get all Histories by user id
     *
     * - **user_id**: UUID - required
     * - **date_from**: date - format (YYYY-MM). This parameter is optional.
     */
    get: operations["get_all_personal_api_v1_histories_personal__user_id__get"];
  };
  "/api/v1/histories/user/{user_id}/": {
    /**
     * Get all Service and Details by user id
     * @description Get all Histories by user id
     *
     * - **user_id**: UUID - required
     */
    get: operations["get_all_by_user_id_api_v1_histories_user__user_id___get"];
  };
  "/api/v1/histories/contract": {
    /**
     * Create Contract History
     * @description Create contract history
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_contract_history_api_v1_histories_contract_post"];
  };
  "/api/v1/histories/bagde": {
    /**
     * Create Badge History
     * @description Create badge history
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_badge_history_api_v1_histories_bagde_post"];
  };
  "/api/v1/histories/black_beret": {
    /**
     * Create Black Beret History
     * @description Create badge history
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_black_beret_history_api_v1_histories_black_beret_post"];
  };
  "/api/v1/histories/secondement": {
    /**
     * Create Secondment History
     * @description Create secondment history
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_secondement_history_api_v1_histories_secondement_post"];
  };
  "/api/v1/histories/penalty": {
    /**
     * Create Penalty History
     * @description Create penalty history
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_penalty_history_api_v1_histories_penalty_post"];
  };
  "/api/v1/histories/status": {
    /**
     * Create Status History
     * @description Create status history
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_status_history_api_v1_histories_status_post"];
  };
  "/api/v1/histories/coolness": {
    /**
     * Create Coolness History
     * @description Create status history
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_coolness_history_api_v1_histories_coolness_post"];
  };
  "/api/v1/histories/attestation": {
    /**
     * Create Attestation History
     * @description Create attestation history
     *
     * - **name**: required
     * - **quantity**: required
     */
    post: operations["create_attestation_history_api_v1_histories_attestation_post"];
  };
  "/api/v1/histories/{id}/": {
    /**
     * Get History by id
     * @description Get Equipment by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_histories__id___get"];
    /**
     * Update History
     * @description Update Equipment
     *
     * - **id**: UUID - the id of equipment to update. This parameter is required
     * - **name**: required
     * - **quantity**: required
     */
    put: operations["update_api_v1_histories__id___put"];
    /**
     * Delete History
     * @description Delete Equipment
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_histories__id___delete"];
  };
  "/api/v1/histories/type/{type}/": {
    /**
     * Get all Histories by type
     * @description Get all Histories by type
     *
     * - **type**: str - required
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_by_type_api_v1_histories_type__type___get"];
  };
  "/api/v1/histories/secondment/{id}/": {
    /**
     * Update History
     * @description Update secondment history
     *
     * - **id**: UUID - the id of history to update. This parameter is required
     * - **name**: required
     * - **quantity**: required
     */
    put: operations["update_secondment_api_v1_histories_secondment__id___put"];
  };
  "/api/v1/histories/badge/{id}/": {
    /**
     * Update History
     * @description Update badge history
     *
     * - **id**: UUID - the id of history to update. This parameter is required
     * - **name**: required
     * - **quantity**: required
     */
    put: operations["update_badge_api_v1_histories_badge__id___put"];
  };
  "/api/v1/histories/status/{id}/": {
    /**
     * Update History
     * @description Update badge history
     *
     * - **id**: UUID - the id of history to update. This parameter is required
     * - **name**: required
     * - **quantity**: required
     */
    put: operations["update_status_api_v1_histories_status__id___put"];
  };
  "/api/v1/histories/black_beret/{id}/": {
    /**
     * Delete Black Beret History
     * @description Delete Equipment
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_histories_black_beret__id___delete"];
  };
  "/api/v1/histories/all/type/{type}/{user_id}": {
    /**
     * Get all Histories by type and user id
     * @description Get all Histories by type and user id
     *
     * - **type**: str - required
     * - **user_id**: UUID - required
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_by_type_and_user_id_api_v1_histories_all_type__type___user_id__get"];
  };
  "/api/v1/histories/timeline": {
    /**
     * Get all Histories by type and user id
     * @description Get timeline for user id
     *
     * - **user_id**: UUID - required
     */
    get: operations["get_all_by_type_and_user_id_api_v1_histories_timeline_get"];
  };
  "/api/v1/histories/expiring_contracts": {
    /** Get Expiring Contracts */
    get: operations["get_expiring_contracts_api_v1_histories_expiring_contracts_get"];
  };
  "/api/v1/service_id": {
    /**
     * Get all ServiceID
     * @description Get all Profiles
     */
    get: operations["get_all_api_v1_service_id_get"];
    /**
     * Create
     * @description Create new ServiceID
     *
     * no parameters required.
     */
    post: operations["create_api_v1_service_id_post"];
  };
  "/api/v1/service_id/{id}/": {
    /**
     * Get ServiceID by id
     * @description Get ServiceID by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_service_id__id___get"];
    /**
     * Update ServiceID
     * @description Update ServiceID
     */
    put: operations["update_api_v1_service_id__id___put"];
    /**
     * Delete ServiceID
     * @description Delete Profile
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_service_id__id___delete"];
  };
  "/api/v1/service_idstatuses/": {
    /**
     * Get all ServiceID statuses
     * @description Get all ServiceID statuses
     */
    get: operations["get_all_statuses_api_v1_service_idstatuses__get"];
  };
  "/api/v1/history/name_change": {
    /**
     * Get all History Name Changes
     * @description Get all History Name Changes
     *
     * - **skip**: int - The number of equipments to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of equipments to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_history_name_change_get"];
    /**
     * Create History Name Change
     * @description Create History Name Change
     *
     * - **name**: str - required
     * - **type**: str - required
     */
    post: operations["create_api_v1_history_name_change_post"];
  };
  "/api/v1/history/name_change/{id}/": {
    /**
     * Get History by id
     * @description Get Equipment by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_history_name_change__id___get"];
    /**
     * Update History
     * @description Update Equipment
     *
     * - **id**: UUID - the id of equipment to update. This parameter is required
     * - **name**: required
     * - **quantity**: required
     */
    put: operations["update_api_v1_history_name_change__id___put"];
    /**
     * Delete History Name Change
     * @description Delete History Name Change
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_history_name_change__id___delete"];
  };
  "/api/v1/history/name_change/user/{user_id}/": {
    /**
     * Get History Name Changes by user id
     * @description Get History Name Changes by user id
     *
     * - **user_id**: UUID - required
     */
    get: operations["get_by_user_id_api_v1_history_name_change_user__user_id___get"];
  };
  "/api/v1/user_oaths": {
    /**
     * Get all User Oaths
     * @description Get all User Oaths
     *
     * - **skip**: int - The number of User Oaths
     *  to skip before returning the results.
     *  This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of User Oaths
     *  to return in the response.
     *  This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_user_oaths_get"];
    /**
     * Create User Oath
     * @description Create User Oath
     *
     * **date** - required - datetime
     * **user_id** - required - uuid
     * **military_unit_id** - required - uuid
     */
    post: operations["create_api_v1_user_oaths_post"];
  };
  "/api/v1/user_oaths/{id}/": {
    /**
     * Get User Oath by id
     * @description Get User Oath by id
     *
     * - **id** - UUID - required
     */
    get: operations["get_by_id_api_v1_user_oaths__id___get"];
    /**
     * Update User Oath
     * @description Update User Oath
     *
     * **date** - required - datetime
     * **user_id** - required - uuid
     * **military_unit_id** - required - uuid
     */
    put: operations["update_api_v1_user_oaths__id___put"];
    /**
     * Delete User Oath
     * @description Delete User Oath
     *
     * - **id** - UUID - required
     */
    delete: operations["delete_api_v1_user_oaths__id___delete"];
  };
  "/api/v1/military_units": {
    /**
     * Get all Military Units
     * @description Get all Military Units
     *
     * - **skip**: int - The number of Military Units
     *  to skip before returning the results.
     *  This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Military Units
     *  to return in the response.
     *  This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_military_units_get"];
    /**
     * Create Military Unit
     * @description Create Military Unit
     *
     * **name** - required - str
     */
    post: operations["create_api_v1_military_units_post"];
  };
  "/api/v1/military_units/{id}/": {
    /**
     * Get Military Unit by id
     * @description Get Military Unit by id
     *
     * - **id** - UUID - required
     */
    get: operations["get_by_id_api_v1_military_units__id___get"];
    /**
     * Update Military Unit
     * @description Update Military Unit
     *
     * **name** - required - str
     */
    put: operations["update_api_v1_military_units__id___put"];
    /**
     * Delete Military Unit
     * @description Delete Military Unit
     *
     * - **id** - UUID - required
     */
    delete: operations["delete_api_v1_military_units__id___delete"];
  };
  "/api/v1/recommender_users": {
    /**
     * Get all Recommender Users
     * @description Get all Recommender Users
     *
     * - **skip**: int - The number of ranks
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ranks
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_recommender_users_get"];
    /**
     * Create Recommender User
     * @description Create Recommender User
     */
    post: operations["create_api_v1_recommender_users_post"];
  };
  "/api/v1/recommender_users/{id}/": {
    /**
     * Get Recommender User by id
     * @description Get Recommender User by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_recommender_users__id___get"];
    /**
     * Update Recommender User
     * @description Update Recommender User
     *
     * - **id**: UUID - the ID of badge to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_recommender_users__id___put"];
    /**
     * Delete Recommender User
     * @description Delete Recommender User
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_recommender_users__id___delete"];
  };
  "/api/v1/hr_vacancies": {
    /**
     * Get all HrVacancies
     * @description Get all HrVacancies
     */
    get: operations["get_all_api_v1_hr_vacancies_get"];
    /**
     * Create HrVacancy
     * @description Create HrVacancy
     *
     * - **staff_unit_id**: uuid - required
     * - **hr_vacancy_requirements_ids**: List of uuid - optional
     */
    post: operations["create_api_v1_hr_vacancies_post"];
  };
  "/api/v1/hr_vacancies/department/{staff_division_id}": {
    /**
     * Get all HrVacancies by department
     * @description Get all HrVacancies by department
     *
     * - **staff_division_id**: uuid - required.
     */
    get: operations["get_all_by_department_api_v1_hr_vacancies_department__staff_division_id__get"];
  };
  "/api/v1/hr_vacancies/not_active": {
    /**
     * Get all not active HrVacancies
     * @description Get all HrVacancies
     *
     * - **skip**: int - The number of HrVacancies
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrVacancies
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_not_active_api_v1_hr_vacancies_not_active_get"];
  };
  "/api/v1/hr_vacancies/{id}/candidates": {
    /**
     * Get all candidates of Vacancy
     * @description Get all Candidates of HrVacancy
     *
     * - **id**: uuid - the id of HrVacancy.
     */
    get: operations["get_all_candidates_api_v1_hr_vacancies__id__candidates_get"];
  };
  "/api/v1/hr_vacancies/{id}/respond": {
    /**
     * Respond to Candidate (Отклик)
     * @description Respond to the Hrvacancy
     *
     * - **id**: uuid - the id of HrVacancy.
     */
    post: operations["respond_api_v1_hr_vacancies__id__respond_post"];
  };
  "/api/v1/hr_vacancies/archieve-staff-unit": {
    /**
     * Create HrVacancy by archieve staff unit
     * @description Create HrVacancy by archieve staff unit
     *
     * - **staff_unit_id**: uuid - required. The id of ArchieveStaffUnit
     * - **hr_vacancy_requirements_ids**: List of uuid - optional
     */
    post: operations["create_by_archieve_staff_unit_api_v1_hr_vacancies_archieve_staff_unit_post"];
  };
  "/api/v1/hr_vacancies/{id}/": {
    /**
     * Get HrVacancy by id
     * @description Get HrVacancy by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_hr_vacancies__id___get"];
    /**
     * Update HrVacancy
     * @description Update HrVacancy
     *
     * - **id**: uuid - required
     * - **archive_staff_unit_id**: uuid - optional. The id of ArchiveStaffUnit
     * - **staff_unit_id**: uuid - optional. The id of StaffUnit
     * - **is_active**: bool - optional
     * - **hr_vacancy_requirements_ids**: List of uuid - optional
     */
    put: operations["update_api_v1_hr_vacancies__id___put"];
  };
  "/api/v1/hr_vacancies/{id}/archieve-staff-unit": {
    /**
     * Update HrVacancy
     * @description Update HrVacancy
     *
     * - **id**: uuid - required
     * - **archive_staff_unit_id**: uuid - optional. The id of ArchiveStaffUnit
     * - **staff_unit_id**: uuid - optional. The id of StaffUnit
     * - **is_active**: bool - optional
     * - **hr_vacancy_requirements_ids**: List of uuid - optional
     */
    put: operations["update_by_archieve_staff_unit_api_v1_hr_vacancies__id__archieve_staff_unit_put"];
  };
  "/api/v1/hr_vacancies/archieve-staff-unit/{archieve_staff_unit_id}/": {
    /**
     * Get HrVacancy by archieve staff unit
     * @description Get HrVacancy by archieve staff unit
     *
     * - **archieve_staff_unit_id**: UUID - required
     */
    get: operations["get_by_archieve_staff_unit_id_api_v1_hr_vacancies_archieve_staff_unit__archieve_staff_unit_id___get"];
  };
  "/api/v1/hr_vacancy_requirements": {
    /**
     * Get all HrVacancyRequirements
     * @description Get all HrVacancyRequirements
     *
     * - **skip**: int - The number of HrVacancyRequirements
     *  to skip before returning the results.
     *  This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of HrVacancyRequirements
     *  to return in the response.
     *  This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_hr_vacancy_requirements_get"];
    /** Create HrVacancyRequirements */
    post: operations["create_api_v1_hr_vacancy_requirements_post"];
  };
  "/api/v1/hr_vacancy_requirements/{id}/": {
    /**
     * Get HrVacancyRequirements by id
     * @description Get HrVacancyRequirements by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_hr_vacancy_requirements__id___get"];
    /** Update HrVacancyRequirements */
    put: operations["update_api_v1_hr_vacancy_requirements__id___put"];
    /** Delete HrVacancyRequirements */
    delete: operations["delete_api_v1_hr_vacancy_requirements__id___delete"];
  };
  "/api/v1/positions": {
    /**
     * Get all Positions without specials
     * @description Get all Positions without specials
     *
     * - **skip**: int - The number of Positions
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Positions
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_positions_get"];
    /**
     * Create Position
     * @description Create Position
     *
     * - **name**: required
     */
    post: operations["create_api_v1_positions_post"];
  };
  "/api/v1/positions/all": {
    /**
     * Get all Positions
     * @description Get all Positions
     *
     * - **skip**: int - The number of Positions
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Positions
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_positions_all_get"];
  };
  "/api/v1/positions/lower/{id}/": {
    /**
     * Get lower positions than position by id
     * @description Get Position by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_positions_lower__id___get"];
  };
  "/api/v1/positions/{id}/": {
    /**
     * Get Position by id
     * @description Get Position by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_positions__id___get"];
    /**
     * Update Position
     * @description Update Position
     *
     * - **id**: UUID - the ID of badge to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_positions__id___put"];
    /**
     * Delete Position
     * @description Delete position
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_positions__id___delete"];
  };
  "/api/v1/positions/category_codes": {
    /** Get Category Codes */
    get: operations["get_category_codes_api_v1_positions_category_codes_get"];
  };
  "/api/v1/dashboard/states/all": {
    /**
     * Get all data for Dashboard
     * @description Количество всей штатки
     */
    get: operations["get_all_state_api_v1_dashboard_states_all_get"];
  };
  "/api/v1/dashboard/states/by_list/": {
    /**
     * Get all data by list for Dashboard
     * @description Количество сотрудников по списку
     */
    get: operations["get_state_by_list_api_v1_dashboard_states_by_list__get"];
  };
  "/api/v1/dashboard/states/vacancies/": {
    /**
     * Get all data of vacancies for Dashboard
     * @description Количество вакансии
     */
    get: operations["get_hr_vacancy_count_by_division_api_v1_dashboard_states_vacancies__get"];
  };
  "/api/v1/dashboard/states/inline/": {
    /**
     * Get all data of users in line for Dashboard
     * @description Количество сотрудников которые в строю
     */
    get: operations["get_in_line_count_by_status_api_v1_dashboard_states_inline__get"];
  };
  "/api/v1/dashboard/states/outline/all/": {
    /**
     * Get data of all out line users for Dashboard
     * @description Общее количество сотрудников которые отсутствуют
     */
    get: operations["get_count_by_status_all_users_api_v1_dashboard_states_outline_all__get"];
  };
  "/api/v1/dashboard/states/outline/bystatus/": {
    /**
     * Get data by every status of out line users for Dashboard
     * @description Количество сотрудников которые отсутствуют по статусам
     */
    get: operations["get_count_by_every_status_users_api_v1_dashboard_states_outline_bystatus__get"];
  };
  "/api/v1/dashboard/candidates/active/": {
    /**
     * Get all data of active candidates for Dashboard
     * @description Количество изучающихся кандидатов
     */
    get: operations["get_all_active_candidates_api_v1_dashboard_candidates_active__get"];
  };
  "/api/v1/dashboard/candidates/stages": {
    /**
     * Get passed candidate stage infos
     * @description Get passed candidate stage infos
     */
    get: operations["get_statistic_passed_candidate_stage_infos_api_v1_dashboard_candidates_stages_get"];
  };
  "/api/v1/dashboard/candidates/duration": {
    /**
     * Get duration candidates
     * @description Get duration candidates
     */
    get: operations["get_statistic_duration_candidate_learning_api_v1_dashboard_candidates_duration_get"];
  };
  "/api/v1/dashboard/candidates/completed": {
    /**
     * Get completed candidates
     * @description Get completed candidates
     */
    get: operations["get_statistic_completed_candidates_api_v1_dashboard_candidates_completed_get"];
  };
  "/api/v1/dashboard/candidates/curators/": {
    /**
     * Get all data of candidates curators for Dashboard
     * @description Количество изучающих кандидатов кураторы
     */
    get: operations["get_curators_by_candidates_api_v1_dashboard_candidates_curators__get"];
  };
  "/api/v1/dashboard/candidates/curators/duration": {
    /**
     * Get all data of candidates curators for Dashboard
     * @description Количество изучающих кандидатов кураторы
     */
    get: operations["get_curators_by_candidates_duration_api_v1_dashboard_candidates_curators_duration_get"];
  };
  "/api/v1/dashboard/users/all/inErp": {
    /**
     * All users in ecosystem ERP
     * @description Количество изучающих кандидатов кураторы
     */
    get: operations["get_all_users_of_erp_api_v1_dashboard_users_all_inErp_get"];
  };
  "/api/v1/dashboard/users/added": {
    /**
     * How match users are added
     * @description Количество изучающих кандидатов кураторы
     */
    get: operations["get_all_new_users_at_week_api_v1_dashboard_users_added_get"];
  };
  "/api/v1/dashboard/users/active": {
    /**
     * Online users
     * @description Количество изучающих кандидатов кураторы
     */
    get: operations["get_all_active_api_v1_dashboard_users_active_get"];
  };
  "/api/v1/dashboard/users/active/statistics": {
    /**
     * Get all data of users activity by three days
     * @description Количество изучающих кандидатов кураторы
     */
    get: operations["get_users_at_three_day_by_active_api_v1_dashboard_users_active_statistics_get"];
  };
  "/api/v1/survey_jurisdiction_type": {
    /**
     * Get all SurveyJurisdictionType
     * @description Get all SurveyJurisdictionTypeEnum (Опрос проводится в рамках)
     */
    get: operations["get_all_api_v1_survey_jurisdiction_type_get"];
  };
  "/api/v1/survey_staff_position": {
    /**
     * Get all SurveyStaffPosition
     * @description Get all SurveyStaffPosition (Служебное положение опроса)
     */
    get: operations["get_all_api_v1_survey_staff_position_get"];
  };
  "/api/v1/surveys": {
    /**
     * Get all Surveys
     * @description Get all Surveys
     *
     * - **skip**: int - The number of surveys to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of surveys to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_active_api_v1_surveys_get"];
    /**
     * Create
     * @description Create new survey
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_surveys_post"];
  };
  "/api/v1/surveys/competence_forms": {
    /**
     * Get all competence forms
     * @description Get all competence forms
     *
     * - **skip**: int - The number of surveys to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of surveys to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_competence_forms_api_v1_surveys_competence_forms_get"];
  };
  "/api/v1/surveys/archives": {
    /**
     * Get all archive Surveys
     * @description Get all archive Surveys
     *
     * - **skip**: int - The number of surveys to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of surveys to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_archives_api_v1_surveys_archives_get"];
  };
  "/api/v1/surveys/drafts": {
    /**
     * Get all draft Surveys
     * @description Get all draft Surveys
     *
     * - **skip**: int - The number of surveys to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of surveys to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_draft_api_v1_surveys_drafts_get"];
  };
  "/api/v1/surveys/my": {
    /**
     * Get Surveys & Quizzes by jurisdiction
     * @description Get all Surveys by jurisdiction
     *
     * - **skip**: int - The number of surveys to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of surveys to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_surveys_and_quizzes_by_jurisdiction_api_v1_surveys_my_get"];
  };
  "/api/v1/surveys/my/competence-forms": {
    /**
     * Get Surveys & Quizzes by jurisdiction
     * @description Get all Surveys by jurisdiction
     *
     * - **skip**: int - The number of surveys to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of surveys to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_competence_forms_by_jurisdiction_api_v1_surveys_my_competence_forms_get"];
  };
  "/api/v1/surveys/{id}/duplicate": {
    /**
     * Duplicate
     * @description Duplicate the survey
     *
     * - **id**: required
     */
    post: operations["duplicate_api_v1_surveys__id__duplicate_post"];
  };
  "/api/v1/surveys/{id}/repeat": {
    /**
     * Repeat
     * @description Repeat the survey
     *
     * - **id**: required
     */
    post: operations["repeat_api_v1_surveys__id__repeat_post"];
  };
  "/api/v1/surveys/draft": {
    /**
     * Save as draft
     * @description Create new survey
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["save_as_draft_api_v1_surveys_draft_post"];
  };
  "/api/v1/surveys/{id}/": {
    /**
     * Get Survey by id
     * @description Get survey by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_surveys__id___get"];
    /**
     * Update Survey
     * @description Update survey
     *
     * - **id**: UUID - the ID of survey to update. This is required.
     * - **name**: required.
     * - **url**: image url. This parameter is required.
     */
    put: operations["update_api_v1_surveys__id___put"];
    /**
     * Delete Survey
     * @description Delete survey
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_surveys__id___delete"];
  };
  "/api/v1/question_type": {
    /**
     * Get all QuestionTypeEnum
     * @description Get all QuestionTypeEnumEnum
     */
    get: operations["get_all_api_v1_question_type_get"];
  };
  "/api/v1/questions": {
    /**
     * Get all Questions
     * @description Get all Question
     *
     * - **skip**: int - The number of questions to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of questions to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_questions_get"];
    /**
     * Create
     * @description Create new question
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_questions_post"];
  };
  "/api/v1/questions/survey-id/": {
    /**
     * Get all Questions by survey id
     * @description Get all Question by survey
     *
     * - **skip**: int - The number of questions to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of questions to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_by_survey_api_v1_questions_survey_id__get"];
  };
  "/api/v1/questions/{id}/": {
    /**
     * Get Question by id
     * @description Get question by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_questions__id___get"];
    /**
     * Update Question
     * @description Update question
     *
     * - **id**: UUID - the ID of question to update. This is required.
     * - **name**: required.
     * - **url**: image url. This parameter is required.
     */
    put: operations["update_api_v1_questions__id___put"];
    /**
     * Delete Question
     * @description Delete question
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_questions__id___delete"];
  };
  "/api/v1/options": {
    /**
     * Get all Options
     * @description Get all Option
     *
     * - **skip**: int - The number of options to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of options to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_options_get"];
    /**
     * Create
     * @description Create new question
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_options_post"];
  };
  "/api/v1/options/question-id/": {
    /**
     * Get all Options by question id
     * @description Get all Option by question id
     */
    get: operations["get_by_question_api_v1_options_question_id__get"];
  };
  "/api/v1/options/{id}/": {
    /**
     * Get Option by id
     * @description Get question by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_options__id___get"];
    /**
     * Update Option
     * @description Update question
     *
     * - **id**: UUID - the ID of question to update. This is required.
     * - **name**: required.
     * - **url**: image url. This parameter is required.
     */
    put: operations["update_api_v1_options__id___put"];
    /**
     * Delete Option
     * @description Delete question
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_options__id___delete"];
  };
  "/api/v1/answers": {
    /**
     * Get all Answers
     * @description Get all Answer
     *
     * - **skip**: int - The number of answers to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of answers to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_answers_get"];
    /**
     * Create
     * @description Create new question
     *
     * - **name**: required
     * - **url**: image url. This parameter is required
     */
    post: operations["create_api_v1_answers_post"];
  };
  "/api/v1/answers/survey/{survey_id}": {
    /**
     * Get all by survey
     * @description Get all Answer by survey
     *
     * - **skip**: int - The number of answers to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of answers to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_by_survey_id_api_v1_answers_survey__survey_id__get"];
  };
  "/api/v1/answers/survey/{survey_id}/users": {
    /**
     * Get responded users
     * @description Get responded users
     */
    get: operations["get_responded_users_api_v1_answers_survey__survey_id__users_get"];
  };
  "/api/v1/answers/survey/{survey_id}/statistics": {
    /**
     * Get all by survey
     * @description Get all Answer by survey
     *
     * - **skip**: int - The number of answers to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of answers to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["analyze_by_staff_division_api_v1_answers_survey__survey_id__statistics_get"];
  };
  "/api/v1/answers/survey/{survey_id}/questions": {
    /**
     * Get all by question
     * @description Get all Answer by question
     *
     * - **skip**: int - The number of answers to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of answers to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["analyze_by_questions_api_v1_answers_survey__survey_id__questions_get"];
  };
  "/api/v1/answers/question-text/{question_id}/": {
    /**
     * Analyze question with text type
     * @description Get all Answer by question
     *
     * - **skip**: int - The number of answers to skip before returning the results.
     *         This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of answers to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["analyze_by_questions_api_v1_answers_question_text__question_id___get"];
  };
  "/api/v1/answers/{id}/": {
    /**
     * Get Answer by id
     * @description Get question by id
     *
     * - **id**: UUID - required.
     */
    get: operations["get_by_id_api_v1_answers__id___get"];
    /**
     * Update Answer
     * @description Update question
     *
     * - **id**: UUID - the ID of question to update. This is required.
     * - **name**: required.
     * - **url**: image url. This parameter is required.
     */
    put: operations["update_api_v1_answers__id___put"];
    /**
     * Delete Answer
     * @description Delete question
     *
     * - **id**: UUId - required
     */
    delete: operations["delete_api_v1_answers__id___delete"];
  };
  "/api/v1/activity": {
    /**
     * Get all Activity
     * @description Get all Activity
     *
     * - **skip**: int - The number of Activity
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Activity
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_activity_get"];
  };
  "/api/v1/activity/{id}/": {
    /**
     * Get Activity by id
     * @description Get Activity by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_activity__id___get"];
    /**
     * Update Activity
     * @description Update Activity
     */
    put: operations["update_api_v1_activity__id___put"];
    /**
     * Delete Activity
     * @description Delete Activity
     */
    delete: operations["delete_api_v1_activity__id___delete"];
  };
  "/api/v1/activity/": {
    /**
     * Create Activity
     * @description Create Activity
     */
    post: operations["create_api_v1_activity__post"];
  };
  "/api/v1/attendance": {
    /**
     * Get all Attendance
     * @description Get all Attendance
     *
     * - **skip**: int - The number of Attendance
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Attendance
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_attendance_get"];
  };
  "/api/v1/attendance/nearest": {
    /**
     * Get all nearest Attendances
     * @description Get all Attendance
     *
     * - **skip**: int - The number of Attendance
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Attendance
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_nearest_api_v1_attendance_nearest_get"];
  };
  "/api/v1/attendance/users/{id}/": {
    /**
     * Get all users in Attendance
     * @description Get all users by attendance
     */
    get: operations["get_attendance_users_api_v1_attendance_users__id___get"];
  };
  "/api/v1/attendance/{id}/": {
    /**
     * Get Attendance by id
     * @description Get Attendance by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_attendance__id___get"];
    /**
     * Update Attendance
     * @description Update Attendance
     */
    put: operations["update_api_v1_attendance__id___put"];
    /**
     * Delete Attendance
     * @description Delete Attendance
     */
    delete: operations["delete_api_v1_attendance__id___delete"];
  };
  "/api/v1/attendance/percentage": {
    /**
     * Get Attendance by id
     * @description Get Attendance by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_attendance_percentage_api_v1_attendance_percentage_get"];
  };
  "/api/v1/attendance/user/absent/{id}/": {
    /**
     * Get all absent days by user for the ScheduleYear
     * @description Get all absent users for the ScheduleYear
     *
     * - **id**: String - required. ScheduleYear id
     * - **user_id**: String - required. User id
     */
    get: operations["get_absent_days_by_user_api_v1_attendance_user_absent__id___get"];
  };
  "/api/v1/attendance/absent/{id}/": {
    /**
     * Get all absent users for the ScheduleYear
     * @description Get all absent users for the ScheduleYear
     *
     * - **id**: UUID - required. ScheduleYear id
     * - **skip**: int - The number of Attendance
     * to skip before returning the results.
     * This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Attendance
     * to return in the response.
     * This parameter is optional and defaults to 10.
     */
    get: operations["get_absent_users_api_v1_attendance_absent__id___get"];
  };
  "/api/v1/attendance/": {
    /**
     * Create Attendance
     * @description Create Attendance
     */
    post: operations["create_api_v1_attendance__post"];
  };
  "/api/v1/attendance/status_change": {
    /**
     * Change Attendance status
     * @description Change Attendance status
     */
    post: operations["change_attendance_status_api_v1_attendance_status_change_post"];
  };
  "/api/v1/attendance/status_change/schedule": {
    /**
     * Change Attendance status by schedule and date
     * @description Change Attendance status
     */
    post: operations["change_attendance_status_by_schedule_api_v1_attendance_status_change_schedule_post"];
  };
  "/api/v1/exam": {
    /**
     * Get all ExamSchedule
     * @description Get all ExamSchedule
     *
     * - **skip**: int - The number of ExamSchedule
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ExamSchedule
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_exam_get"];
  };
  "/api/v1/exam/tablet/": {
    /**
     * Get all ExamSchedule
     * @description Get all ExamSchedule
     *
     * - **skip**: int - The number of ExamSchedule
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ExamSchedule
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_for_tablet_api_v1_exam_tablet__get"];
  };
  "/api/v1/exam/users/{id}/": {
    /**
     * Get ExamSchedule users by id
     * @description Get ExamSchedule users by id
     */
    get: operations["get_exam_users_api_v1_exam_users__id___get"];
  };
  "/api/v1/exam/results/": {
    /**
     * Get ExamSchedule by id
     * @description Get ExamResults by authorized user
     *
     * - **skip**: int - The number of ExamSchedule
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ExamSchedule
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_exam_results_api_v1_exam_results__get"];
  };
  "/api/v1/exam/month": {
    /**
     * Get ScheduleMonths by month
     * @description Get ScheduleMonths by month
     *
     * - **month**: int - The number of month when you want to get ScheduleMonth
     */
    get: operations["get_by_month_api_v1_exam_month_get"];
  };
  "/api/v1/exam/nearest": {
    /**
     * Get nearest ScheduleMonths
     * @description Get nearest ScheduleMonths
     *
     * - **limit**: int - The maximum number of ScheduleMonth
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_nearest_api_v1_exam_nearest_get"];
  };
  "/api/v1/exam/date": {
    /**
     * Get ScheduleMonths by date
     * @description Get ScheduleMonths by date
     *
     * - **limit**: int - The maximum number of ScheduleMonth
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     * - **date**: date (yyyy-mm-dd) - The date when you want to get ScheduleMonth
     */
    get: operations["get_by_date_api_v1_exam_date_get"];
  };
  "/api/v1/exam/{id}/": {
    /**
     * Get ExamSchedule by id
     * @description Get ExamSchedule by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_exam__id___get"];
    /**
     * Update ExamSchedule
     * @description Update ExamSchedule
     */
    put: operations["update_api_v1_exam__id___put"];
    /**
     * Delete ExamSchedule
     * @description Delete ExamSchedule
     */
    delete: operations["delete_api_v1_exam__id___delete"];
  };
  "/api/v1/exam/": {
    /**
     * Create ExamSchedule
     * @description Create ExamSchedule
     */
    post: operations["create_api_v1_exam__post"];
  };
  "/api/v1/exam/results_update": {
    /**
     * Change Exam Results
     * @description Change Exam Results
     */
    put: operations["change_results_api_v1_exam_results_update_put"];
  };
  "/api/v1/place": {
    /**
     * Get all Places
     * @description Get all Places
     *
     * - **skip**: int - The number of Place
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Place
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_place_get"];
  };
  "/api/v1/place/{id}/": {
    /**
     * Get Place by id
     * @description Get Place by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_place__id___get"];
    /**
     * Update Place
     * @description Update Place
     */
    put: operations["update_api_v1_place__id___put"];
    /**
     * Delete Place
     * @description Delete Place
     */
    delete: operations["delete_api_v1_place__id___delete"];
  };
  "/api/v1/place/": {
    /**
     * Create Place
     * @description Create Place
     */
    post: operations["create_api_v1_place__post"];
  };
  "/api/v1/plan": {
    /**
     * Get all BspPlan
     * @description Get all BspPlans
     *
     * - **skip**: int - The number of BspPlan
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of BspPlan
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_plan_get"];
  };
  "/api/v1/plan/draft/": {
    /**
     * Get all BspPlan
     * @description Get all draft BspPlans
     *
     * - **skip**: int - The number of BspPlan
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of BspPlan
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_draft_api_v1_plan_draft__get"];
  };
  "/api/v1/plan/signed/": {
    /**
     * Get all BspPlan
     * @description Get all draft BspPlans
     *
     * - **skip**: int - The number of BspPlan
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of BspPlan
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_signed_api_v1_plan_signed__get"];
  };
  "/api/v1/plan/sign/{id}/": {
    /**
     * Get all BspPlan
     * @description Sign BspPlan
     */
    post: operations["sign_api_v1_plan_sign__id___post"];
  };
  "/api/v1/plan/draft/{id}/": {
    /**
     * Send BspPlan to draft
     * @description Send BspPlan to draft
     */
    post: operations["send_to_draft_api_v1_plan_draft__id___post"];
  };
  "/api/v1/plan/{id}/": {
    /**
     * Get BspPlan by id
     * @description Get BspPlan by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_plan__id___get"];
    /**
     * Update BspPlan
     * @description Update BspPlan
     */
    put: operations["update_api_v1_plan__id___put"];
    /**
     * Delete BspPlan
     * @description Delete BspPlan
     */
    delete: operations["delete_api_v1_plan__id___delete"];
  };
  "/api/v1/plan/duplicate/{id}/": {
    /**
     * Duplicate BspPlan by id
     * @description Duplicate BspPlan by id
     *
     * - **id**: UUID - required
     */
    get: operations["duplicate_api_v1_plan_duplicate__id___get"];
  };
  "/api/v1/plan/": {
    /**
     * Create BspPlan
     * @description Create BspPlan
     */
    post: operations["create_api_v1_plan__post"];
  };
  "/api/v1/schedule_day": {
    /**
     * Get all ScheduleDay
     * @description Get all ScheduleDay
     *
     * - **skip**: int - The number of ScheduleDay
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ScheduleDay
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_schedule_day_get"];
  };
  "/api/v1/schedule_day/{id}/": {
    /**
     * Get ScheduleDay by id
     * @description Get ScheduleDay by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_schedule_day__id___get"];
    /**
     * Update ScheduleDay
     * @description Update ScheduleDay
     */
    put: operations["update_api_v1_schedule_day__id___put"];
    /**
     * Delete ScheduleDay
     * @description Delete ScheduleDay
     */
    delete: operations["delete_api_v1_schedule_day__id___delete"];
  };
  "/api/v1/schedule_day/": {
    /**
     * Create ScheduleDay
     * @description Create ScheduleDay
     */
    post: operations["create_api_v1_schedule_day__post"];
  };
  "/api/v1/schedule_month": {
    /**
     * Get all ScheduleMonth
     * @description Get all ScheduleMonth
     *
     * - **skip**: int - The number of ScheduleMonth
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ScheduleMonth
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_schedule_month_get"];
    /**
     * Create ScheduleMonth
     * @description Create ScheduleMonth
     */
    post: operations["create_api_v1_schedule_month_post"];
  };
  "/api/v1/schedule_month/nearest": {
    /**
     * Get nearest ScheduleMonths
     * @description Get nearest ScheduleMonths
     *
     * - **limit**: int - The maximum number of ScheduleMonth
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_nearest_api_v1_schedule_month_nearest_get"];
  };
  "/api/v1/schedule_month/date": {
    /**
     * Get ScheduleMonths by date
     * @description Get ScheduleMonths by date
     *
     * - **limit**: int - The maximum number of ScheduleMonth
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     * - **date**: date (yyyy-mm-dd) - The date when you want to get ScheduleMonth
     */
    get: operations["get_by_date_api_v1_schedule_month_date_get"];
  };
  "/api/v1/schedule_month/month": {
    /**
     * Get ScheduleMonths by month
     * @description Get ScheduleMonths by month
     *
     * - **month**: int - The number of month when you want to get ScheduleMonth
     */
    get: operations["get_by_month_api_v1_schedule_month_month_get"];
  };
  "/api/v1/schedule_month/{id}/": {
    /**
     * Get ScheduleMonth by id
     * @description Get ScheduleMonth by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_schedule_month__id___get"];
    /**
     * Update ScheduleMonth
     * @description Update ScheduleMonth
     */
    put: operations["update_api_v1_schedule_month__id___put"];
    /**
     * Delete ScheduleMonth
     * @description Delete ScheduleMonth
     */
    delete: operations["delete_api_v1_schedule_month__id___delete"];
  };
  "/api/v1/schedule_year": {
    /**
     * Get all ScheduleYear
     * @description Get all ScheduleYear
     *
     * - **skip**: int - The number of ScheduleYear
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ScheduleYear
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_schedule_year_get"];
  };
  "/api/v1/schedule_year/plan/{id}/": {
    /**
     * Get all ScheduleYear by plan id
     * @description Get all ScheduleYears by plan id
     *
     * - **skip**: int - The number of ScheduleYear
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ScheduleYear
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_by_plan_api_v1_schedule_year_plan__id___get"];
  };
  "/api/v1/schedule_year/staff_division/{id}/": {
    /**
     * Get all ScheduleYear by staff_division id
     * @description Get all ScheduleYears by plan id
     */
    get: operations["get_all_by_staff_division_api_v1_schedule_year_staff_division__id___get"];
  };
  "/api/v1/schedule_year/division_plan/{id}/": {
    /**
     * Get all ScheduleYear by staff_division_id and plan_id
     * @description Get all ScheduleYears by staff_division_id and plan_id
     */
    get: operations["get_all_by_staff_division_and_plan_api_v1_schedule_year_division_plan__id___get"];
  };
  "/api/v1/schedule_year/year/": {
    /**
     * Get all Schedule Year by plan year
     * @description Get all Schedule Year by plan year
     *
     * - **year**: int - year on which to get the schedule
     * - **skip**: int - The number of ScheduleYear
     *     to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of ScheduleYear
     *     to return in the response.
     *     This parameter is optional and defaults to 100.
     */
    get: operations["get_all_by_year_api_v1_schedule_year_year__get"];
  };
  "/api/v1/schedule_year/{id}/": {
    /**
     * Get ScheduleYear by id
     * @description Get ScheduleYear by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_schedule_year__id___get"];
    /**
     * Update ScheduleYear
     * @description Update ScheduleYear
     */
    put: operations["update_api_v1_schedule_year__id___put"];
    /**
     * Delete ScheduleYear
     * @description Delete ScheduleYear
     */
    delete: operations["delete_api_v1_schedule_year__id___delete"];
  };
  "/api/v1/schedule_year/": {
    /**
     * Create ScheduleYear
     * @description Create ScheduleYear
     */
    post: operations["create_api_v1_schedule_year__post"];
  };
  "/api/v1/schedule_year/division/{schedule_id}/{division_id}/": {
    /**
     * Delete ScheduleYear
     * @description Delete ScheduleYear
     */
    delete: operations["delete_division_api_v1_schedule_year_division__schedule_id___division_id___delete"];
  };
  "/api/v1/permissions": {
    /**
     * Get all Permissions
     * @description Get all Permissions
     *
     * - **skip**: int - The number of permissions
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of permissions
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_permissions_get"];
    /**
     * Create Permission
     * @description Create Permission
     *
     * - **name**: required
     */
    post: operations["create_api_v1_permissions_post"];
  };
  "/api/v1/permissions/has_permission": {
    /**
     * If user has permission
     * @description Check if authorized user has permission for permission_type
     *
     * - **permission_type**: str - permission_type name
     */
    get: operations["has_permission_api_v1_permissions_has_permission_get"];
  };
  "/api/v1/permissions/user_permissions": {
    /**
     * Get all Permissions of user
     * @description Get all permissions of user
     *
     * - **permission_type**: str - permission_type name
     */
    get: operations["has_permission_api_v1_permissions_user_permissions_get"];
  };
  "/api/v1/permissions/types": {
    /**
     * Get all Permissions Types
     * @description Get all Permissions Types
     *
     * - **skip**: int - The number of permission types
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of permission types
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_permissions_types_get"];
  };
  "/api/v1/permissions/{id}/": {
    /**
     * Get Permission by id
     * @description Get Permission by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_permissions__id___get"];
    /**
     * Update Permission
     * @description Update Permission
     *
     * - **id**: UUID - the ID of permission to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_permissions__id___put"];
    /**
     * Delete Permission
     * @description Delete Permission
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_permissions__id___delete"];
  };
  "/api/v1/badge_types": {
    /**
     * Get all Badge types
     * @description Get all Badge types
     *
     * - **skip**: int - The number of Badge types
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Badge types
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_badge_types_get"];
    /**
     * Create Badge type
     * @description Create Badge type
     *
     * - **name**: required
     */
    post: operations["create_api_v1_badge_types_post"];
  };
  "/api/v1/badge_types/{id}/": {
    /**
     * Get Badge type by id
     * @description Get Badge type by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_badge_types__id___get"];
    /**
     * Update Badge type
     * @description Update Badge type
     *
     * - **id**: UUID - the ID of badge to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_badge_types__id___put"];
    /**
     * Delete Badge type
     * @description Delete Badge type
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_badge_types__id___delete"];
  };
  "/api/v1/penalty_types": {
    /**
     * Get all Penalty types
     * @description Get all Penalty types
     *
     * - **skip**: int - The number of Penalty types
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Penalty types
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_penalty_types_get"];
    /**
     * Create Penalty type
     * @description Create Penalty type
     *
     * - **name**: required
     */
    post: operations["create_api_v1_penalty_types_post"];
  };
  "/api/v1/penalty_types/{id}/": {
    /**
     * Get Penalty type by id
     * @description Get Penalty type by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_penalty_types__id___get"];
    /**
     * Update Penalty type
     * @description Update Penalty type
     *
     * - **id**: UUID - the ID of badge to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_penalty_types__id___put"];
    /**
     * Delete Penalty type
     * @description Delete Penalty type
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_penalty_types__id___delete"];
  };
  "/api/v1/status_types": {
    /**
     * Get all Status types
     * @description Get all Status types
     *
     * - **skip**: int - The number of Status types
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Status types
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_status_types_get"];
    /**
     * Create Status type
     * @description Create Status type
     *
     * - **name**: required
     */
    post: operations["create_api_v1_status_types_post"];
  };
  "/api/v1/status_types/{id}/": {
    /**
     * Get Status type by id
     * @description Get Status type by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_status_types__id___get"];
    /**
     * Update Status type
     * @description Update Status type
     *
     * - **id**: UUID - the ID of badge to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_status_types__id___put"];
    /**
     * Delete Status type
     * @description Delete Status type
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_status_types__id___delete"];
  };
  "/api/v1/hexagon": {
    /**
     * Get last hexagon
     * @description Get last hexagon
     */
    get: operations["get_last_hexagon_api_v1_hexagon_get"];
  };
  "/api/v1/hexagon/average": {
    /**
     * Get average scores for hexagon
     * @description Get average scores for hexagon
     */
    get: operations["get_last_hexagon_api_v1_hexagon_average_get"];
  };
  "/api/v1/hexagon/date": {
    /**
     * Get hexagons by date
     * @description Get hexagons by date
     */
    get: operations["get_last_hexagon_api_v1_hexagon_date_get"];
  };
  "/api/v1/dictionary/operations/join_records": {
    /**
     * Join records
     * @description Change all records with ids_to_change to correct_id
     *
     * - **entity**: str - table where records will be joined
     * - **correct_id**: str - id that will have updated records.
     * - **ids_to_change**: str - ids that will be switched by
     *      correct_id
     */
    post: operations["join_records_api_v1_dictionary_operations_join_records_post"];
  };
  "/api/v1/dictionary/operations/soft_update": {
    /**
     * Soft update record
     * @description Change all records with ids_to_change to correct_id
     *
     * - **entity**: str - entity which records will be soft updated
     * - **id**: str - id to update
     */
    post: operations["soft_update_api_v1_dictionary_operations_soft_update_post"];
  };
  "/api/v1/penalty": {
    /**
     * Get all Penalties
     * @description Get all Penalties
     *
     * - **skip**: int - The number of Penalties
     *      to skip before returning the results.
     *      This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Penalties
     *      to return in the response.
     *      This parameter is optional and defaults to 100.
     */
    get: operations["get_all_api_v1_penalty_get"];
    /**
     * Create Penalty type
     * @description Create Penalty type
     *
     * - **name**: required
     */
    post: operations["create_api_v1_penalty_post"];
  };
  "/api/v1/penalty/{id}/": {
    /**
     * Get Penalty type by id
     * @description Get Penalty type by id
     *
     * - **id**: UUID - required
     */
    get: operations["get_by_id_api_v1_penalty__id___get"];
    /**
     * Update Penalty type
     * @description Update Penalty type
     *
     * - **id**: UUID - the ID of badge to update. This is required.
     * - **name**: required.
     */
    put: operations["update_api_v1_penalty__id___put"];
    /**
     * Delete Penalty type
     * @description Delete Penalty type
     *
     * - **id**: UUID - required
     */
    delete: operations["delete_api_v1_penalty__id___delete"];
  };
  "/api/v1/coolness_type": {
    /**
     * Get all Coolness
     * @description Get all Coolness Type
     *
     * - **skip**: int - The number of Coolness to skip before returning the results.
     *     This parameter is optional and defaults to 0.
     * - **limit**: int - The maximum number of Coolness to return in the response.
     *     This parameter is optional and defaults to 10.
     */
    get: operations["get_all_api_v1_coolness_type_get"];
    /**
     * Create Coolness Type
     * @description Create Coolness Type
     *
     * **name** - required - str
     */
    post: operations["create_api_v1_coolness_type_post"];
  };
  "/api/v1/coolness_type/{id}/": {
    /**
     * Get Coolness by id
     * @description Get Coolness Type by id
     *
     * - **id** - UUID - required
     */
    get: operations["get_by_id_api_v1_coolness_type__id___get"];
    /**
     * Update Coolness Type
     * @description Update Coolness Type
     *
     * **name** - required - str
     */
    put: operations["update_api_v1_coolness_type__id___put"];
    /**
     * Delete Coolness
     * @description Delete Coolness Type
     *
     * - **id** - UUID - required
     */
    delete: operations["delete_api_v1_coolness_type__id___delete"];
  };
  "/api/v1/ip": {
    /** Get Ip */
    get: operations["get_ip_api_v1_ip_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    HrVacancyStaffDivisionRead : any,
    UserShortRead: any,
    /** AbroadTravelCreate */
    AbroadTravelCreate: {
      /** Vehicle Type Id */
      vehicle_type_id?: string;
      /** Destination Country Id */
      destination_country_id: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Reason */
      reason: string;
      /** Reasonkz */
      reasonKZ: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
    };
    /** AbroadTravelRead */
    AbroadTravelRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Vehicle Type Id */
      vehicle_type_id?: string;
      /** Destination Country Id */
      destination_country_id: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Reason */
      reason: string;
      /** Reasonkz */
      reasonKZ?: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
      destination_country?: components["schemas"]["CountryRead"];
      vehicle_type?: components["schemas"]["VehicleTypeRead"];
    };
    /** AbroadTravelUpdate */
    AbroadTravelUpdate: {
      /** Vehicle Type Id */
      vehicle_type_id?: string;
      /** Destination Country Id */
      destination_country_id: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Reason */
      reason: string;
      /** Reasonkz */
      reasonKZ: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
    };
    /** AcademicDegreeCreate */
    AcademicDegreeCreate: {
      /** Profile Id */
      profile_id: string;
      /** Degree Id */
      degree_id: string;
      /** Science Id */
      science_id: string;
      /** Specialty Id */
      specialty_id: string;
      /** Document Number */
      document_number: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date: string;
    };
    /** AcademicDegreeDegreeCreate */
    AcademicDegreeDegreeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** AcademicDegreeDegreeRead */
    AcademicDegreeDegreeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** AcademicDegreeDegreeReadPagination */
    AcademicDegreeDegreeReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["AcademicDegreeDegreeRead"])[];
    };
    /** AcademicDegreeDegreeUpdate */
    AcademicDegreeDegreeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** AcademicDegreeRead */
    AcademicDegreeRead: {
      /** Profile Id */
      profile_id?: string;
      /** Degree Id */
      degree_id?: string;
      /** Science Id */
      science_id?: string;
      /** Specialty Id */
      specialty_id?: string;
      /** Document Number */
      document_number?: string;
      /** Document Link */
      document_link?: string;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date?: string;
      /** Id */
      id?: string;
      specialty?: components["schemas"]["SpecialtyRead"];
      degree?: components["schemas"]["AcademicDegreeDegreeRead"];
      science?: components["schemas"]["ScienceRead"];
    };
    /** AcademicDegreeUpdate */
    AcademicDegreeUpdate: {
      /** Profile Id */
      profile_id: string;
      /** Degree Id */
      degree_id: string;
      /** Science Id */
      science_id: string;
      /** Specialty Id */
      specialty_id: string;
      /** Document Number */
      document_number: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date: string;
    };
    /** AcademicTitleCreate */
    AcademicTitleCreate: {
      /** Profile Id */
      profile_id?: string;
      /** Degree Id */
      degree_id?: string;
      /** Specialty Id */
      specialty_id?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date?: string;
    };
    /** AcademicTitleDegreeCreate */
    AcademicTitleDegreeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** AcademicTitleDegreeRead */
    AcademicTitleDegreeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** AcademicTitleDegreeReadPagination */
    AcademicTitleDegreeReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["AcademicTitleDegreeRead"])[];
    };
    /** AcademicTitleDegreeUpdate */
    AcademicTitleDegreeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** AcademicTitleRead */
    AcademicTitleRead: {
      /** Profile Id */
      profile_id?: string;
      /** Degree Id */
      degree_id?: string;
      /** Specialty Id */
      specialty_id?: string;
      /** Document Number */
      document_number?: string;
      /** Document Link */
      document_link?: string;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date?: string;
      /** Id */
      id?: string;
      degree?: components["schemas"]["AcademicTitleDegreeRead"];
      specialty?: components["schemas"]["SpecialtyRead"];
    };
    /** AcademicTitleUpdate */
    AcademicTitleUpdate: {
      /** Profile Id */
      profile_id?: string;
      /** Degree Id */
      degree_id?: string;
      /** Specialty Id */
      specialty_id?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date?: string;
    };
    /** ActivityChildRead */
    ActivityChildRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string;
      /** Instructions */
      instructions?: string;
      /**
       * Is Time Required
       * @default false
       */
      is_time_required?: boolean;
      /** Normative Img */
      normative_img?: string;
      /** Id */
      id?: string;
      /** Children */
      children?: (unknown)[];
    };
    /** ActivityCreate */
    ActivityCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string;
      /** Instructions */
      instructions?: string;
      /**
       * Is Time Required
       * @default false
       */
      is_time_required?: boolean;
      /** Normative Img */
      normative_img?: string;
    };
    /** ActivityDateRead */
    ActivityDateRead: {
      /**
       * Activity Date
       * Format: date
       */
      activity_date: string;
    };
    /** ActivityRead */
    ActivityRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string;
      /** Instructions */
      instructions?: string;
      /**
       * Is Time Required
       * @default false
       */
      is_time_required?: boolean;
      /** Normative Img */
      normative_img?: string;
      /** Id */
      id?: string;
      /** Children */
      children?: (components["schemas"]["ActivityChildRead"])[];
    };
    /** ActivityUpdate */
    ActivityUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string;
      /** Instructions */
      instructions?: string;
      /**
       * Is Time Required
       * @default false
       */
      is_time_required?: boolean;
      /** Normative Img */
      normative_img?: string;
    };
    /** AdditionalProfileCreate */
    AdditionalProfileCreate: {
      /** Profile Id */
      profile_id: string;
    };
    /** AdditionalProfileRead */
    AdditionalProfileRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Profile Id */
      profile_id: string;
      /** Polygraph Checks */
      polygraph_checks?: (components["schemas"]["PolygraphCheckRead"])[];
      /** Violations */
      violations?: (components["schemas"]["ViolationRead"])[];
      /** Abroad Travels */
      abroad_travels?: (components["schemas"]["AbroadTravelRead"])[];
      /** Psychological Checks */
      psychological_checks?: (components["schemas"]["PsychologicalCheckRead"])[];
      /** Special Checks */
      special_checks?: (components["schemas"]["SpecialCheckRead"])[];
      /** Service Housing */
      service_housing?: (components["schemas"]["ServiceHousingRead"])[];
      /** User Vehicles */
      user_vehicles?: (components["schemas"]["VehicleRead"])[];
      /** Properties */
      properties?: (components["schemas"]["PropertiesRead"])[];
    };
    /** AdditionalProfileUpdate */
    AdditionalProfileUpdate: {
      /** Profile Id */
      profile_id: string;
    };
    /**
     * AgeGroup
     * @description An enumeration.
     * @enum {integer}
     */
    AgeGroup: 1 | 2 | 3 | 4 | 5 | 6;
    /** AllArchiveStaffFunctionsRead */
    AllArchiveStaffFunctionsRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Hours Per Week */
      hours_per_week?: number;
      /** Type Id */
      type_id?: string;
      /** Priority */
      priority?: number;
      /** Role Id */
      role_id?: string;
      /** Jurisdiction Id */
      jurisdiction_id?: string;
      /** Id */
      id?: string;
      /** Discriminator */
      discriminator?: string;
      role?: components["schemas"]["ArchiveStaffFunctionRead"];
      jurisdiction?: components["schemas"]["JurisdictionRead"];
      hr_document_step?: components["schemas"]["ArchiveDocumentStaffFunctionStep"];
      type?: components["schemas"]["ServiceStaffFunctionTypeRead"];
    };
    /** AnswerCreate */
    AnswerCreate: {
      /** Question Id */
      question_id: string;
      /** Text */
      text?: string;
      /** Option Ids */
      option_ids?: (string)[];
    };
    /** AnswerRead */
    AnswerRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Question Id */
      question_id?: string;
      /** Text */
      text?: string;
      /** User Id */
      user_id?: string;
      /** Encrypted Used Id */
      encrypted_used_id?: string;
      /** Score */
      score?: number;
      question?: components["schemas"]["QuestionRead"];
      /** Options */
      options?: (components["schemas"]["OptionRead"])[];
    };
    /** AnswerReadPagination */
    AnswerReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["AnswerRead"])[];
    };
    /** AnswerUpdate */
    AnswerUpdate: {
      /**
       * Question Id
       * Format: uuid
       */
      question_id?: string;
      /** Text */
      text?: string;
      /** Option Ids */
      option_ids?: (string)[];
    };
    /** AnthropometricDataCreate */
    AnthropometricDataCreate: {
      /** Head Circumference */
      head_circumference: number;
      /** Shoe Size */
      shoe_size: number;
      /** Neck Circumference */
      neck_circumference: number;
      /** Shape Size */
      shape_size: number;
      /** Bust Size */
      bust_size: number;
      /** Profile Id */
      profile_id: string;
    };
    /** AnthropometricDataRead */
    AnthropometricDataRead: {
      /** Head Circumference */
      head_circumference?: number;
      /** Shoe Size */
      shoe_size?: number;
      /** Neck Circumference */
      neck_circumference?: number;
      /** Shape Size */
      shape_size?: number;
      /** Bust Size */
      bust_size?: number;
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
    };
    /** AnthropometricDataUpdate */
    AnthropometricDataUpdate: {
      /** Head Circumference */
      head_circumference: number;
      /** Shoe Size */
      shoe_size: number;
      /** Neck Circumference */
      neck_circumference: number;
      /** Shape Size */
      shape_size: number;
      /** Bust Size */
      bust_size: number;
      /** Profile Id */
      profile_id: string;
    };
    /** ArchiveDocumentStaffFunctionRead */
    ArchiveDocumentStaffFunctionRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Hours Per Week */
      hours_per_week?: number;
      /** Priority */
      priority?: number;
      /** Role Id */
      role_id?: string;
      /** Jurisdiction Id */
      jurisdiction_id?: string;
      /** Id */
      id?: string;
      /** Discriminator */
      discriminator?: string;
      role?: components["schemas"]["ArchiveStaffFunctionRead"];
      jurisdiction?: components["schemas"]["JurisdictionRead"];
      hr_document_step?: components["schemas"]["ArchiveDocumentStaffFunctionStep"];
    };
    /** ArchiveDocumentStaffFunctionStep */
    ArchiveDocumentStaffFunctionStep: {
      /** Id */
      id?: string;
      hr_document_template?: components["schemas"]["ArchiveDocumentStaffFunctionTemplate"];
    };
    /** ArchiveDocumentStaffFunctionTemplate */
    ArchiveDocumentStaffFunctionTemplate: {
      /** Id */
      id?: string;
      /** Name */
      name?: string;
    };
    /** ArchiveDocumentStaffFunctionUpdate */
    ArchiveDocumentStaffFunctionUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Hours Per Week */
      hours_per_week: number;
      /** Priority */
      priority: number;
      /** Role Id */
      role_id: string;
      /** Jurisdiction Id */
      jurisdiction_id: string;
      /** Origin Id */
      origin_id?: string;
    };
    /** ArchiveServiceStaffFunctionRead */
    ArchiveServiceStaffFunctionRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Hours Per Week */
      hours_per_week?: number;
      /** Type Id */
      type_id?: string;
      /** Id */
      id?: string;
      /** Discriminator */
      discriminator?: string;
      type?: components["schemas"]["ServiceStaffFunctionTypeRead"];
    };
    /** ArchiveStaffDivisionChildRead */
    ArchiveStaffDivisionChildRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Staff List Id */
      staff_list_id: string;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      /** Children */
      children?: (unknown)[];
      /** Staff Units */
      staff_units?: (unknown)[];
      type?: components["schemas"]["StaffDivisionTypeRead"];
    };
    /** ArchiveStaffDivisionRead */
    ArchiveStaffDivisionRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Staff List Id */
      staff_list_id: string;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      /** Children */
      children?: (components["schemas"]["ArchiveStaffDivisionChildRead"])[];
      /** Staff Units */
      staff_units?: (components["schemas"]["ArchiveStaffUnitRead"])[];
      type?: components["schemas"]["StaffDivisionTypeRead"];
    };
    /** ArchiveStaffDivisionStepChildRead */
    ArchiveStaffDivisionStepChildRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Staff List Id */
      staff_list_id: string;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      type?: components["schemas"]["StaffDivisionTypeRead"];
    };
    /** ArchiveStaffDivisionStepRead */
    ArchiveStaffDivisionStepRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Staff List Id */
      staff_list_id: string;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      /** Children */
      children?: (components["schemas"]["ArchiveStaffDivisionStepChildRead"])[];
      /** Staff Units */
      staff_units?: (components["schemas"]["ArchiveStaffUnitRead"])[];
      type?: components["schemas"]["StaffDivisionTypeRead"];
    };
    /** ArchiveStaffDivisionUpdateParentGroup */
    ArchiveStaffDivisionUpdateParentGroup: {
      /** Parent Group Id */
      parent_group_id: string;
    };
    /** ArchiveStaffFunctionRead */
    ArchiveStaffFunctionRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Hours Per Week */
      hours_per_week?: number;
      /** Id */
      id?: string;
      /** Discriminator */
      discriminator?: string;
    };
    /** ArchiveStaffUnitFunctions */
    ArchiveStaffUnitFunctions: {
      /** Staff Unit Id */
      staff_unit_id: string;
      /** Staff Function Ids */
      staff_function_ids: (string)[];
    };
    /** ArchiveStaffUnitRead */
    ArchiveStaffUnitRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Position Id */
      position_id?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** User Id */
      user_id?: string | null;
      /** Actual User Id */
      actual_user_id?: string | null;
      /** User Replacing Id */
      user_replacing_id?: string | null;
      /** Requirements */
      requirements?: unknown;
      /** Curator Of Id */
      curator_of_id?: string | null;
      /** Staff Functions */
      staff_functions?: (components["schemas"]["ArchiveStaffFunctionRead"])[];
      position?: components["schemas"]["PositionRead"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
      /** User */
      user?: components["schemas"]["schemas__archive__archive_staff_unit__UserRead"] | null;
      /** Actual User */
      actual_user?: components["schemas"]["schemas__archive__archive_staff_unit__UserRead"] | null;
      /** Hr Vacancy */
      hr_vacancy?: (components["schemas"]["StaffUnitHrVacancyRead"])[];
      /** User Replacing */
      user_replacing?: components["schemas"]["schemas__archive__archive_staff_unit__UserReplacingRead"] | null;
    };
    /** ArchiveStaffUnitReadPagination */
    ArchiveStaffUnitReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["ArchiveStaffUnitRead"])[];
    };
    /** ArchiveStaffUnitReadWithoutUser */
    ArchiveStaffUnitReadWithoutUser: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Position Id */
      position_id?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** User Id */
      user_id?: string | null;
      /** Actual User Id */
      actual_user_id?: string | null;
      /** User Replacing Id */
      user_replacing_id?: string | null;
      /** Requirements */
      requirements?: unknown;
      /** Curator Of Id */
      curator_of_id?: string | null;
      /** Staff Functions */
      staff_functions?: (components["schemas"]["ArchiveStaffFunctionRead"])[];
      position?: components["schemas"]["PositionRead"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
      /** Hr Vacancy */
      hr_vacancy?: (components["schemas"]["StaffUnitHrVacancyRead"])[];
    };
    /** ArchiveStaffUnitUpdateDispose */
    ArchiveStaffUnitUpdateDispose: {
      /** Staff Unit Ids */
      staff_unit_ids: (string)[];
      /** Staff List Id */
      staff_list_id: string;
    };
    /** AttendanceChangeStatus */
    AttendanceChangeStatus: {
      /** Attendance Id */
      attendance_id: string;
      /** User Status */
      user_status?: (components["schemas"]["AttendanceUserStatus"])[];
    };
    /** AttendanceChangeStatusWithSchedule */
    AttendanceChangeStatusWithSchedule: {
      /** Schedule Id */
      schedule_id: string;
      /** Attendance Status */
      attendance_status?: string;
      /** Reason */
      reason?: string;
      /** User Id */
      user_id: string;
      /**
       * Date
       * Format: date
       */
      date: string;
      /** Activity */
      activity?: string;
    };
    /** AttendanceCreate */
    AttendanceCreate: {
      /**
       * Attendance Date
       * Format: date
       */
      attendance_date?: string;
      /** Schedule Id */
      schedule_id?: string;
    };
    /** AttendancePercentageRead */
    AttendancePercentageRead: {
      activity?: components["schemas"]["ActivityRead"];
      /** Percentage */
      percentage?: number;
    };
    /** AttendanceRead */
    AttendanceRead: {
      /**
       * Attendance Date
       * Format: date
       */
      attendance_date?: string;
      /** Schedule Id */
      schedule_id?: string;
      /** Id */
      id?: string;
      schedule?: components["schemas"]["ScheduleMonthRead"];
      /** Attended Users */
      attended_users?: (components["schemas"]["AttendedUserRead"])[];
      /** Class Status */
      class_status?: string;
    };
    /** AttendanceReadPagination */
    AttendanceReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["AttendanceRead"])[];
    };
    /** AttendanceReadShort */
    AttendanceReadShort: {
      /**
       * Attendance Date
       * Format: date
       */
      attendance_date?: string;
      /** Schedule Id */
      schedule_id?: string;
      /** Id */
      id?: string;
      /** Class Status */
      class_status?: string;
    };
    /** AttendanceUpdate */
    AttendanceUpdate: {
      /**
       * Attendance Date
       * Format: date
       */
      attendance_date?: string;
      /** Schedule Id */
      schedule_id?: string;
    };
    /** AttendanceUserStatus */
    AttendanceUserStatus: {
      /** Attendance Status */
      attendance_status?: string;
      /** Reason */
      reason?: string;
      /** User Id */
      user_id?: string;
    };
    /** AttendedUserRead */
    AttendedUserRead: {
      /** Attendance Status */
      attendance_status?: string;
      /** User Id */
      user_id?: string;
      /** Attendance Id */
      attendance_id?: string;
      /** Id */
      id?: string;
      user?: components["schemas"]["UserShortReadStatus"];
    };
    /** AttestationRead */
    AttestationRead: {
      /** Id */
      id: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Link */
      document_link?: string;
      /** Cancel Document Link */
      cancel_document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date Credited
       * Format: date-time
       */
      date_credited?: string;
      /** Attestation Status */
      attestation_status?: string;
      /** Attestation Statuskz */
      attestation_statusKZ?: string;
    };
    /** BadgeCreate */
    BadgeCreate: {
      /** User Id */
      user_id: string;
      /** Type Id */
      type_id: string;
    };
    /** BadgeRead */
    BadgeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** User Id */
      user_id: string;
      /** Type Id */
      type_id: string;
      type?: components["schemas"]["BadgeTypeRead"];
      history?: components["schemas"]["schemas__badge__History"];
    };
    /** BadgeServiceDetailRead */
    BadgeServiceDetailRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Document Link */
      document_link?: string;
      /** Cancel Document Link */
      cancel_document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Url */
      url?: string;
      /** Reason */
      reason?: string;
      /** Reasonkz */
      reasonKZ?: string;
      /** Badge Order */
      badge_order?: number;
    };
    /** BadgeTypeCreate */
    BadgeTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Url */
      url: string;
      /** Badge Order */
      badge_order?: number;
    };
    /** BadgeTypePaginationRead */
    BadgeTypePaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["BadgeTypeRead"])[];
    };
    /** BadgeTypeRead */
    BadgeTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Url */
      url: string;
      /** Badge Order */
      badge_order?: number;
    };
    /** BadgeTypeUpdate */
    BadgeTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Url */
      url: string;
      /** Badge Order */
      badge_order?: number;
    };
    /** BadgeUpdate */
    BadgeUpdate: {
      /** User Id */
      user_id: string;
      /** Type Id */
      type_id: string;
    };
    /** BiographicInfoCreate */
    BiographicInfoCreate: {
      /** Place Birth */
      place_birth: string;
      /** Gender */
      gender: boolean;
      /** Citizenship */
      citizenship: string;
      /** Nationality */
      nationality: string;
      /** Citizenshipkz */
      citizenshipKZ?: string;
      /** Nationalitykz */
      nationalityKZ?: string;
      /** Family Status Id */
      family_status_id: string;
      /** Address */
      address: string;
      /** Residence Address */
      residence_address: string;
      /** Profile Id */
      profile_id: string;
    };
    /** BiographicInfoRead */
    BiographicInfoRead: {
      /** Place Birth */
      place_birth?: string;
      /** Gender */
      gender?: boolean;
      /** Citizenship */
      citizenship?: string;
      /** Nationality */
      nationality?: string;
      /** Citizenshipkz */
      citizenshipKZ?: string;
      /** Nationalitykz */
      nationalityKZ?: string;
      /** Family Status Id */
      family_status_id?: string;
      /** Address */
      address?: string;
      /** Residence Address */
      residence_address?: string;
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      family_status?: components["schemas"]["FamilyStatusRead"];
    };
    /** BiographicInfoUpdate */
    BiographicInfoUpdate: {
      /** Place Birth */
      place_birth?: string;
      /** Gender */
      gender?: boolean;
      /** Citizenship */
      citizenship?: string;
      /** Nationality */
      nationality?: string;
      /** Family Status Id */
      family_status_id?: string;
      /** Residence Address */
      residence_address?: string;
      /** Address */
      address?: string;
    };
    /** BlackBeretRead */
    BlackBeretRead: {
      /** Id */
      id?: string;
      /** Badge Id */
      badge_id?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /** Document Number */
      document_number?: string;
    };
    /** Body_get_short_user_api_v1_users_iins__post */
    Body_get_short_user_api_v1_users_iins__post: {
      /** User Ids */
      user_ids: (string)[];
      /** Candidate Ids */
      candidate_ids: (string)[];
    };
    /** BspPlanCreate */
    BspPlanCreate: {
      /** Year */
      year?: number;
      /** Creator Id */
      creator_id?: string;
      status?: components["schemas"]["Enum"];
      /**
       * Signed At
       * Format: date-time
       */
      signed_at?: string;
    };
    /** BspPlanRead */
    BspPlanRead: {
      /** Year */
      year?: number;
      /** Creator Id */
      creator_id?: string;
      status?: components["schemas"]["Enum"];
      /**
       * Signed At
       * Format: date-time
       */
      signed_at?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /** Id */
      id?: string;
      creator?: components["schemas"]["UserShortReadStatus"];
      /** Schedule Years */
      schedule_years?: (components["schemas"]["ScheduleYearRead"])[];
    };
    /** BspPlanReadPagination */
    BspPlanReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["BspPlanRead"])[];
    };
    /** BspPlanUpdate */
    BspPlanUpdate: {
      /** Year */
      year?: number;
      /** Creator Id */
      creator_id?: string;
      status?: components["schemas"]["Enum"];
      /**
       * Signed At
       * Format: date-time
       */
      signed_at?: string;
    };
    /** CandidateCreate */
    CandidateCreate: {
      /** Staff Unit Curator Id */
      staff_unit_curator_id: string;
      /** Staff Unit Id */
      staff_unit_id: string;
    };
    /** CandidateEssayTypeCreate */
    CandidateEssayTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CandidateEssayTypeRead */
    CandidateEssayTypeRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Id */
      id?: string;
    };
    /**
     * CandidateEssayTypeSetToCandidate
     * @description This class is used for set essay_id to candidate
     *
     * If candidate chooses from existing essay types then you can set id of essay
     * If candidate creates a new essay you can set name of the new essay
     */
    CandidateEssayTypeSetToCandidate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Id */
      id?: string;
    };
    /** CandidateEssayTypeUpdate */
    CandidateEssayTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CandidateEssayUpdate */
    CandidateEssayUpdate: {
      /** Essay Id */
      essay_id?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
    };
    /** CandidateRead */
    CandidateRead: {
      /** Staff Unit Curator Id */
      staff_unit_curator_id?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Status */
      status?: string;
      /** Is Physical Passed */
      is_physical_passed?: boolean;
      /** Attempt Number */
      attempt_number?: number;
      /** Debarment Reason */
      debarment_reason?: string;
      /** Progress */
      progress?: number;
      /** Current Stage */
      current_stage?: string;
      /** Essay Id */
      essay_id?: string;
      essay?: components["schemas"]["CandidateEssayTypeRead"];
      /**
       * Last Edit Date
       * Format: date
       */
      last_edit_date?: string;
      staff_unit_curator?: components["schemas"]["StaffUnitCandidateRead"];
      staff_unit?: components["schemas"]["StaffUnitCandidateRead"];
      /** Recommended By */
      recommended_by?: string;
      recommended_by_user?: components["schemas"]["CandidateUserRead"];
    };
    /** CandidateRegistrationForm */
    CandidateRegistrationForm: {
      /** Iin */
      iin: string;
    };
    /** CandidateStageAnswerCreate */
    CandidateStageAnswerCreate: {
      /** Type */
      type?: string;
      /** Answer Str */
      answer_str?: string;
      /** Answer Bool */
      answer_bool?: boolean;
      /** Answer */
      answer?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /** Candidate Essay Type Id */
      candidate_essay_type_id?: string;
      /** Candidate Id */
      candidate_id: string;
      /** Category Id */
      category_id?: string;
      /** Candidate Stage Question Id */
      candidate_stage_question_id: string;
      /** Sport Score */
      sport_score?: number;
      /** Answer Id */
      answer_id?: string;
    };
    /** CandidateStageAnswerRead */
    CandidateStageAnswerRead: {
      /** Type */
      type?: string;
      /** Answer Str */
      answer_str?: string;
      /** Answer Bool */
      answer_bool?: boolean;
      /** Answer */
      answer?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /** Candidate Essay Type Id */
      candidate_essay_type_id?: string;
      /** Candidate Id */
      candidate_id: string;
      /** Category Id */
      category_id?: string;
      /** Id */
      id?: string;
      /** Is Sport Passed */
      is_sport_passed?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Candidate Stage Question Id */
      candidate_stage_question_id?: string;
      candidate_stage_question?: components["schemas"]["schemas__user_candidates__candidate_stage_answer__CandidateStageQuestionRead"];
    };
    /** CandidateStageAnswerUpdate */
    CandidateStageAnswerUpdate: {
      /** Type */
      type?: string;
      /** Answer Str */
      answer_str?: string;
      /** Answer Bool */
      answer_bool?: boolean;
      /** Answer */
      answer?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /** Candidate Essay Type Id */
      candidate_essay_type_id?: string;
      /** Candidate Id */
      candidate_id: string;
      /** Category Id */
      category_id?: string;
      /** Candidate Stage Question Id */
      candidate_stage_question_id: string;
    };
    /** CandidateStageInfoCreate */
    CandidateStageInfoCreate: {
      /** Candidate Id */
      candidate_id: string;
      /** Candidate Stage Type Id */
      candidate_stage_type_id: string;
    };
    /** CandidateStageInfoRead */
    CandidateStageInfoRead: {
      /** Candidate Id */
      candidate_id?: string;
      /** Candidate Stage Type Id */
      candidate_stage_type_id?: string;
      /** Id */
      id?: string;
      /** Access */
      access?: boolean;
      /** Status */
      status?: string;
      candidate?: components["schemas"]["CandidateRead"];
      /** Is Waits */
      is_waits?: boolean;
      candidate_stage_type?: components["schemas"]["CandidateStageTypeRead"];
      /**
       * Date Sign
       * Format: date-time
       */
      date_sign?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
    };
    /** CandidateStageInfoSendToApproval */
    CandidateStageInfoSendToApproval: {
      /** Staff Unit Coordinate Id */
      staff_unit_coordinate_id?: string;
    };
    /** CandidateStageInfoSignEcp */
    CandidateStageInfoSignEcp: {
      /** Certificate Blob */
      certificate_blob: string;
    };
    /** CandidateStageInfoUpdate */
    CandidateStageInfoUpdate: {
      /** Candidate Id */
      candidate_id?: string;
      /** Candidate Stage Type Id */
      candidate_stage_type_id?: string;
      /** Status */
      status?: string;
    };
    /** CandidateStageListAnswerCreate */
    CandidateStageListAnswerCreate: {
      /** Candidate Stage Answers */
      candidate_stage_answers?: (components["schemas"]["CandidateStageAnswerCreate"])[];
    };
    /** CandidateStageQuestionCreate */
    CandidateStageQuestionCreate: {
      /** Question */
      question: string;
      /** Question Type */
      question_type: string;
      /** Candidate Stage Type Id */
      candidate_stage_type_id?: string;
    };
    /** CandidateStageQuestionUpdate */
    CandidateStageQuestionUpdate: {
      /** Question */
      question: string;
      /** Question Type */
      question_type: string;
      /** Candidate Stage Type Id */
      candidate_stage_type_id?: string;
    };
    /** CandidateStageTypeCreate */
    CandidateStageTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CandidateStageTypeRead */
    CandidateStageTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Cand Stage Questions */
      cand_stage_questions?: (components["schemas"]["schemas__user_candidates__candidate_stage_question__CandidateStageQuestionRead"])[];
    };
    /** CandidateStageTypeUpdate */
    CandidateStageTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CandidateUpdate */
    CandidateUpdate: {
      /** Staff Unit Curator Id */
      staff_unit_curator_id?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Status */
      status?: string;
      /** Debarment Reason */
      debarment_reason?: string;
      /** Is Physical Passed */
      is_physical_passed?: boolean;
      /** Recommended By */
      recommended_by?: string;
    };
    /** CandidateUserRead */
    CandidateUserRead: {
      /** Id */
      id: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Icon */
      icon?: string;
    };
    /** CharacteristicRead */
    CharacteristicRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Link */
      document_link?: string;
      /** Cancel Document Link */
      cancel_document_link?: string;
      /** Document Number */
      document_number?: string;
      /** Characteristic Initiator */
      characteristic_initiator?: string;
      /** Characteristic Initiator Id */
      characteristic_initiator_id?: string;
    };
    /** ContractCreate */
    ContractCreate: {
      /** Type Id */
      type_id: string;
      /** User Id */
      user_id: string;
    };
    /** ContractTypeRead */
    ContractTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Years */
      years?: number;
    };
    /** ContractTypeReadPagination */
    ContractTypeReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["ContractTypeRead"])[];
    };
    /** ContractUpdate */
    ContractUpdate: {
      /** Type Id */
      type_id: string;
      /** User Id */
      user_id: string;
    };
    /** ConvertCandidateTemplate */
    ConvertCandidateTemplate: {
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /** Candidate Id */
      candidate_id: string;
    };
    /** CoolnessCreate */
    CoolnessCreate: {
      /** Coolness Status */
      coolness_status?: unknown;
      /** Type Id */
      type_id?: string;
      /** User Id */
      user_id?: string;
    };
    /** CoolnessRead */
    CoolnessRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Coolness Status */
      coolness_status?: unknown;
      /** Type Id */
      type_id?: string;
      /** User Id */
      user_id?: string;
      type?: components["schemas"]["CoolnessTypeRead"];
    };
    /** CoolnessTypeCreate */
    CoolnessTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Order */
      order?: number;
    };
    /** CoolnessTypeRead */
    CoolnessTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CoolnessTypeReadPagination */
    CoolnessTypeReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["CoolnessTypeRead"])[];
    };
    /** CoolnessTypeUpdate */
    CoolnessTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CoolnessUpdate */
    CoolnessUpdate: {
      /** Coolness Status */
      coolness_status?: unknown;
      /** Type Id */
      type_id?: string;
      /** User Id */
      user_id?: string;
    };
    /** CountryCreate */
    CountryCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CountryRead */
    CountryRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CountryReadPagination */
    CountryReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["CountryRead"])[];
    };
    /** CountryUpdate */
    CountryUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CourseCreate */
    CourseCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Profile Id */
      profile_id?: string;
      /** Course Provider Id */
      course_provider_id?: string;
      /**
       * Start Date
       * Format: date
       */
      start_date?: string;
      /**
       * End Date
       * Format: date
       */
      end_date?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
    };
    /** CourseProviderCreate */
    CourseProviderCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CourseProviderRead */
    CourseProviderRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CourseProviderReadPagination */
    CourseProviderReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["CourseProviderRead"])[];
    };
    /** CourseProviderUpdate */
    CourseProviderUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** CourseRead */
    CourseRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Profile Id */
      profile_id?: string;
      /** Course Provider Id */
      course_provider_id?: string;
      /**
       * Start Date
       * Format: date
       */
      start_date?: string;
      /**
       * End Date
       * Format: date
       */
      end_date?: string;
      /** Document Link */
      document_link?: string;
      course_provider?: components["schemas"]["CourseProviderRead"];
    };
    /** CourseUpdate */
    CourseUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Profile Id */
      profile_id?: string;
      /** Course Provider Id */
      course_provider_id?: string;
      /**
       * Start Date
       * Format: date
       */
      start_date?: string;
      /**
       * End Date
       * Format: date
       */
      end_date?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
    };
    /** DayRead */
    DayRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** DetailedNotificationCreate */
    DetailedNotificationCreate: {
      /** Hr Document Id */
      hr_document_id?: string;
      /** Receiver Id */
      receiver_id?: string;
      /** Survey Id */
      survey_id?: string;
    };
    /** DetailedNotificationRead */
    DetailedNotificationRead: {
      /** Hr Document Id */
      hr_document_id?: string;
      /** Receiver Id */
      receiver_id?: string;
      /** Survey Id */
      survey_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      hr_document?: components["schemas"]["HrDocumentRead"];
      survey?: components["schemas"]["SurveyNotificationRead"];
    };
    /** DetailedNotificationReadPagination */
    DetailedNotificationReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["DetailedNotificationRead"])[];
    };
    /** DispensaryRegistrationCreate */
    DispensaryRegistrationCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Initiator */
      initiator: string;
      /** Initiatorkz */
      initiatorKZ: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** DispensaryRegistrationRead */
    DispensaryRegistrationRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Initiator */
      initiator?: string;
      /** Initiatorkz */
      initiatorKZ?: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date?: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
    };
    /** DispensaryRegistrationUpdate */
    DispensaryRegistrationUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Initiator */
      initiator: string;
      /** Initiatorkz */
      initiatorKZ: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** DocumentStaffFunctionAdd */
    DocumentStaffFunctionAdd: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Hours Per Week */
      hours_per_week: number;
      /** Priority */
      priority: number;
      /** Role Id */
      role_id: string;
      /** Jurisdiction Id */
      jurisdiction_id: string;
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /** Is Direct Supervisor */
      is_direct_supervisor?: boolean | null;
      /** Category */
      category?: number | null;
    };
    /** DocumentStaffFunctionAppendToStaffUnit */
    DocumentStaffFunctionAppendToStaffUnit: {
      /** Staff Function Id */
      staff_function_id: string;
      /** Staff Unit Ids */
      staff_unit_ids: (string)[];
    };
    /** DocumentStaffFunctionConstructorAdd */
    DocumentStaffFunctionConstructorAdd: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Hours Per Week */
      hours_per_week: number;
      /** Priority */
      priority: number;
      /** Role Id */
      role_id: string;
      /** Jurisdiction Id */
      jurisdiction_id: string;
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /** Is Direct Supervisor */
      is_direct_supervisor?: boolean | null;
      /** Category */
      category?: number | null;
      /** Staff Unit Id */
      staff_unit_id: string;
    };
    /** DocumentStaffFunctionRead */
    DocumentStaffFunctionRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Hours Per Week */
      hours_per_week?: number | null;
      /** Priority */
      priority?: number | null;
      /** Role Id */
      role_id?: string | null;
      /** Jurisdiction Id */
      jurisdiction_id?: string | null;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Discriminator */
      discriminator?: string | null;
      role?: components["schemas"]["DocumentStaffFunctionTypeRead"];
      hr_document_step?: components["schemas"]["DocumentStaffFunctionStep"];
      jurisdiction?: components["schemas"]["JurisdictionRead"];
    };
    /** DocumentStaffFunctionStep */
    DocumentStaffFunctionStep: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      hr_document_template?: components["schemas"]["DocumentStaffFunctionTemplate"];
    };
    /** DocumentStaffFunctionTemplate */
    DocumentStaffFunctionTemplate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** DocumentStaffFunctionTypeCreate */
    DocumentStaffFunctionTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Can Cancel */
      can_cancel: boolean;
    };
    /** DocumentStaffFunctionTypeRead */
    DocumentStaffFunctionTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Can Cancel */
      can_cancel?: boolean;
    };
    /** DocumentStaffFunctionTypeUpdate */
    DocumentStaffFunctionTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Can Cancel */
      can_cancel: boolean;
    };
    /** DocumentStaffFunctionUpdate */
    DocumentStaffFunctionUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Hours Per Week */
      hours_per_week: number;
      /** Priority */
      priority: number;
      /** Role Id */
      role_id: string;
      /** Jurisdiction Id */
      jurisdiction_id: string;
    };
    /** DraftHrDocumentCreate */
    DraftHrDocumentCreate: {
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /**
       * Due Date
       * Format: date-time
       */
      due_date?: string;
      /** Parent Id */
      parent_id?: string | null;
      /** Properties */
      properties?: Record<string, never>;
      /** Initial Comment */
      initial_comment?: string;
      /** User Ids */
      user_ids?: (string)[];
    };
    /** DrivingLicenseCreate */
    DrivingLicenseCreate: {
      /** Document Number */
      document_number: string;
      /** Category */
      category?: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue: string;
      /**
       * Date To
       * Format: date
       */
      date_to: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** DrivingLicenseLinkUpdate */
    DrivingLicenseLinkUpdate: {
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
    };
    /** DrivingLicenseRead */
    DrivingLicenseRead: {
      /** Document Number */
      document_number?: string;
      /** Category */
      category?: string | (string)[];
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date
       */
      updated_at?: string;
    };
    /** DrivingLicenseUpdate */
    DrivingLicenseUpdate: {
      /** Document Number */
      document_number?: string;
      /** Category */
      category?: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
    };
    /** EcpLoginForm */
    EcpLoginForm: {
      /** Certificate Blob */
      certificate_blob: string;
    };
    /** EducationCreate */
    EducationCreate: {
      /** Profile Id */
      profile_id?: string;
      /** Institution Id */
      institution_id?: string;
      /** Degree Id */
      degree_id?: string;
      /**
       * Start Date
       * Format: date
       */
      start_date?: string;
      /**
       * End Date
       * Format: date
       */
      end_date?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Is Military School */
      school_type?: string
      /** Specialty Id */
      specialty_id?: string;
      /** Type Of Top */
      type_of_top?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue?: string;
    };
    /** EducationRead */
    EducationRead: {
      /** Profile Id */
      profile_id?: string;
      /** Institution Id */
      institution_id?: string;
      /** Degree Id */
      degree_id?: string;
      /**
       * Start Date
       * Format: date
       */
      start_date?: string;
      /**
       * End Date
       * Format: date
       */
      end_date?: string;
      /** Document Link */
      document_link?: string;
      /** Is Military School */
      school_type?: string
      /** Specialty Id */
      specialty_id?: string;
      /** Type Of Top */
      type_of_top?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue?: string;
      /** Id */
      id?: string;
      specialty?: components["schemas"]["SpecialtyRead"];
      institution?: components["schemas"]["InstitutionRead"];
      degree?: components["schemas"]["InstitutionDegreeTypeRead"];
    };
    /** EducationUpdate */
    EducationUpdate: {
      /** Profile Id */
      profile_id?: string;
      /** Institution Id */
      institution_id?: string;
      /** Degree Id */
      degree_id?: string;
      /**
       * Start Date
       * Format: date
       */
      start_date?: string;
      /**
       * End Date
       * Format: date
       */
      end_date?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Is Military School */
      school_type?: string
      /** Specialty Id */
      specialty_id?: string;
      /** Type Of Top */
      type_of_top?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue?: string;
    };
    /** EducationalProfileCreate */
    EducationalProfileCreate: {
      /** Profile Id */
      profile_id?: string;
    };
    /** EducationalProfileRead */
    EducationalProfileRead: {
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
      /** Academic Degree */
      academic_degree?: (components["schemas"]["AcademicDegreeRead"])[];
      /** Academic Title */
      academic_title?: (components["schemas"]["AcademicTitleRead"])[];
      /** Education */
      education?: (components["schemas"]["EducationRead"])[];
      /** Course */
      course?: (components["schemas"]["CourseRead"])[];
      /** Language Proficiency */
      language_proficiency?: (components["schemas"]["LanguageProficiencyRead"])[];
    };
    /** EducationalProfileUpdate */
    EducationalProfileUpdate: {
      /** Profile Id */
      profile_id?: string;
    };
    /** EmergencyContactRead */
    EmergencyContactRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Length Of Service */
      length_of_service?: Record<string, never>;
      /** Coefficient */
      coefficient?: number;
      /** Percentage */
      percentage?: number;
      /** Staff Division */
      staff_division?: Record<string, never>;
      /** Position */
      position?: Record<string, never>;
      /** Position Id */
      position_id?: string;
      /** Position Name */
      position_name?: string;
      /** Position Namekz */
      position_nameKZ?: string;
      /** Actual Position */
      actual_position?: Record<string, never>;
      /** Actual Position Id */
      actual_position_id?: string;
      /** Actual Position Name */
      actual_position_name?: string;
      /** Actual Position Namekz */
      actual_position_nameKZ?: string;
      /** Emergency Rank Id */
      emergency_rank_id?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** Document Style */
      document_style?: string;
      /** Contractor Signer Name */
      contractor_signer_name?: Record<string, never>;
      /**
       * Date Credited
       * Format: date-time
       */
      date_credited?: string;
    };
    /**
     * Enum
     * @description Generic enumeration.
     *
     * Derive from this class to define new enumerations.
     * @enum {unknown}
     */
    Enum: never;
    /** EquipmentCreate */
    EquipmentCreate: {
      /** Type Of Equipment */
      type_of_equipment?: string;
      /** Type Of Army Equipment Model Id */
      type_of_army_equipment_model_id?: string;
      /** Inventory Number */
      inventory_number?: string;
      /** Inventory Count */
      inventory_count?: number;
      /** Count Of Ammo */
      count_of_ammo?: number;
      /** Cloth Eq Types Models Id */
      cloth_eq_types_models_id?: string;
      /** Type Of Other Equipment Model Id */
      type_of_other_equipment_model_id?: string;
      /** Clothing Size */
      clothing_size?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** User Id */
      user_id?: string;
      /** Cloth Eq Types Id */
      cloth_eq_types_id?: string;
      /** Cloth Eq Models Id */
      cloth_eq_models_id?: string;
    };
    /** EquipmentUpdate */
    EquipmentUpdate: {
      /** Type Of Equipment */
      type_of_equipment?: string;
      /** Type Of Army Equipment Model Id */
      type_of_army_equipment_model_id?: string;
      /** Inventory Number */
      inventory_number?: string;
      /** Inventory Count */
      inventory_count?: number;
      /** Count Of Ammo */
      count_of_ammo?: number;
      /** Cloth Eq Types Models Id */
      cloth_eq_types_models_id?: string;
      /** Type Of Other Equipment Model Id */
      type_of_other_equipment_model_id?: string;
      /** Clothing Size */
      clothing_size?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** User Id */
      user_id?: string;
      /** Cloth Eq Types Id */
      cloth_eq_types_id?: string;
      /** Cloth Eq Models Id */
      cloth_eq_models_id?: string;
    };
    /** ExamChangeResults */
    ExamChangeResults: {
      /**
       * Exam Id
       * Format: uuid
       */
      exam_id: string;
      /** Users Results */
      users_results?: (components["schemas"]["ExamUserResult"])[];
    };
    /** ExamResultRead */
    ExamResultRead: {
      /**
       * Exam Date
       * Format: date
       */
      exam_date?: string;
      /** Grade */
      grade?: number;
      /** User Id */
      user_id?: string;
      /** Exam Id */
      exam_id?: string;
      /** Id */
      id?: string;
      user?: components["schemas"]["UserShortReadAgeCategory"];
      exam?: components["schemas"]["ExamScheduleRead"];
      /** Results */
      results?: Record<string, never>;
    };
    /** ExamResultReadPagination */
    ExamResultReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["ExamResultRead"])[];
    };
    /** ExamScheduleCreateWithInstructors */
    ExamScheduleCreateWithInstructors: {
      /**
       * Start Date
       * Format: date
       */
      start_date?: string;
      /**
       * End Date
       * Format: date
       */
      end_date?: string;
      /**
       * Start Time
       * Format: time
       */
      start_time?: string;
      /**
       * End Time
       * Format: time
       */
      end_time?: string;
      /** Place Id */
      place_id?: string;
      /** Schedule Id */
      schedule_id?: string;
      /** Instructor Ids */
      instructor_ids?: (string)[];
    };
    /** ExamScheduleRead */
    ExamScheduleRead: {
      /**
       * Start Date
       * Format: date
       */
      start_date?: string;
      /**
       * End Date
       * Format: date
       */
      end_date?: string;
      /**
       * Start Time
       * Format: time
       */
      start_time?: string;
      /**
       * End Time
       * Format: time
       */
      end_time?: string;
      /** Place Id */
      place_id?: string;
      /** Schedule Id */
      schedule_id?: string;
      /** Id */
      id?: string;
      /** Instructors */
      instructors?: (components["schemas"]["UserShortReadStatus"])[];
      place?: components["schemas"]["PlaceRead"];
      activity?: components["schemas"]["ActivityRead"];
      /** Class Status */
      class_status?: string;
      /** Staff Divisions */
      staff_divisions?: (components["schemas"]["StaffDivisionReadWithoutStaffUnit"])[];
      /** Exam Dates */
      exam_dates: ({
          [key: string]: string | undefined;
        })[];
    };
    /** ExamScheduleReadPagination */
    ExamScheduleReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["ExamScheduleRead"])[];
    };
    /** ExamScheduleUpdate */
    ExamScheduleUpdate: {
      /**
       * Start Date
       * Format: date
       */
      start_date?: string;
      /**
       * End Date
       * Format: date
       */
      end_date?: string;
      /**
       * Start Time
       * Format: time
       */
      start_time?: string;
      /**
       * End Time
       * Format: time
       */
      end_time?: string;
      /** Place Id */
      place_id?: string;
      /** Schedule Id */
      schedule_id?: string;
    };
    /** ExamTabletRead */
    ExamTabletRead: {
      /**
       * Exams
       * @default []
       */
      exams?: (components["schemas"]["ExamScheduleRead"])[];
      /**
       * Results
       * @default []
       */
      results?: (components["schemas"]["ExamResultRead"])[];
    };
    /** ExamUserResult */
    ExamUserResult: {
      /** Grade */
      grade?: number;
      /** Results */
      results?: Record<string, never>;
      /**
       * User Id
       * Format: uuid
       */
      user_id?: string;
    };
    /** ExperienceRead */
    ExperienceRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /** Name Of Organization */
      name_of_organization?: string;
      /** Name Of Organizationkz */
      name_of_organizationKZ?: string;
      /** Is Credited */
      is_credited?: boolean;
      /** Document Style */
      document_style?: string;
      /**
       * Date Credited
       * Format: date-time
       */
      date_credited?: string;
      /** Position Work Experience */
      position_work_experience?: string;
      /** Position Work Experiencekz */
      position_work_experienceKZ?: string;
      /** Length Of Service */
      length_of_service?: Record<string, never>;
    };
    /** FamilyCreate */
    FamilyCreate: {
      /** Relation Id */
      relation_id: string;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /** Father Name */
      father_name?: string;
      /** Iin */
      IIN: string;
      /**
       * Birthday
       * Format: date-time
       */
      birthday: string;
      /**
       * Death Day
       * Format: date-time
       */
      death_day?: string;
      /** Birthplace */
      birthplace: string;
      /** Address */
      address?: string;
      /** Workplace */
      workplace?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** FamilyProfileCreate */
    FamilyProfileCreate: {
      /** Profile Id */
      profile_id?: string;
    };
    /** FamilyProfileRead */
    FamilyProfileRead: {
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
      /** Family */
      family?: (components["schemas"]["FamilyRead"])[];
    };
    /** FamilyProfileUpdate */
    FamilyProfileUpdate: {
      /** Profile Id */
      profile_id?: string;
    };
    /** FamilyRead */
    FamilyRead: {
      /** Relation Id */
      relation_id?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Iin */
      IIN?: string;
      /**
       * Birthday
       * Format: date-time
       */
      birthday?: string;
      /**
       * Death Day
       * Format: date-time
       */
      death_day?: string;
      /** Birthplace */
      birthplace?: string;
      /** Address */
      address?: string;
      /** Workplace */
      workplace?: string;
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
      relation?: components["schemas"]["FamilyRelationRead"];
      /** Violation */
      violation?: (components["schemas"]["ViolationRead"])[];
      /** Abroad Travel */
      abroad_travel?: (components["schemas"]["AbroadTravelRead"])[];
    };
    /** FamilyRelationRead */
    FamilyRelationRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Family Order */
      family_order: number;
    };
    /** FamilyRelationReadPagination */
    FamilyRelationReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["FamilyRelationRead"])[];
    };
    /** FamilyStatusRead */
    FamilyStatusRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** FamilyUpdate */
    FamilyUpdate: {
      /** Relation Id */
      relation_id: string;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /** Father Name */
      father_name?: string;
      /** Iin */
      IIN: string;
      /**
       * Birthday
       * Format: date-time
       */
      birthday: string;
      /**
       * Death Day
       * Format: date-time
       */
      death_day?: string;
      /** Birthplace */
      birthplace: string;
      /** Address */
      address?: string;
      /** Workplace */
      workplace?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** GeneralInformationRead */
    GeneralInformationRead: {
      oath?: components["schemas"]["OathRead"];
      privilege_emergency_secrets?: components["schemas"]["PrivelegeEmergencyRead"];
      personnel_reserve?: components["schemas"]["PersonnalReserveRead"];
      /** Coolness */
      coolness?: (components["schemas"]["CoolnessRead"])[];
      black_beret?: components["schemas"]["BlackBeretRead"];
      /** Recommender */
      recommender?: Record<string, never>;
    };
    /** GeneralUserInformationCreate */
    GeneralUserInformationCreate: {
      /** Height */
      height: number;
      /** Blood Group */
      blood_group: string;
      age_group: components["schemas"]["AgeGroup"];
      /** Profile Id */
      profile_id: string;
      /** Weight */
      weight: number;
    };
    /** GeneralUserInformationRead */
    GeneralUserInformationRead: {
      /** Height */
      height?: number;
      /** Blood Group */
      blood_group?: string;
      age_group?: components["schemas"]["AgeGroup"];
      /** Profile Id */
      profile_id?: string;
      /** Weight */
      weight?: number;
      /** Id */
      id?: string;
    };
    /** GeneralUserInformationUpdate */
    GeneralUserInformationUpdate: {
      /** Height */
      height: number;
      /** Blood Group */
      blood_group: string;
      age_group: components["schemas"]["AgeGroup"];
      /** Profile Id */
      profile_id: string;
      /** Weight */
      weight: number;
    };
    /** HTML */
    HTML: {
      /** Html */
      html: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** HexagonAveragesRead */
    HexagonAveragesRead: {
      /** Kp */
      KP: number;
      /** Ls */
      LS: number;
      /** Ec */
      EC: number;
      /** Pz */
      PZ: number;
      /** Op */
      OP: number;
      /** Fp */
      FP: number;
    };
    /** HexagonRead */
    HexagonRead: {
      KP: components["schemas"]["StatRead"];
      LS: components["schemas"]["StatRead"];
      EC: components["schemas"]["StatRead"];
      PZ: components["schemas"]["StatRead"];
      OP: components["schemas"]["StatRead"];
      FP: components["schemas"]["StatRead"];
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
    };
    /** HistoryAttestationCreate */
    HistoryAttestationCreate: {
      /** User Id */
      user_id: string;
      /** Type */
      type: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Number */
      document_number: string;
      /**
       * Date Credited
       * Format: date-time
       */
      date_credited?: string;
      /** Attestation Status */
      attestation_status: string;
      /** Attestation Statuskz */
      attestation_statusKZ: string;
    };
    /** HistoryBadgeCreate */
    HistoryBadgeCreate: {
      /** User Id */
      user_id: string;
      /** Type */
      type: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Number */
      document_number: string;
      /** Badge Type Id */
      badge_type_id: string;
      /** Reason */
      reason: string;
      /** Reasonkz */
      reasonKZ: string;
      /** Url */
      url: string;
    };
    /** HistoryBlackBeretCreate */
    HistoryBlackBeretCreate: {
      /** User Id */
      user_id: string;
      /** Type */
      type: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /** Document Number */
      document_number?: string;
    };
    /** HistoryContractCreate */
    HistoryContractCreate: {
      /** User Id */
      user_id: string;
      /** Type */
      type: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Number */
      document_number: string;
      /** Contract Type Id */
      contract_type_id: string;
      /** Experience Years */
      experience_years?: number;
      /**
       * Date Credited
       * Format: date-time
       */
      date_credited?: string;
    };
    /** HistoryCoolnessCreate */
    HistoryCoolnessCreate: {
      /** User Id */
      user_id: string;
      /** Type */
      type: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Number */
      document_number?: string;
      /** Coolness Type Id */
      coolness_type_id: string;
      /** Coolness Status */
      coolness_status: string;
    };
    /** HistoryCreate */
    HistoryCreate: {
      /** Document Link */
      document_link?: string;
      /** Cancel Document Link */
      cancel_document_link?: string;
      /** Confirm Document Link */
      confirm_document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Position Id */
      position_id?: string;
      /** Position Name */
      position_name?: string;
      /** Position Namekz */
      position_nameKZ?: string;
      /** Actual Position Id */
      actual_position_id?: string;
      /** Actual Position Name */
      actual_position_name?: string;
      /** Actual Position Namekz */
      actual_position_nameKZ?: string;
      /** Rank Id */
      rank_id?: string;
      /** Penalty Id */
      penalty_id?: string;
      /** Emergency Service Id */
      emergency_service_id?: string;
      /** Secondment Id */
      secondment_id?: string;
      /** Name Change Id */
      name_change_id?: string;
      /** Attestation Id */
      attestation_id?: string;
      /** Characteristic Initiator Id */
      characteristic_initiator_id?: string;
      /** Rank Assigned By */
      rank_assigned_by?: string;
      /** Status Id */
      status_id?: string;
      /** Status Name */
      status_name?: string;
      /** Coolness Id */
      coolness_id?: string;
      /** Contract Id */
      contract_id?: string;
      /** Badge Id */
      badge_id?: string;
      /** User Id */
      user_id: string;
      /** Is Credited */
      is_credited?: boolean;
      /** Document Style */
      document_style?: string;
      /**
       * Date Credited
       * Format: date-time
       */
      date_credited?: string;
      /** Name Of Organization */
      name_of_organization?: string;
      /** Name Of Organizationkz */
      name_of_organizationKZ?: string;
      /** Type */
      type: string;
      /** Position Work Experience */
      position_work_experience?: string;
      /** Position Work Experiencekz */
      position_work_experienceKZ?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** Coefficient */
      coefficient?: number;
      /** Percentage */
      percentage?: number;
      /** Staff Division Name */
      staff_division_name?: string;
      /** Staff Division Namekz */
      staff_division_nameKZ?: string;
      /** Contractor Signer Name */
      contractor_signer_name?: string;
      /** Contractor Signer Namekz */
      contractor_signer_nameKZ?: string;
      /** Reason */
      reason?: string;
      /** Reasonkz */
      reasonKZ?: string;
      /** Early Promotion */
      early_promotion?: boolean;
    };
    /** HistoryNameChangeCreate */
    HistoryNameChangeCreate: {
      /** Name Before */
      name_before?: string;
      /** Name After */
      name_after?: string;
      /** User Id */
      user_id: string;
      /** Name Type */
      name_type: string;
    };
    /** HistoryNameChangeRead */
    HistoryNameChangeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name Before */
      name_before?: string;
      /** Name After */
      name_after?: string;
      /** User Id */
      user_id?: string;
      /** Name Type */
      name_type?: string;
    };
    /** HistoryNameChangeUpdate */
    HistoryNameChangeUpdate: {
      /** Name Before */
      name_before?: string;
      /** Name After */
      name_after?: string;
      /** User Id */
      user_id: string;
      /** Name Type */
      name_type: string;
    };
    /** HistoryPenaltyCreate */
    HistoryPenaltyCreate: {
      /** User Id */
      user_id: string;
      /** Type */
      type: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Number */
      document_number: string;
      /** Penalty Type Id */
      penalty_type_id: string;
      /** Reason */
      reason: string;
      /** Reasonkz */
      reasonKZ: string;
    };
    /** HistoryRead */
    HistoryRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Document Link */
      document_link?: string;
      /** Cancel Document Link */
      cancel_document_link?: string;
      /** Confirm Document Link */
      confirm_document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Position Id */
      position_id?: string;
      /** Position Name */
      position_name?: string;
      /** Position Namekz */
      position_nameKZ?: string;
      /** Actual Position Id */
      actual_position_id?: string;
      /** Actual Position Name */
      actual_position_name?: string;
      /** Actual Position Namekz */
      actual_position_nameKZ?: string;
      /** Rank Id */
      rank_id?: string;
      /** Penalty Id */
      penalty_id?: string;
      /** Emergency Service Id */
      emergency_service_id?: string;
      /** Secondment Id */
      secondment_id?: string;
      /** Name Change Id */
      name_change_id?: string;
      /** Attestation Id */
      attestation_id?: string;
      /** Characteristic Initiator Id */
      characteristic_initiator_id?: string;
      /** Rank Assigned By */
      rank_assigned_by?: string;
      /** Status Id */
      status_id?: string;
      /** Status Name */
      status_name?: string;
      /** Coolness Id */
      coolness_id?: string;
      /** Contract Id */
      contract_id?: string;
      /** Badge Id */
      badge_id?: string;
      /** User Id */
      user_id?: string;
      /** Is Credited */
      is_credited?: boolean;
      /** Document Style */
      document_style?: string;
      /**
       * Date Credited
       * Format: date-time
       */
      date_credited?: string;
      /** Name Of Organization */
      name_of_organization?: string;
      /** Name Of Organizationkz */
      name_of_organizationKZ?: string;
      /** Type */
      type: string;
      /** Position Work Experience */
      position_work_experience?: string;
      /** Position Work Experiencekz */
      position_work_experienceKZ?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** Coefficient */
      coefficient?: number;
      /** Percentage */
      percentage?: number;
      /** Staff Division Name */
      staff_division_name?: string;
      /** Staff Division Namekz */
      staff_division_nameKZ?: string;
      /** Contractor Signer Name */
      contractor_signer_name?: string;
      /** Contractor Signer Namekz */
      contractor_signer_nameKZ?: string;
      /** Reason */
      reason?: string;
      /** Reasonkz */
      reasonKZ?: string;
      /** Early Promotion */
      early_promotion?: boolean;
      rank?: components["schemas"]["RankRead"];
      position?: components["schemas"]["PositionRead"];
      penalty?: components["schemas"]["schemas__penalty__PenaltyRead"];
      secondment?: components["schemas"]["schemas__secondment__SecondmentRead"];
      status?: components["schemas"]["StatusRead"];
      coolness?: components["schemas"]["CoolnessRead"];
      contract?: components["schemas"]["schemas__contract__ContractRead"];
      badge?: components["schemas"]["BadgeRead"];
      staff_division?: components["schemas"]["StaffDivisionReadWithoutStaffUnit"];
    };
    /** HistorySecondmentCreate */
    HistorySecondmentCreate: {
      /** User Id */
      user_id: string;
      /** Type */
      type: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Number */
      document_number: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** Value */
      value?: string;
    };
    /** HistoryServiceDetailRead */
    HistoryServiceDetailRead: {
      general_information?: components["schemas"]["GeneralInformationRead"];
      attendance?: components["schemas"]["TrainingAttendanceRead"];
      service_id_info?: components["schemas"]["ServiceIdInfoRead"];
      /** Badges */
      badges?: (components["schemas"]["BadgeServiceDetailRead"])[];
      /** Ranks */
      ranks?: (components["schemas"]["RankServiceDetailRead"])[];
      /** Penalties */
      penalties?: (components["schemas"]["schemas__history__history__PenaltyRead"])[];
      /** Contracts */
      contracts?: (components["schemas"]["schemas__history__history__ContractRead"])[];
      /** Attestations */
      attestations?: (components["schemas"]["AttestationRead"])[];
      /** Characteristics */
      characteristics?: (components["schemas"]["CharacteristicRead"])[];
      /** Holidays */
      holidays?: (components["schemas"]["HolidayRead"])[];
      /** Emergency Contracts */
      emergency_contracts?: (components["schemas"]["EmergencyContactRead"])[];
      /** Experience */
      experience?: (components["schemas"]["ExperienceRead"])[];
      /** Secondments */
      secondments?: (components["schemas"]["schemas__history__history__SecondmentRead"])[];
      /** Equipments */
      equipments?: (components["schemas"]["schemas__history__history__EquipmentRead"])[];
    };
    /** HistoryStatusCreate */
    HistoryStatusCreate: {
      /** User Id */
      user_id: string;
      /** Type */
      type: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Number */
      document_number: string;
      /** Status Type Id */
      status_type_id: string;
    };
    /** HistoryUpdate */
    HistoryUpdate: {
      /** Document Link */
      document_link?: string;
      /** Cancel Document Link */
      cancel_document_link?: string;
      /** Confirm Document Link */
      confirm_document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Position Id */
      position_id?: string;
      /** Position Name */
      position_name?: string;
      /** Position Namekz */
      position_nameKZ?: string;
      /** Actual Position Id */
      actual_position_id?: string;
      /** Actual Position Name */
      actual_position_name?: string;
      /** Actual Position Namekz */
      actual_position_nameKZ?: string;
      /** Rank Id */
      rank_id?: string;
      /** Penalty Id */
      penalty_id?: string;
      /** Emergency Service Id */
      emergency_service_id?: string;
      /** Secondment Id */
      secondment_id?: string;
      /** Name Change Id */
      name_change_id?: string;
      /** Attestation Id */
      attestation_id?: string;
      /** Characteristic Initiator Id */
      characteristic_initiator_id?: string;
      /** Rank Assigned By */
      rank_assigned_by?: string;
      /** Status Id */
      status_id?: string;
      /** Status Name */
      status_name?: string;
      /** Coolness Id */
      coolness_id?: string;
      /** Contract Id */
      contract_id?: string;
      /** Badge Id */
      badge_id?: string;
      /** User Id */
      user_id: string;
      /** Is Credited */
      is_credited?: boolean;
      /** Document Style */
      document_style?: string;
      /**
       * Date Credited
       * Format: date-time
       */
      date_credited?: string;
      /** Name Of Organization */
      name_of_organization?: string;
      /** Name Of Organizationkz */
      name_of_organizationKZ?: string;
      /** Type */
      type?: string;
      /** Position Work Experience */
      position_work_experience?: string;
      /** Position Work Experiencekz */
      position_work_experienceKZ?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** Coefficient */
      coefficient?: number;
      /** Percentage */
      percentage?: number;
      /** Staff Division Name */
      staff_division_name?: string;
      /** Staff Division Namekz */
      staff_division_nameKZ?: string;
      /** Contractor Signer Name */
      contractor_signer_name?: string;
      /** Contractor Signer Namekz */
      contractor_signer_nameKZ?: string;
      /** Reason */
      reason?: string;
      /** Reasonkz */
      reasonKZ?: string;
      /** Early Promotion */
      early_promotion?: boolean;
      /** Attestation Reg Number */
      attestation_reg_number?: string;
      /** Attestation Status */
      attestation_status?: string;
      /** Attestation Statuskz */
      attestation_statusKZ?: string;
      /** Badge Type Id */
      badge_type_id?: string;
      /** Status Type Id */
      status_type_id?: string;
      /** Experience Years */
      experience_years?: number;
      /** Url */
      url?: string;
    };
    /** HolidayRead */
    HolidayRead: {
      /** Id */
      id: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Link */
      document_link?: string;
      /** Cancel Document Link */
      cancel_document_link?: string;
      /** Document Number */
      document_number?: string;
      /** Status */
      status?: string;
      /** Status Type Id */
      status_type_id?: string;
      /** Status Id */
      status_id?: string;
    };
    /** HospitalDataCreate */
    HospitalDataCreate: {
      /** Code */
      code: string;
      /** Reason */
      reason: string;
      /** Reasonkz */
      reasonKZ: string;
      /** Place */
      place: string;
      /** Placekz */
      placeKZ: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** HospitalDataRead */
    HospitalDataRead: {
      /** Code */
      code?: string;
      /** Reason */
      reason?: string;
      /** Reasonkz */
      reasonKZ?: string;
      /** Place */
      place?: string;
      /** Placekz */
      placeKZ?: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date?: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
    };
    /** HospitalDataUpdate */
    HospitalDataUpdate: {
      /** Code */
      code: string;
      /** Reason */
      reason: string;
      /** Reasonkz */
      reasonKZ: string;
      /** Place */
      place: string;
      /** Placekz */
      placeKZ: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** HrDocumentHistoryRead */
    HrDocumentHistoryRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Hr Document Step Id */
      hr_document_step_id?: string;
      /** Signed By Id */
      signed_by_id?: string;
      /** Assigned To Id */
      assigned_to_id?: string;
      /** Comment */
      comment?: string;
      /** Is Signed */
      is_signed?: boolean;
      /** Hr Document Id */
      hr_document_id?: string;
      /**
       * Signed At
       * Format: date-time
       */
      signed_at?: string;
      /**
       * Order
       * @default 1
       */
      order?: number;
      hr_document_step?: components["schemas"]["HrDocumentStepRead"];
      hr_document?: components["schemas"]["HrDocumentRead"];
      signed_by?: components["schemas"]["schemas__user__UserRead"];
      assigned_to?: components["schemas"]["schemas__user__UserRead"];
    };
    /** HrDocumentInfoCreate */
    HrDocumentInfoCreate: {
      /** Hr Document Step Id */
      hr_document_step_id: string;
      /** Signed By Id */
      signed_by_id?: string;
      /** Assigned To Id */
      assigned_to_id?: string;
      /** Comment */
      comment: string;
      /** Is Signed */
      is_signed?: boolean;
      /** Hr Document Id */
      hr_document_id: string;
      /**
       * Signed At
       * Format: date-time
       */
      signed_at?: string;
      /**
       * Order
       * @default 1
       */
      order?: number;
    };
    /** HrDocumentInfoRead */
    HrDocumentInfoRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Hr Document Step Id */
      hr_document_step_id?: string;
      /** Signed By Id */
      signed_by_id?: string;
      /** Assigned To Id */
      assigned_to_id?: string;
      /** Comment */
      comment?: string;
      /** Is Signed */
      is_signed?: boolean;
      /** Hr Document Id */
      hr_document_id?: string;
      /**
       * Signed At
       * Format: date-time
       */
      signed_at?: string;
      /**
       * Order
       * @default 1
       */
      order?: number;
      hr_document_step?: components["schemas"]["HrDocumentStepRead"];
      hr_document?: components["schemas"]["HrDocumentRead"];
      signed_by?: components["schemas"]["schemas__user__UserRead"];
      assigned_to?: components["schemas"]["schemas__user__UserRead"];
    };
    /** HrDocumentInfoUpdate */
    HrDocumentInfoUpdate: {
      /** Hr Document Step Id */
      hr_document_step_id: string;
      /** Signed By Id */
      signed_by_id?: string;
      /** Assigned To Id */
      assigned_to_id?: string;
      /** Comment */
      comment: string;
      /** Is Signed */
      is_signed?: boolean;
      /** Hr Document Id */
      hr_document_id: string;
      /**
       * Signed At
       * Format: date-time
       */
      signed_at?: string;
      /**
       * Order
       * @default 1
       */
      order?: number;
    };
    /** HrDocumentInit */
    HrDocumentInit: {
      /** Document Step Users Ids */
      document_step_users_ids: Record<string, never>;
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /**
       * Due Date
       * Format: date-time
       */
      due_date?: string;
      /** Parent Id */
      parent_id?: string | null;
      /** Properties */
      properties?: Record<string, never>;
      /** Initial Comment */
      initial_comment?: string;
      /** User Ids */
      user_ids?: (string)[];
    };
    /** HrDocumentInitEcp */
    HrDocumentInitEcp: {
      /** Document Step Users Ids */
      document_step_users_ids: Record<string, never>;
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /**
       * Due Date
       * Format: date-time
       */
      due_date?: string;
      /** Parent Id */
      parent_id?: string | null;
      /** Properties */
      properties?: Record<string, never>;
      /** Initial Comment */
      initial_comment?: string;
      /** User Ids */
      user_ids?: (string)[];
      /** Certificate Blob */
      certificate_blob: string;
    };
    /** HrDocumentRead */
    HrDocumentRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Hr Document Template Id */
      hr_document_template_id?: string;
      /**
       * Due Date
       * Format: date-time
       */
      due_date?: string;
      /** Parent Id */
      parent_id?: string | null;
      /** Properties */
      properties?: Record<string, never>;
      /** Initial Comment */
      initial_comment?: string;
      document_template?: components["schemas"]["HrDocumentTemplateRead"];
      /** Status Id */
      status_id?: string;
      status?: components["schemas"]["HrDocumentStatusRead"];
      /** Initialized By Id */
      initialized_by_id?: string;
      initialized_by?: components["schemas"]["schemas__user__UserRead"];
      /** Can Cancel */
      can_cancel?: boolean;
      /** Users */
      users?: (components["schemas"]["schemas__user__UserRead"])[];
      last_step?: components["schemas"]["HrDocumentStepRead"];
      /** New Value */
      new_value?: unknown;
      /** Old History Id */
      old_history_id?: string;
      /** Children */
      children?: (components["schemas"]["HrDocumentRead"])[];
      /** Reg Number */
      reg_number?: string;
    };
    /** HrDocumentSign */
    HrDocumentSign: {
      /** Comment */
      comment?: string;
      /** Is Signed */
      is_signed: boolean;
    };
    /** HrDocumentSignEcp */
    HrDocumentSignEcp: {
      /** Comment */
      comment?: string;
      /** Is Signed */
      is_signed: boolean;
      /** Certificate Blob */
      certificate_blob: string;
    };
    /** HrDocumentSignEcpWithIds */
    HrDocumentSignEcpWithIds: {
      /** Comment */
      comment?: string;
      /** Is Signed */
      is_signed: boolean;
      /** Certificate Blob */
      certificate_blob: string;
      /** Document Ids */
      document_ids: (string)[];
    };
    /** HrDocumentStatusRead */
    HrDocumentStatusRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** HrDocumentStepCreate */
    HrDocumentStepCreate: {
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /** Staff Function Id */
      staff_function_id: string;
      /** Is Direct Supervisor */
      is_direct_supervisor?: boolean;
      /** Category */
      category?: number;
    };
    /** HrDocumentStepRead */
    HrDocumentStepRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Hr Document Template Id */
      hr_document_template_id?: string;
      /** Staff Function Id */
      staff_function_id?: string;
      /** Is Direct Supervisor */
      is_direct_supervisor?: boolean;
      /** Category */
      category?: number;
      staff_function?: components["schemas"]["DocumentStaffFunctionRead"];
      /** Jurisdiction Id */
      jurisdiction_id?: string;
      jurisdiction?: components["schemas"]["JurisdictionRead"];
    };
    /** HrDocumentStepUpdate */
    HrDocumentStepUpdate: {
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /** Staff Function Id */
      staff_function_id: string;
      /** Is Direct Supervisor */
      is_direct_supervisor?: boolean;
      /** Category */
      category?: number;
    };
    /** HrDocumentTemplateCreate */
    HrDocumentTemplateCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Path */
      path?: string;
      /** Pathkz */
      pathKZ: string;
      subject_type?: components["schemas"]["SubjectType"];
      /** Maintainer Id */
      maintainer_id?: string;
      /** Properties */
      properties: {
        [key: string]: Record<string, never> | undefined;
      };
      description?: components["schemas"]["NamedModel"];
      /** Actions */
      actions: {
        [key: string]: (unknown)[] | undefined;
      };
      /** Is Visible */
      is_visible: boolean;
      /**
       * Is Due Date Required
       * @default false
       */
      is_due_date_required?: boolean;
      /**
       * Is Initial Comment Required
       * @default false
       */
      is_initial_comment_required?: boolean;
      /**
       * Is Draft
       * @default false
       */
      is_draft?: boolean;
    };
    /** HrDocumentTemplatePaginationRead */
    HrDocumentTemplatePaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["HrDocumentTemplateRead"])[];
    };
    /** HrDocumentTemplateRead */
    HrDocumentTemplateRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Path */
      path?: string;
      /** Pathkz */
      pathKZ?: string;
      subject_type?: components["schemas"]["SubjectType"];
      /** Maintainer Id */
      maintainer_id?: string;
      /** Properties */
      properties?: Record<string, never>;
      description?: components["schemas"]["NamedModel"];
      /** Actions */
      actions?: Record<string, never>;
      /** Is Visible */
      is_visible?: boolean;
      /**
       * Is Due Date Required
       * @default false
       */
      is_due_date_required?: boolean;
      /**
       * Is Initial Comment Required
       * @default false
       */
      is_initial_comment_required?: boolean;
      /** Is Draft */
      is_draft?: boolean;
      /** Is Active */
      is_active?: boolean;
    };
    /** HrDocumentTemplateUpdate */
    HrDocumentTemplateUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Path */
      path?: string;
      /** Pathkz */
      pathKZ: string;
      subject_type?: components["schemas"]["SubjectType"];
      /** Maintainer Id */
      maintainer_id?: string;
      /** Properties */
      properties: {
        [key: string]: Record<string, never> | undefined;
      };
      description?: components["schemas"]["NamedModel"];
      /** Actions */
      actions: {
        [key: string]: (unknown)[] | undefined;
      };
      /** Is Visible */
      is_visible: boolean;
      /**
       * Is Due Date Required
       * @default false
       */
      is_due_date_required?: boolean;
      /**
       * Is Initial Comment Required
       * @default false
       */
      is_initial_comment_required?: boolean;
      /** Is Draft */
      is_draft?: boolean;
      /** Is Active */
      is_active?: boolean;
    };
    /** HrDocumentUpdate */
    HrDocumentUpdate: {
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /**
       * Due Date
       * Format: date-time
       */
      due_date?: string;
      /** Parent Id */
      parent_id?: string | null;
      /** Properties */
      properties?: Record<string, never>;
      /** Initial Comment */
      initial_comment?: string;
      /** User Ids */
      user_ids: (string)[];
      /** Status Id */
      status_id: string;
    };
    /** HrVacancyCandidateRead */
    HrVacancyCandidateRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** User Id */
      user_id?: string;
      /** Hr Vacancy Id */
      hr_vacancy_id?: string;
      user?: components["schemas"]["schemas__user__UserRead"];
    };
    /** HrVacancyCreate */
    HrVacancyCreate: {
      /** Staff Unit Id */
      staff_unit_id: string;
      /** Is Active */
      is_active: boolean;
      /** Hr Vacancy Requirements Ids */
      hr_vacancy_requirements_ids?: (string)[];
    };
    /** HrVacancyRequirementsCreate */
    HrVacancyRequirementsCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** HrVacancyRequirementsRead */
    HrVacancyRequirementsRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** HrVacancyRequirementsUpdate */
    HrVacancyRequirementsUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** HrVacancyUpdate */
    HrVacancyUpdate: {
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Is Active */
      is_active?: boolean;
      /** Archive Staff Unit Id */
      archive_staff_unit_id?: string;
      /** Hr Vacancy Requirements Ids */
      hr_vacancy_requirements_ids?: (string)[];
    };
    /** IdentificationCardCreate */
    IdentificationCardCreate: {
      /** Document Number */
      document_number: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue: string;
      /**
       * Date To
       * Format: date
       */
      date_to: string;
      /** Issued By */
      issued_by: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** IdentificationCardRead */
    IdentificationCardRead: {
      /** Document Number */
      document_number?: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** Issued By */
      issued_by?: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date
       */
      updated_at?: string;
    };
    /** IdentificationCardUpdate */
    IdentificationCardUpdate: {
      /** Document Number */
      document_number?: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** Issued By */
      issued_by?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
    };
    /** InstitutionCreate */
    InstitutionCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** InstitutionDegreeTypeCreate */
    InstitutionDegreeTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** InstitutionDegreeTypeRead */
    InstitutionDegreeTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** InstitutionDegreeTypeReadPagination */
    InstitutionDegreeTypeReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["InstitutionDegreeTypeRead"])[];
    };
    /** InstitutionDegreeTypeUpdate */
    InstitutionDegreeTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** InstitutionRead */
    InstitutionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** InstitutionReadPagination */
    InstitutionReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["InstitutionRead"])[];
    };
    /** InstitutionUpdate */
    InstitutionUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** JoinRecordsBody */
    JoinRecordsBody: {
      /** Correct Id */
      correct_id: string;
      /** Ids To Change */
      ids_to_change: (string)[];
    };
    /** JurisdictionRead */
    JurisdictionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** LanguageCreate */
    LanguageCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /**
     * LanguageEnum
     * @description An enumeration.
     * @enum {string}
     */
    LanguageEnum: "ru" | "kz";
    /** LanguageProficiencyCreate */
    LanguageProficiencyCreate: {
      /** Level */
      level: number;
      /** Profile Id */
      profile_id?: string;
      /** Language Id */
      language_id?: string;
      /** Document Link */
      document_link?: string;
    };
    /** LanguageProficiencyRead */
    LanguageProficiencyRead: {
      /** Level */
      level: number;
      /** Profile Id */
      profile_id?: string;
      /** Language Id */
      language_id?: string;
      /** Document Link */
      document_link?: string;
      /** Id */
      id: string;
      language?: components["schemas"]["LanguageRead"];
    };
    /** LanguageProficiencyUpdate */
    LanguageProficiencyUpdate: {
      /** Level */
      level: number;
      /** Profile Id */
      profile_id?: string;
      /** Language Id */
      language_id?: string;
      /** Document Link */
      document_link?: string;
    };
    /** LanguageRead */
    LanguageRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** LanguageReadPagination */
    LanguageReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["LanguageRead"])[];
    };
    /** LanguageUpdate */
    LanguageUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** LiberationCreate */
    LiberationCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** LiberationRead */
    LiberationRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** LiberationReadPagination */
    LiberationReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["LiberationRead"])[];
    };
    /** LiberationUpdate */
    LiberationUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** LoginForm */
    LoginForm: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
    };
    /** MatreshkaUserRead */
    MatreshkaUserRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Icon */
      icon?: string | null;
      /** Supervised By */
      supervised_by?: string;
      /** Is Military */
      is_military?: boolean;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Id Number */
      id_number?: string;
      /** Personal Id */
      personal_id?: string;
    };
    /** MedicalProfileCreate */
    MedicalProfileCreate: {
      /** Profile Id */
      profile_id: string;
    };
    /** MedicalProfileRead */
    MedicalProfileRead: {
      /** Profile Id */
      profile_id: string;
      /** Id */
      id?: string;
      /** General User Info */
      general_user_info?: (components["schemas"]["GeneralUserInformationRead"])[];
      /** Dispensary Registrations */
      dispensary_registrations?: (components["schemas"]["DispensaryRegistrationRead"])[];
      /** Anthropometric Datas */
      anthropometric_datas?: (components["schemas"]["AnthropometricDataRead"])[];
      /** Hospital Datas */
      hospital_datas?: (components["schemas"]["HospitalDataRead"])[];
      /** User Liberations */
      user_liberations?: (components["schemas"]["UserLiberationRead"])[];
    };
    /** MedicalProfileUpdate */
    MedicalProfileUpdate: {
      /** Profile Id */
      profile_id: string;
    };
    /** MilitaryUnitCreate */
    MilitaryUnitCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** MilitaryUnitRead */
    MilitaryUnitRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** MilitaryUnitReadPagination */
    MilitaryUnitReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["MilitaryUnitRead"])[];
    };
    /** MilitaryUnitUpdate */
    MilitaryUnitUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** NamedModel */
    NamedModel: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** NewArchiveServiceStaffFunctionCreate */
    NewArchiveServiceStaffFunctionCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Hours Per Week */
      hours_per_week: number;
      /** Type Id */
      type_id?: string;
    };
    /** NewArchiveServiceStaffFunctionUpdate */
    NewArchiveServiceStaffFunctionUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Hours Per Week */
      hours_per_week: number;
      /** Type Id */
      type_id?: string;
    };
    /** NewArchiveStaffDivisionCreate */
    NewArchiveStaffDivisionCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Staff List Id */
      staff_list_id: string;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
    };
    /** NewArchiveStaffDivisionUpdate */
    NewArchiveStaffDivisionUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Staff List Id */
      staff_list_id: string;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
    };
    /** NewArchiveStaffFunctionCreate */
    NewArchiveStaffFunctionCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Hours Per Week */
      hours_per_week: number;
    };
    /** NewArchiveStaffFunctionUpdate */
    NewArchiveStaffFunctionUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Hours Per Week */
      hours_per_week: number;
    };
    /** NewArchiveStaffUnitCreate */
    NewArchiveStaffUnitCreate: {
      /** Position Id */
      position_id: string;
      /** Staff Division Id */
      staff_division_id: string;
      /** User Id */
      user_id?: string | null;
      /** Actual User Id */
      actual_user_id?: string | null;
      /** User Replacing Id */
      user_replacing_id?: string | null;
      /** Requirements */
      requirements?: unknown;
      /** Curator Of Id */
      curator_of_id?: string | null;
    };
    /** NewArchiveStaffUnitUpdate */
    NewArchiveStaffUnitUpdate: {
      /** Position Id */
      position_id: string;
      /** Staff Division Id */
      staff_division_id: string;
      /** User Id */
      user_id?: string | null;
      /** Actual User Id */
      actual_user_id?: string | null;
      /** User Replacing Id */
      user_replacing_id?: string | null;
      /** Requirements */
      requirements?: unknown;
      /** Curator Of Id */
      curator_of_id?: string | null;
    };
    /** NewServiceArchiveStaffFunctionTypeCreate */
    NewServiceArchiveStaffFunctionTypeCreate: {
      /** Namekz */
      nameKZ?: string | null;
      /** Name */
      name: string;
    };
    /** NewServiceArchiveStaffFunctionTypeUpdate */
    NewServiceArchiveStaffFunctionTypeUpdate: {
      /** Namekz */
      nameKZ?: string | null;
      /** Name */
      name: string;
    };
    /** NotificationCreate */
    NotificationCreate: {
      /** Message */
      message: string;
      /** Sender Type */
      sender_type: string;
      /** Receiver Id */
      receiver_id: string;
    };
    /** NotificationRead */
    NotificationRead: {
      /** Message */
      message?: string;
      /** Sender Type */
      sender_type?: string;
      /** Receiver Id */
      receiver_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
    };
    /** NotificationReadPagination */
    NotificationReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["NotificationRead"])[];
    };
    /** OathRead */
    OathRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Date
       * Format: date-time
       */
      date?: string;
      /** Military Id */
      military_id?: string;
      /** Military Name */
      military_name?: string;
      /** Military Namekz */
      military_nameKZ?: string;
    };
    /** OptionRead */
    OptionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Text */
      text?: string;
      /** Textkz */
      textKZ?: string | null;
      /** Question Id */
      question_id?: string;
      /** Score */
      score?: number;
      /** Diagram Description */
      diagram_description?: string;
      /** Diagram Descriptionkz */
      diagram_descriptionKZ?: string;
      /** Report Description */
      report_description?: string;
      /** Report Descriptionkz */
      report_descriptionKZ?: string;
    };
    /** OptionReadPagination */
    OptionReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["OptionRead"])[];
    };
    /** OptionUpdate */
    OptionUpdate: {
      /** Text */
      text?: string;
      /** Textkz */
      textKZ?: string | null;
      /** Question Id */
      question_id?: string;
      /** Score */
      score?: number;
      /** Diagram Description */
      diagram_description?: string;
      /** Diagram Descriptionkz */
      diagram_descriptionKZ?: string;
      /** Report Description */
      report_description?: string;
      /** Report Descriptionkz */
      report_descriptionKZ?: string;
    };
    /** PassportCreate */
    PassportCreate: {
      /** Document Number */
      document_number: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue: string;
      /**
       * Date To
       * Format: date
       */
      date_to: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
      /** Issued By */
      issued_by: string;
    };
    /** PassportRead */
    PassportRead: {
      /** Document Number */
      document_number?: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
      /** Issued By */
      issued_by?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date
       */
      updated_at?: string;
    };
    /** PassportUpdate */
    PassportUpdate: {
      /** Document Number */
      document_number?: string;
      /**
       * Date Of Issue
       * Format: date
       */
      date_of_issue?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
      /** Issued By */
      issued_by?: string;
    };
    /** PenaltyCreate */
    PenaltyCreate: {
      /** User Id */
      user_id: string;
      /** Type Id */
      type_id: string;
    };
    /** PenaltyPaginationRead */
    PenaltyPaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["schemas__penalty__PenaltyRead"])[];
    };
    /** PenaltyTypeCreate */
    PenaltyTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** PenaltyTypePaginationRead */
    PenaltyTypePaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["PenaltyTypeRead"])[];
    };
    /** PenaltyTypeRead */
    PenaltyTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** PenaltyTypeUpdate */
    PenaltyTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** PenaltyUpdate */
    PenaltyUpdate: {
      /** User Id */
      user_id?: string;
      /** Type Id */
      type_id?: string;
    };
    /** PermissionCreate */
    PermissionCreate: {
      /** Type Id */
      type_id: string;
      /** User Id */
      user_id: string;
    };
    /** PermissionPaginationRead */
    PermissionPaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["PermissionRead"])[];
    };
    /** PermissionRead */
    PermissionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Type Id */
      type_id: string;
      /** User Id */
      user_id: string;
      type: components["schemas"]["PermissionTypeRead"];
      user: components["schemas"]["schemas__permission__UserShortRead"];
    };
    /** PermissionTypeRead */
    PermissionTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
    };
    /** PermissionUpdate */
    PermissionUpdate: {
      /** Type Id */
      type_id: string;
      /** User Id */
      user_id: string;
    };
    /** PersonalProfileCreate */
    PersonalProfileCreate: {
      /** Profile Id */
      profile_id: string;
    };
    /** PersonalProfileRead */
    PersonalProfileRead: {
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date
       */
      updated_at?: string;
      profile?: components["schemas"]["ProfileRead"];
      identification_card?: components["schemas"]["IdentificationCardRead"];
      biographic_info?: components["schemas"]["BiographicInfoRead"];
      driving_license?: components["schemas"]["DrivingLicenseRead"];
      passport?: components["schemas"]["PassportRead"];
      /** Sport Achievements */
      sport_achievements?: (components["schemas"]["SportAchievementRead"])[];
      /** Sport Degrees */
      sport_degrees?: (components["schemas"]["SportDegreeRead"])[];
      /** Tax Declarations */
      tax_declarations?: (components["schemas"]["TaxDeclarationRead"])[];
      /** User Financial Infos */
      user_financial_infos?: (components["schemas"]["UserFinancialInfoRead"])[];
    };
    /** PersonnalReserveCreate */
    PersonnalReserveCreate: {
      /** Reserve */
      reserve?: string;
      /**
       * Reserve Date
       * Format: date
       */
      reserve_date?: string;
      /** User Id */
      user_id?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
    };
    /** PersonnalReserveRead */
    PersonnalReserveRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      reserve?: components["schemas"]["Enum"];
      /**
       * Reserve Date
       * Format: date
       */
      reserve_date?: string;
      /** User Id */
      user_id?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
    };
    /** PersonnalReserveUpdate */
    PersonnalReserveUpdate: {
      /** Reserve */
      reserve?: string;
      /**
       * Reserve Date
       * Format: date
       */
      reserve_date?: string;
      /** User Id */
      user_id?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
    };
    /** PlaceCreate */
    PlaceCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** PlaceRead */
    PlaceRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Id */
      id?: string;
    };
    /** PlaceUpdate */
    PlaceUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** PolygraphCheckCreate */
    PolygraphCheckCreate: {
      /** Number */
      number: string;
      /** Issued By */
      issued_by: string;
      /**
       * Date Of Issue
       * Format: date-time
       */
      date_of_issue: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
    };
    /** PolygraphCheckRead */
    PolygraphCheckRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Number */
      number: string;
      /** Issued By */
      issued_by: string;
      /**
       * Date Of Issue
       * Format: date-time
       */
      date_of_issue: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** PolygraphCheckUpdate */
    PolygraphCheckUpdate: {
      /** Number */
      number: string;
      /** Issued By */
      issued_by: string;
      /**
       * Date Of Issue
       * Format: date-time
       */
      date_of_issue: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
    };
    /** PositionCreate */
    PositionCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Category Code */
      category_code: string;
      /** Form */
      form: string;
      /** Max Rank Id */
      max_rank_id?: string;
      /** Type Id */
      type_id?: string;
      /** Position Order */
      position_order?: number;
    };
    /** PositionPaginationRead */
    PositionPaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["PositionRead"])[];
    };
    /** PositionRead */
    PositionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Category Code */
      category_code?: string;
      /** Form */
      form?: string;
      /** Max Rank Id */
      max_rank_id?: string;
      /** Position Order */
      position_order?: number;
      max_rank?: components["schemas"]["RankRead"];
    };
    /** PositionUpdate */
    PositionUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Category Code */
      category_code: string;
      /** Form */
      form: string;
      /** Max Rank Id */
      max_rank_id?: string;
      /** Position Order */
      position_order?: number;
    };
    /** PrivelegeEmergencyCreate */
    PrivelegeEmergencyCreate: {
      /** Form */
      form?: string;
      /**
       * Date From
       * Format: date
       */
      date_from?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** User Id */
      user_id?: string;
    };
    /** PrivelegeEmergencyRead */
    PrivelegeEmergencyRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      form?: components["schemas"]["Enum"];
      /**
       * Date From
       * Format: date
       */
      date_from?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** User Id */
      user_id?: string;
    };
    /** PrivelegeEmergencyUpdate */
    PrivelegeEmergencyUpdate: {
      /** Form */
      form?: string;
      /**
       * Date From
       * Format: date
       */
      date_from?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** User Id */
      user_id?: string;
    };
    /** ProfileRead */
    ProfileRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** User Id */
      user_id?: string;
      user?: components["schemas"]["schemas__user__UserRead"];
    };
    /** ProfileUpdate */
    ProfileUpdate: {
      /** User Id */
      user_id: string;
    };
    /** PropertiesCreate */
    PropertiesCreate: {
      /** Type Id */
      type_id: string;
      /**
       * Purchase Date
       * Format: date-time
       */
      purchase_date: string;
      /** Purchase Type */
      purchase_type: string;
      /** Purchase Typekz */
      purchase_typeKZ: string;
      /** Address */
      address: string;
      /** Profile Id */
      profile_id: string;
      /** Document Link */
      document_link?: string;
    };
    /** PropertiesRead */
    PropertiesRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Type Id */
      type_id: string;
      /**
       * Purchase Date
       * Format: date-time
       */
      purchase_date: string;
      /** Purchase Type */
      purchase_type: string;
      /** Purchase Typekz */
      purchase_typeKZ: string;
      /** Address */
      address: string;
      /** Profile Id */
      profile_id: string;
      /** Document Link */
      document_link?: string;
      type?: components["schemas"]["PropertyTypeRead"];
    };
    /** PropertiesUpdate */
    PropertiesUpdate: {
      /** Type Id */
      type_id: string;
      /**
       * Purchase Date
       * Format: date-time
       */
      purchase_date: string;
      /** Purchase Type */
      purchase_type: string;
      /** Purchase Typekz */
      purchase_typeKZ: string;
      /** Address */
      address: string;
      /** Profile Id */
      profile_id: string;
      /** Document Link */
      document_link?: string;
    };
    /** PropertyTypeCreate */
    PropertyTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** PropertyTypePaginationRead */
    PropertyTypePaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["PropertyTypeRead"])[];
    };
    /** PropertyTypeRead */
    PropertyTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** PropertyTypeUpdate */
    PropertyTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** PsychologicalCheckCreate */
    PsychologicalCheckCreate: {
      /** Issued By */
      issued_by: string;
      /**
       * Date Of Issue
       * Format: date-time
       */
      date_of_issue: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
      /** Document Number */
      document_number?: string;
    };
    /** PsychologicalCheckRead */
    PsychologicalCheckRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Issued By */
      issued_by: string;
      /**
       * Date Of Issue
       * Format: date-time
       */
      date_of_issue: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
      /** Document Number */
      document_number?: string;
    };
    /** PsychologicalCheckUpdate */
    PsychologicalCheckUpdate: {
      /** Issued By */
      issued_by: string;
      /**
       * Date Of Issue
       * Format: date-time
       */
      date_of_issue: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
      /** Document Number */
      document_number?: string;
    };
    /** QrRead */
    QrRead: {
      step?: components["schemas"]["HrDocumentStepRead"];
      user?: components["schemas"]["schemas__hr_document__UserShortRead"];
      /**
       * Signed At
       * Format: date-time
       */
      signed_at?: string;
      /** Qr Base64 */
      qr_base64?: string;
    };
    /** QuestionCreateList */
    QuestionCreateList: {
      /** Text */
      text: string;
      /** Textkz */
      textKZ?: string | null;
      /** Is Required */
      is_required?: boolean;
      question_type: components["schemas"]["QuestionTypeEnum"];
      /** Survey Id */
      survey_id?: string;
      /** Score */
      score?: number;
      /** Options */
      options?: (components["schemas"]["schemas__survey__question__OptionCreate"])[];
    };
    /** QuestionRead */
    QuestionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Text */
      text: string;
      /** Textkz */
      textKZ?: string | null;
      /** Is Required */
      is_required?: boolean;
      question_type?: components["schemas"]["QuestionTypeEnum"];
      /** Survey Id */
      survey_id?: string;
      /** Score */
      score?: number;
      /** Options */
      options?: (components["schemas"]["OptionRead"])[];
    };
    /** QuestionReadPagination */
    QuestionReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["QuestionRead"])[];
    };
    /**
     * QuestionTypeEnum
     * @description An enumeration.
     * @enum {string}
     */
    QuestionTypeEnum: "Текст" | "Один из списка" | "Несколько из списка";
    /** QuestionUpdate */
    QuestionUpdate: {
      /** Text */
      text?: string;
      /** Textkz */
      textKZ?: string | null;
      /** Is Required */
      is_required?: boolean;
      /** Question Type */
      question_type?: string;
      /** Survey Id */
      survey_id?: string;
      /** Score */
      score?: number;
    };
    /** RankCreate */
    RankCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Rank Order */
      rank_order: number;
      /**
       * Military Url
       * Format: uri
       */
      military_url?: string;
      /**
       * Employee Url
       * Format: uri
       */
      employee_url?: string;
    };
    /** RankPaginationRead */
    RankPaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["RankRead"])[];
    };
    /** RankRead */
    RankRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Rank Order */
      rank_order?: number;
      /** Military Url */
      military_url?: string;
      /** Employee Url */
      employee_url?: string;
    };
    /** RankServiceDetailRead */
    RankServiceDetailRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Rank Assigned By */
      rank_assigned_by?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Style */
      document_style?: string;
      /** Rank Id */
      rank_id?: string;
      /** Early Promotion */
      early_promotion?: boolean;
    };
    /** RankUpdate */
    RankUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Rank Order */
      rank_order?: number;
      /**
       * Military Url
       * Format: uri
       */
      military_url?: string;
      /**
       * Employee Url
       * Format: uri
       */
      employee_url?: string;
    };
    /** RecommenderUserCreate */
    RecommenderUserCreate: {
      /** Document Link */
      document_link?: string;
      /** Recommendant */
      recommendant?: string;
      /** Researcher */
      researcher?: string;
      /** User By Id */
      user_by_id?: string;
      /** Researcher Id */
      researcher_id?: string;
      /** User Id */
      user_id: string;
    };
    /** RecommenderUserRead */
    RecommenderUserRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Document Link */
      document_link?: string;
      /** Recommendant */
      recommendant?: string;
      /** Researcher */
      researcher?: string;
      /** User By Id */
      user_by_id?: string;
      /** Researcher Id */
      researcher_id?: string;
      /** User Id */
      user_id: string;
    };
    /** RecommenderUserUpdate */
    RecommenderUserUpdate: {
      /** Document Link */
      document_link?: string;
      /** Recommendant */
      recommendant?: string;
      /** Researcher */
      researcher?: string;
      /** User By Id */
      user_by_id?: string;
      /** Researcher Id */
      researcher_id?: string;
      /** User Id */
      user_id: string;
    };
    /** RegistrationForm */
    RegistrationForm: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
      /** Re Password */
      re_password: string;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /** Father Name */
      father_name?: string;
      /** Icon */
      icon?: string;
      /** Call Sign */
      call_sign: string;
      /** Id Number */
      id_number: string;
      /** Phone Number */
      phone_number: string;
      /** Address */
      address: string;
      /** Rank Id */
      rank_id?: string;
      /** Staff Unit Id */
      staff_unit_id: string;
      /** Actual Staff Unit Id */
      actual_staff_unit_id: string;
      /** Cabinet */
      cabinet?: string;
      /** Service Phone Number */
      service_phone_number?: string;
      /** Is Military */
      is_military?: boolean;
      /** Personal Id */
      personal_id?: string;
      /** Iin */
      iin?: string;
      /**
       * Date Birth
       * Format: date
       */
      date_birth: string;
    };
    /** ScheduleDayCreate */
    ScheduleDayCreate: {
      /** Day Id */
      day_id?: string;
      /**
       * Start Time
       * Format: time
       */
      start_time?: string;
      /**
       * End Time
       * Format: time
       */
      end_time?: string;
      /** Month Id */
      month_id?: string;
      /** Activity Month Id */
      activity_month_id?: string;
    };
    /** ScheduleDayCreateWithString */
    ScheduleDayCreateWithString: {
      /** Day */
      day?: string;
      /**
       * Start Time
       * Format: time
       */
      start_time?: string;
      /**
       * End Time
       * Format: time
       */
      end_time?: string;
    };
    /** ScheduleDayRead */
    ScheduleDayRead: {
      /** Day Id */
      day_id?: string;
      /** Start Time */
      start_time?: string;
      /** End Time */
      end_time?: string;
      /** Month Id */
      month_id?: string;
      /** Activity Month Id */
      activity_month_id?: string;
      /** Id */
      id?: string;
      day?: components["schemas"]["DayRead"];
      /** Activity Dates */
      activity_dates?: (components["schemas"]["ActivityDateRead"])[];
      activity_month?: components["schemas"]["schemas__bsp__schedule_day__MonthRead"];
    };
    /** ScheduleDayUpdate */
    ScheduleDayUpdate: {
      /** Day Id */
      day_id?: string;
      /**
       * Start Time
       * Format: time
       */
      start_time?: string;
      /**
       * End Time
       * Format: time
       */
      end_time?: string;
      /** Month Id */
      month_id?: string;
      /** Activity Month Id */
      activity_month_id?: string;
    };
    /** ScheduleMonthCreateWithDay */
    ScheduleMonthCreateWithDay: {
      /**
       * Start Date
       * Format: date
       */
      start_date: string;
      /**
       * End Date
       * Format: date
       */
      end_date: string;
      /** Place Id */
      place_id: string;
      /** Schedule Id */
      schedule_id: string;
      /** Days */
      days: (components["schemas"]["ScheduleDayCreateWithString"])[];
      /** Instructor Ids */
      instructor_ids?: (string)[];
    };
    /** ScheduleMonthRead */
    ScheduleMonthRead: {
      /**
       * Start Date
       * Format: date
       */
      start_date: string;
      /**
       * End Date
       * Format: date
       */
      end_date: string;
      /** Place Id */
      place_id: string;
      /** Schedule Id */
      schedule_id: string;
      /** Id */
      id?: string;
      /** Instructors */
      instructors?: (components["schemas"]["UserShortReadStatus"])[];
      place?: components["schemas"]["PlaceRead"];
      /** Days */
      days?: (components["schemas"]["ScheduleDayRead"])[];
      activity?: components["schemas"]["ActivityRead"];
      /** Staff Divisions */
      staff_divisions?: (components["schemas"]["StaffDivisionReadWithoutStaffUnit"])[];
      /** Activity Months */
      activity_months?: (components["schemas"]["schemas__bsp__schedule_month__MonthRead"])[];
      /**
       * Nearest Date
       * Format: date
       */
      nearest_date?: string;
    };
    /** ScheduleMonthUpdate */
    ScheduleMonthUpdate: {
      /**
       * Start Date
       * Format: date
       */
      start_date: string;
      /**
       * End Date
       * Format: date
       */
      end_date: string;
      /** Place Id */
      place_id: string;
      /** Schedule Id */
      schedule_id: string;
    };
    /** ScheduleYearCreateString */
    ScheduleYearCreateString: {
      /** Is Exam Required */
      is_exam_required?: boolean;
      /** Retry Count */
      retry_count?: number;
      /** Plan Id */
      plan_id?: string;
      /** Activity Id */
      activity_id?: string;
      /** Activity Months */
      activity_months?: (string)[];
      /** Exam Months */
      exam_months?: (string)[];
      /** Staff Division Ids */
      staff_division_ids: (string)[];
    };
    /** ScheduleYearRead */
    ScheduleYearRead: {
      /** Is Exam Required */
      is_exam_required?: boolean;
      /** Retry Count */
      retry_count?: number;
      /** Plan Id */
      plan_id?: string;
      /** Activity Id */
      activity_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /** Staff Divisions */
      staff_divisions?: (components["schemas"]["StaffDivisionReadWithoutStaffUnit"])[];
      activity?: components["schemas"]["ActivityRead"];
      /** Activity Months */
      activity_months?: (components["schemas"]["schemas__bsp__schedule_year__MonthRead"])[];
      /** Exam Months */
      exam_months?: (components["schemas"]["schemas__bsp__schedule_year__MonthRead"])[];
      /** Months */
      months?: (components["schemas"]["ScheduleMonthRead"])[];
      /** Exams */
      exams?: (components["schemas"]["ExamScheduleRead"])[];
    };
    /** ScheduleYearReadPagination */
    ScheduleYearReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["ScheduleYearRead"])[];
    };
    /** ScheduleYearUpdate */
    ScheduleYearUpdate: {
      /** Is Exam Required */
      is_exam_required?: boolean;
      /** Retry Count */
      retry_count?: number;
      /** Plan Id */
      plan_id?: string;
      /** Activity Id */
      activity_id?: string;
    };
    /** ScienceCreate */
    ScienceCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** ScienceRead */
    ScienceRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** ScienceReadPagination */
    ScienceReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["ScienceRead"])[];
    };
    /** ScienceUpdate */
    ScienceUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** Search */
    Search: {
      /** User Id */
      user_id?: string;
      /** Name */
      name?: string;
    };
    /** SearchType */
    SearchType: {
      /** Search Type */
      search_type: string;
      /** Name */
      name: string;
    };
    /** SearchTypeListCreate */
    SearchTypeListCreate: {
      /** Search Types */
      search_types: (components["schemas"]["SearchType"])[];
    };
    /** SearchTypeListRead */
    SearchTypeListRead: {
      /** Users */
      users: (components["schemas"]["Search"])[];
    };
    /** ServiceArchiveStaffFunctionTypeRead */
    ServiceArchiveStaffFunctionTypeRead: {
      /** Namekz */
      nameKZ?: string | null;
      /** Name */
      name: string;
      /** Id */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** ServiceHousingCreate */
    ServiceHousingCreate: {
      /** Type Id */
      type_id: string;
      /** Address */
      address: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /**
       * Issue Date
       * Format: date-time
       */
      issue_date: string;
      /** Profile Id */
      profile_id: string;
    };
    /** ServiceHousingRead */
    ServiceHousingRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Type Id */
      type_id?: string;
      /** Address */
      address?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /**
       * Issue Date
       * Format: date-time
       */
      issue_date?: string;
      /** Profile Id */
      profile_id: string;
      type?: components["schemas"]["PropertyTypeRead"];
    };
    /** ServiceHousingUpdate */
    ServiceHousingUpdate: {
      /** Type Id */
      type_id: string;
      /** Address */
      address: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /**
       * Issue Date
       * Format: date-time
       */
      issue_date: string;
      /** Profile Id */
      profile_id: string;
    };
    /** ServiceIDCreate */
    ServiceIDCreate: {
      /** Number */
      number?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** Token Status */
      token_status?: string;
      /** Id Status */
      id_status?: string;
      /** User Id */
      user_id: string;
    };
    /** ServiceIDRead */
    ServiceIDRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Number */
      number?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** Token Status */
      token_status?: string;
      /** Id Status */
      id_status?: string;
      /** User Id */
      user_id: string;
    };
    /** ServiceIDUpdate */
    ServiceIDUpdate: {
      /** Number */
      number?: string;
      /**
       * Date To
       * Format: date
       */
      date_to?: string;
      /** Token Status */
      token_status?: string;
      /** Id Status */
      id_status?: string;
      /** User Id */
      user_id: string;
    };
    /** ServiceIdInfoRead */
    ServiceIdInfoRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Number */
      number?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      token_status?: components["schemas"]["Enum"];
      id_status?: components["schemas"]["Enum"];
    };
    /** ServiceStaffFunctionCreate */
    ServiceStaffFunctionCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Hours Per Week */
      hours_per_week: number;
      /** Type Id */
      type_id?: string | null;
    };
    /** ServiceStaffFunctionRead */
    ServiceStaffFunctionRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Hours Per Week */
      hours_per_week?: number | null;
      /** Type Id */
      type_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Discriminator */
      discriminator?: string | null;
      type?: components["schemas"]["ServiceStaffFunctionTypeRead"];
    };
    /** ServiceStaffFunctionTypeCreate */
    ServiceStaffFunctionTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** ServiceStaffFunctionTypeRead */
    ServiceStaffFunctionTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** ServiceStaffFunctionTypeUpdate */
    ServiceStaffFunctionTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** ServiceStaffFunctionUpdate */
    ServiceStaffFunctionUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Hours Per Week */
      hours_per_week: number;
      /** Type Id */
      type_id?: string | null;
    };
    /** ShortStaffUnitDivisionRead */
    ShortStaffUnitDivisionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Parent Group Id */
      parent_group_id?: string | null;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
    };
    /** ShortUserStaffUnitRead */
    ShortUserStaffUnitRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Staff Division Id */
      staff_division_id?: string;
      staff_division?: components["schemas"]["ShortStaffUnitDivisionRead"];
      /** Position Id */
      position_id?: string;
      position?: components["schemas"]["PositionRead"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
    };
    /** SpecialCheckCreate */
    SpecialCheckCreate: {
      /** Number */
      number: string;
      /** Issued By */
      issued_by?: string;
      /**
       * Date Of Issue
       * Format: date-time
       */
      date_of_issue: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** SpecialCheckRead */
    SpecialCheckRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Number */
      number: string;
      /** Issued By */
      issued_by?: string;
      /**
       * Date Of Issue
       * Format: date-time
       */
      date_of_issue: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** SpecialCheckUpdate */
    SpecialCheckUpdate: {
      /** Number */
      number: string;
      /** Issued By */
      issued_by?: string;
      /**
       * Date Of Issue
       * Format: date-time
       */
      date_of_issue: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
      /** Id */
      id: string;
    };
    /** SpecialtyCreate */
    SpecialtyCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** SpecialtyRead */
    SpecialtyRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** SpecialtyReadPagination */
    SpecialtyReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["SpecialtyRead"])[];
    };
    /** SpecialtyUpdate */
    SpecialtyUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** SportAchievementCreate */
    SportAchievementCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date: string;
      /** Sport Type Id */
      sport_type_id: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** SportAchievementRead */
    SportAchievementRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date?: string;
      /** Sport Type Id */
      sport_type_id?: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
      sport_type?: components["schemas"]["SportTypeRead"];
    };
    /** SportAchievementUpdate */
    SportAchievementUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date: string;
      /** Sport Type Id */
      sport_type_id: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
    };
    /** SportDegreeCreate */
    SportDegreeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date: string;
      /** Sport Type Id */
      sport_type_id: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
      /** Sport Degree Type Id */
      sport_degree_type_id?: string;
    };
    /** SportDegreeRead */
    SportDegreeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date?: string;
      /** Sport Type Id */
      sport_type_id?: string;
      /** Document Link */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
      /** Sport Degree Type Id */
      sport_degree_type_id?: string;
      sport_type?: components["schemas"]["SportTypeRead"];
    };
    /** SportDegreeTypeCreate */
    SportDegreeTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** SportDegreeTypePaginationRead */
    SportDegreeTypePaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["SportDegreeTypeRead"])[];
    };
    /** SportDegreeTypeRead */
    SportDegreeTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** SportDegreeTypeUpdate */
    SportDegreeTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** SportDegreeUpdate */
    SportDegreeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /**
       * Assignment Date
       * Format: date
       */
      assignment_date: string;
      /** Sport Type Id */
      sport_type_id: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id: string;
      /** Sport Degree Type Id */
      sport_degree_type_id?: string;
    };
    /** SportTypeCreate */
    SportTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** SportTypePaginationRead */
    SportTypePaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["SportTypeRead"])[];
    };
    /** SportTypeRead */
    SportTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** SportTypeUpdate */
    SportTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** StaffDivisionChildRead */
    StaffDivisionChildRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      /** Children */
      children?: (unknown)[];
      /** Staff Units */
      staff_units?: (unknown)[];
      type?: components["schemas"]["StaffDivisionTypeRead"];
    };
    /** StaffDivisionChildReadMinimized */
    StaffDivisionChildReadMinimized: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      /** Children */
      children?: (unknown)[];
      type?: components["schemas"]["StaffDivisionTypeRead"];
    };
    /** StaffDivisionCreate */
    StaffDivisionCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      /** Description */
      description?: unknown;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
    };
    /** StaffDivisionMatreshkaStepChildRead */
    StaffDivisionMatreshkaStepChildRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      type?: components["schemas"]["StaffDivisionTypeRead"];
      /** Is Parent */
      is_parent?: boolean;
    };
    /** StaffDivisionMatreshkaStepRead */
    StaffDivisionMatreshkaStepRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Children */
      children?: (components["schemas"]["StaffDivisionMatreshkaStepChildRead"])[];
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      type?: components["schemas"]["StaffDivisionTypeRead"];
      /** Is Parent */
      is_parent?: boolean;
    };
    /** StaffDivisionNamedModel */
    StaffDivisionNamedModel: {
      /** Id */
      id?: string;
      /** Name */
      name: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** StaffDivisionRead */
    StaffDivisionRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      /** Children */
      children?: (components["schemas"]["StaffDivisionChildRead"])[];
      /** Staff Units */
      staff_units?: (components["schemas"]["schemas__staff_division__StaffUnitRead"])[];
      type?: components["schemas"]["StaffDivisionTypeRead"];
      /** Count Vacancies */
      count_vacancies?: number;
    };
    /** StaffDivisionReadMinimized */
    StaffDivisionReadMinimized: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      /** Children */
      children?: (components["schemas"]["StaffDivisionChildReadMinimized"])[];
      type?: components["schemas"]["StaffDivisionTypeRead"];
    };
    /** StaffDivisionReadWithoutStaffUnit */
    StaffDivisionReadWithoutStaffUnit: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      type?: components["schemas"]["StaffDivisionTypeRead"];
      /** Count Vacancies */
      count_vacancies?: number;
    };
    /** StaffDivisionStepChildRead */
    StaffDivisionStepChildRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      type?: components["schemas"]["StaffDivisionTypeRead"];
    };
    /** StaffDivisionStepRead */
    StaffDivisionStepRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
      /** Id */
      id?: string;
      /** Children */
      children?: (components["schemas"]["StaffDivisionStepChildRead"])[];
      /** Staff Units */
      staff_units?: (components["schemas"]["schemas__staff_division__StaffUnitRead"])[];
      type?: components["schemas"]["StaffDivisionTypeRead"];
    };
    /** StaffDivisionTypeRead */
    StaffDivisionTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** StaffDivisionUpdate */
    StaffDivisionUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      /** Description */
      description?: unknown;
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
    };
    /** StaffDivisionUpdateParentGroup */
    StaffDivisionUpdateParentGroup: {
      /** Parent Group Id */
      parent_group_id: string;
    };
    /** StaffFunctionRead */
    StaffFunctionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Is Active */
      is_active?: boolean | null;
      /** Hours Per Week */
      hours_per_week?: number | null;
      /** Discriminator */
      discriminator?: string | null;
    };
    /** StaffListApplyRead */
    StaffListApplyRead: {
      /** Task Id */
      task_id: string;
    };
    /** StaffListRead */
    StaffListRead:
    // {
    //   task_id: string
    // } |
    {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** User Id */
      user_id?: string | null;
      /** Document Signed By */
      document_signed_by?: string | null;
      /**
       * Document Signed At
       * Format: date
       */
      document_signed_at?: string | null;
      /** Changes Size */
      changes_size?: number | null;
      /** Rank */
      rank?: string | null;
      /** Document Number */
      document_number?: string | null;
      /** Document Link */
      document_link?: string | null;
    };
    /** StaffListStatusRead */
    StaffListStatusRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** User Id */
      user_id?: string;
      /** Id */
      id?: string;
      /** Status */
      status?: string | null;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Changes Size */
      changes_size?: number | null;
      /** User */
      user?: components["schemas"]["schemas__user__UserShortRead"] | null;
      /** Reg Number */
      reg_number?: string | null;
      /** Document Signed By */
      document_signed_by?: string | null;
      /**
       * Document Signed At
       * Format: date
       */
      document_signed_at?: string | null;
    };
    /** StaffListUpdate */
    StaffListUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** User Id */
      user_id?: string;
    };
    /** StaffListUserCreate */
    StaffListUserCreate: {
      /** Name */
      name: string;
    };
    /** StaffUnitCandidateRead */
    StaffUnitCandidateRead: {
      /** Id */
      id: string;
      /** Users */
      users?: (components["schemas"]["CandidateUserRead"])[];
    };
    /** StaffUnitCreate */
    StaffUnitCreate: {
      /** Position Id */
      position_id: string;
      /** Staff Division Id */
      staff_division_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Requirements */
      requirements?: (components["schemas"]["StaffUnitRequirements"])[] | null;
      /** Curator Of Id */
      curator_of_id?: string | null;
    };
    /** StaffUnitCreateWithPosition */
    StaffUnitCreateWithPosition: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Category Code */
      category_code: string;
      /** Form */
      form: string;
      /** Max Rank Id */
      max_rank_id?: string;
      /** Type Id */
      type_id?: string;
      /** Position Order */
      position_order?: number;
      /** Staff Division Id */
      staff_division_id: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Requirements */
      requirements?: (Record<string, never>)[] | null;
    };
    /** StaffUnitDivisionRead */
    StaffUnitDivisionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Parent Group Id */
      parent_group_id?: string | null;
      description?: components["schemas"]["NamedModel"];
      /** Is Combat Unit */
      is_combat_unit?: boolean | null;
      /** Leader Id */
      leader_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Type Id */
      type_id?: string | null;
      /** Staff Division Number */
      staff_division_number?: number | null;
    };
    /** StaffUnitFunctions */
    StaffUnitFunctions: {
      /** Staff Unit Id */
      staff_unit_id: string;
      /** Staff Function Ids */
      staff_function_ids: (string)[];
    };
    /** StaffUnitFunctionsByPosition */
    StaffUnitFunctionsByPosition: {
      /** Position */
      position: string;
      /** Staff Function Ids */
      staff_function_ids: (string)[];
    };
    /** StaffUnitHrVacancyRead */
    StaffUnitHrVacancyRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Is Active */
      is_active?: boolean;
      /** Archive Staff Unit Id */
      archive_staff_unit_id?: string;
      /** Hr Vacancy Requirements */
      hr_vacancy_requirements?: (components["schemas"]["HrVacancyRequirementsRead"])[];
      /** Candidates */
      candidates?: (components["schemas"]["HrVacancyCandidateRead"])[];
      /** Is Responded */
      is_responded?: boolean;
    };
    /** StaffUnitMatreshkaOptionRead */
    StaffUnitMatreshkaOptionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** Position Id */
      position_id?: string;
      position?: components["schemas"]["NamedModel"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
      /** Users */
      users?: (components["schemas"]["MatreshkaUserRead"])[];
    };
    /** StaffUnitMatreshkaOptionReadPagination */
    StaffUnitMatreshkaOptionReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["StaffUnitMatreshkaOptionRead"])[];
    };
    /** StaffUnitReadWithoutUser */
    StaffUnitReadWithoutUser: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Position Id */
      position_id?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Requirements */
      requirements?: (components["schemas"]["StaffUnitRequirements"])[] | null;
      staff_division?: components["schemas"]["StaffUnitDivisionRead"];
      /** Staff Functions */
      staff_functions?: (components["schemas"]["StaffFunctionRead"])[];
      position?: components["schemas"]["PositionRead"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
      /** Hr Vacancy */
      hr_vacancy?: (components["schemas"]["schemas__staff_unit__HrVacancyRead"])[];
    };
    /** StaffUnitRequirements */
    StaffUnitRequirements: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Keys */
      keys?: (Record<string, never>)[] | null;
    };
    /** StaffUnitUpdate */
    StaffUnitUpdate: {
      /** Position Id */
      position_id: string;
      /** Staff Division Id */
      staff_division_id?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Requirements */
      requirements?: Record<string, unknown> | null;
      /** Curator Of Id */
      curator_of_id?: string | null;
      /** User Replacing Id */
      user_replacing_id?: string | null;
    };
    /** StatRead */
    StatRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Score */
      score: number;
      /** Abb */
      abb: string;
    };
    /** StatusRead */
    StatusRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Type Id */
      type_id?: string;
      /** User Id */
      user_id: string;
      type?: components["schemas"]["StatusTypeRead"];
      history?: components["schemas"]["schemas__status__History"];
    };
    /** StatusTypeCreate */
    StatusTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** StatusTypePaginationRead */
    StatusTypePaginationRead: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["StatusTypeRead"])[];
    };
    /** StatusTypeRead */
    StatusTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** StatusTypeUpdate */
    StatusTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /**
     * SubjectType
     * @description An enumeration.
     * @enum {integer}
     */
    SubjectType: 1 | 2 | 3 | 4;
    /** SuggestCorrections */
    SuggestCorrections: {
      /** Hr Document Template Id */
      hr_document_template_id: string;
      /** Text */
      text: string;
    };
    /** SurveyCreateWithJurisdiction */
    SurveyCreateWithJurisdiction: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Description */
      description?: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date?: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /** Is Kz Translate Required */
      is_kz_translate_required?: boolean;
      /** Is Anonymous */
      is_anonymous?: boolean;
      repeat_type?: components["schemas"]["SurveyRepeatTypeEnum"];
      /** Comp Form For Id */
      comp_form_for_id?: string;
      type: components["schemas"]["SurveyTypeEnum"];
      /** Jurisdictions */
      jurisdictions: (components["schemas"]["SurveyJurisdictionBase"])[];
      /** Owner Id */
      owner_id?: string;
    };
    /** SurveyJurisdictionBase */
    SurveyJurisdictionBase: {
      jurisdiction_type: components["schemas"]["SurveyJurisdictionTypeEnum"];
      staff_position?: components["schemas"]["SurveyStaffPositionEnum"];
      /** Staff Division Id */
      staff_division_id?: string;
      /** Certain Member Id */
      certain_member_id?: string;
    };
    /** SurveyJurisdictionRead */
    SurveyJurisdictionRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      jurisdiction_type: components["schemas"]["SurveyJurisdictionTypeEnum"];
      staff_position?: components["schemas"]["SurveyStaffPositionEnum"];
      /** Staff Division Id */
      staff_division_id?: string;
      /** Certain Member Id */
      certain_member_id?: string;
      /**
       * Survey Id
       * Format: uuid
       */
      survey_id?: string;
    };
    /**
     * SurveyJurisdictionTypeEnum
     * @description An enumeration.
     * @enum {string}
     */
    SurveyJurisdictionTypeEnum: "Штатное подразделение" | "Определенный участник";
    /** SurveyNotificationRead */
    SurveyNotificationRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Description */
      description?: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date?: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /** Is Kz Translate Required */
      is_kz_translate_required?: boolean;
      /** Is Anonymous */
      is_anonymous?: boolean;
      repeat_type?: components["schemas"]["SurveyRepeatTypeEnum"];
      /** Comp Form For Id */
      comp_form_for_id?: string;
      status?: components["schemas"]["SurveyStatusEnum"];
      /** Questions */
      questions?: (components["schemas"]["QuestionRead"])[];
      type?: components["schemas"]["SurveyTypeEnum"];
      /** Jurisdictions */
      jurisdictions?: (components["schemas"]["SurveyJurisdictionRead"])[];
      comp_form_for?: components["schemas"]["schemas__user__UserShortRead"];
      owner?: components["schemas"]["schemas__user__UserShortRead"];
      /** Owner Id */
      owner_id?: string;
    };
    /** SurveyRead */
    SurveyRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Description */
      description?: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date?: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /** Is Kz Translate Required */
      is_kz_translate_required?: boolean;
      /** Is Anonymous */
      is_anonymous?: boolean;
      repeat_type?: components["schemas"]["SurveyRepeatTypeEnum"];
      /** Comp Form For Id */
      comp_form_for_id?: string;
      status?: components["schemas"]["SurveyStatusEnum"];
      /** Questions */
      questions?: (components["schemas"]["QuestionRead"])[];
      type?: components["schemas"]["SurveyTypeEnum"];
      /** Jurisdictions */
      jurisdictions?: (components["schemas"]["SurveyJurisdictionRead"])[];
      comp_form_for?: components["schemas"]["schemas__user__UserShortRead"];
    };
    /** SurveyReadPagination */
    SurveyReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["SurveyRead"])[];
    };
    /**
     * SurveyRepeatTypeEnum
     * @description An enumeration.
     * @enum {string}
     */
    SurveyRepeatTypeEnum: "Никогда" | "Каждую неделю" | "Каждый месяц" | "Каждый год";
    /**
     * SurveyStaffPositionEnum
     * @description An enumeration.
     * @enum {string}
     */
    SurveyStaffPositionEnum: "Все" | "Только личный состав" | "Только руководящий состав";
    /**
     * SurveyStatusEnum
     * @description An enumeration.
     * @enum {string}
     */
    SurveyStatusEnum: "Активный" | "Архивный" | "Черновик";
    /**
     * SurveyTypeEnum
     * @description An enumeration.
     * @enum {string}
     */
    SurveyTypeEnum: "Опрос" | "Тест" | "Бланк компетенций";
    /** SurveyUpdate */
    SurveyUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Description */
      description?: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date?: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /** Is Kz Translate Required */
      is_kz_translate_required?: boolean;
      /** Is Anonymous */
      is_anonymous?: boolean;
      repeat_type?: components["schemas"]["SurveyRepeatTypeEnum"];
      /** Comp Form For Id */
      comp_form_for_id?: string;
      status?: components["schemas"]["SurveyStatusEnum"];
    };
    /** TableUserRead */
    TableUserRead: {
      /** Total */
      total: number;
      /** Users */
      users: (components["schemas"]["schemas__user__UserRead"])[];
    };
    /** TaxDeclarationCreate */
    TaxDeclarationCreate: {
      /** Year */
      year: string;
      /** Is Paid */
      is_paid: boolean;
      /** Profile Id */
      profile_id: string;
    };
    /** TaxDeclarationRead */
    TaxDeclarationRead: {
      /** Year */
      year?: string;
      /** Is Paid */
      is_paid?: boolean;
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date
       */
      updated_at?: string;
    };
    /** TaxDeclarationUpdate */
    TaxDeclarationUpdate: {
      /** Year */
      year: string;
      /** Is Paid */
      is_paid: boolean;
      /** Profile Id */
      profile_id: string;
    };
    /** TrainingAttendanceRead */
    TrainingAttendanceRead: {
      /** Physical Training */
      physical_training?: number;
      /** Tactical Training */
      tactical_training?: number;
      /** Shooting Training */
      shooting_training?: number;
    };
    /** TypeArmyEquipmentCreate */
    TypeArmyEquipmentCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** TypeArmyEquipmentModel */
    TypeArmyEquipmentModel: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
    };
    /** TypeArmyEquipmentModelCreate */
    TypeArmyEquipmentModelCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Type Of Army Equipment Id */
      type_of_army_equipment_id?: string;
    };
    /** TypeArmyEquipmentRead */
    TypeArmyEquipmentRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Type Of Army Equipment Models */
      type_of_army_equipment_models?: (components["schemas"]["TypeArmyEquipmentModel"])[];
    };
    /** TypeArmyEquipmentReadPagination */
    TypeArmyEquipmentReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["TypeArmyEquipmentRead"])[];
    };
    /** TypeClothingEquipmentCreate */
    TypeClothingEquipmentCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Model Ids */
      model_ids?: (string)[];
    };
    /** TypeClothingEquipmentModel */
    TypeClothingEquipmentModel: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
    };
    /** TypeClothingEquipmentModelCreate */
    TypeClothingEquipmentModelCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** TypeClothingEquipmentRead */
    TypeClothingEquipmentRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Type Cloth Eq Models */
      type_cloth_eq_models?: (components["schemas"]["TypeClothingEquipmentModel"])[];
    };
    /** TypeClothingEquipmentReadPagination */
    TypeClothingEquipmentReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["TypeClothingEquipmentRead"])[];
    };
    /** TypeOfArmyEquipmentModelRead */
    TypeOfArmyEquipmentModelRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Type Of Equipment */
      type_of_equipment?: Record<string, never>;
    };
    /** TypeOfClothingEquipmentModelRead */
    TypeOfClothingEquipmentModelRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Type Of Equipment */
      type_of_equipment?: Record<string, never>;
      /** Model Of Equipment */
      model_of_equipment?: Record<string, never>;
    };
    /** TypeOfOtherEquipmentModelRead */
    TypeOfOtherEquipmentModelRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Type Of Equipment */
      type_of_equipment?: Record<string, never>;
    };
    /** TypeOtherEquipmentCreate */
    TypeOtherEquipmentCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** TypeOtherEquipmentModel */
    TypeOtherEquipmentModel: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
    };
    /** TypeOtherEquipmentModelCreate */
    TypeOtherEquipmentModelCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Type Of Other Equipment Id */
      type_of_other_equipment_id?: string;
    };
    /** TypeOtherEquipmentRead */
    TypeOtherEquipmentRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Type Of Other Equipment Models */
      type_of_other_equipment_models?: (components["schemas"]["TypeOtherEquipmentModel"])[];
    };
    /** TypeOtherEquipmentReadPagination */
    TypeOtherEquipmentReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["TypeOtherEquipmentRead"])[];
    };
    /** UserFinancialInfoCreate */
    UserFinancialInfoCreate: {
      /** Iban */
      iban: string;
      /** Housing Payments Iban */
      housing_payments_iban: string;
      /** Profile Id */
      profile_id: string;
    };
    /** UserFinancialInfoRead */
    UserFinancialInfoRead: {
      /** Iban */
      iban?: string;
      /** Housing Payments Iban */
      housing_payments_iban?: string;
      /** Profile Id */
      profile_id?: string;
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date
       */
      updated_at?: string;
    };
    /** UserFinancialInfoUpdate */
    UserFinancialInfoUpdate: {
      /** Iban */
      iban: string;
      /** Housing Payments Iban */
      housing_payments_iban: string;
      /** Profile Id */
      profile_id: string;
    };
    /** UserLiberationCreate */
    UserLiberationCreate: {
      /** Reason */
      reason: string;
      /** Reasonkz */
      reasonKZ: string;
      /** Liberation Ids */
      liberation_ids?: (unknown)[];
      /** Initiator */
      initiator: string;
      /** Initiatorkz */
      initiatorKZ: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date: string;
      /** Profile Id */
      profile_id: string;
      /** Document Link */
      document_link?: string;
    };
    /** UserLiberationRead */
    UserLiberationRead: {
      /** Reason */
      reason?: string;
      /** Reasonkz */
      reasonKZ?: string;
      /** Liberation Ids */
      liberation_ids?: (unknown)[];
      /** Initiator */
      initiator?: string;
      /** Initiatorkz */
      initiatorKZ?: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date?: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /** Profile Id */
      profile_id?: string;
      /** Document Link */
      document_link?: string;
      /** Id */
      id?: string;
    };
    /** UserLiberationUpdate */
    UserLiberationUpdate: {
      /** Reason */
      reason: string;
      /** Reasonkz */
      reasonKZ: string;
      /** Liberation Ids */
      liberation_ids?: (unknown)[];
      /** Initiator */
      initiator: string;
      /** Initiatorkz */
      initiatorKZ: string;
      /**
       * Start Date
       * Format: date-time
       */
      start_date: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date: string;
      /** Profile Id */
      profile_id: string;
      /** Document Link */
      document_link?: string;
    };
    /** UserOathCreate */
    UserOathCreate: {
      /**
       * Date
       * Format: date
       */
      date?: string;
      /** User Id */
      user_id: string;
      /** Military Unit Id */
      military_unit_id: string;
    };
    /** UserOathRead */
    UserOathRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Date
       * Format: date
       */
      date?: string;
      /** User Id */
      user_id: string;
      /** Military Unit Id */
      military_unit_id: string;
      military_unit?: components["schemas"]["MilitaryUnitRead"];
    };
    /** UserOathUpdate */
    UserOathUpdate: {
      /**
       * Date
       * Format: date
       */
      date?: string;
      /** User Id */
      user_id: string;
      /** Military Unit Id */
      military_unit_id: string;
    };
    /** UserReplacingArchiveStaffUnitRead */
    UserReplacingArchiveStaffUnitRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Position Id */
      position_id?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** User Id */
      user_id?: string | null;
      /** Actual User Id */
      actual_user_id?: string | null;
      /** User Replacing Id */
      user_replacing_id?: string | null;
      /** Requirements */
      requirements?: unknown;
      /** Curator Of Id */
      curator_of_id?: string | null;
      /** Staff Functions */
      staff_functions?: (components["schemas"]["ArchiveStaffFunctionRead"])[];
      position?: components["schemas"]["PositionRead"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
      /** User */
      user?: components["schemas"]["schemas__archive__archive_staff_unit__UserRead"] | null;
      /** Actual User */
      actual_user?: components["schemas"]["schemas__archive__archive_staff_unit__UserRead"] | null;
      /** Hr Vacancy */
      hr_vacancy?: (components["schemas"]["StaffUnitHrVacancyRead"])[];
    };
    /** UserShortReadAgeCategory */
    UserShortReadAgeCategory: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Icon */
      icon?: string;
      rank?: components["schemas"]["RankRead"];
      /**
       * Date Birth
       * Format: date
       */
      date_birth?: string;
      /** Staff Division */
      staff_division?: Record<string, never>;
      /** Age Category */
      age_category?: number;
    };
    /** UserShortReadPagination */
    UserShortReadPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["schemas__user__UserShortRead"])[];
    };
    /** UserShortReadStatus */
    UserShortReadStatus: {
      /** Id */
      id?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Icon */
      icon?: string;
      rank?: components["schemas"]["RankRead"];
      /** Statuses */
      statuses?: (components["schemas"]["StatusRead"])[];
    };
    /** UserShortReadStatusPagination */
    UserShortReadStatusPagination: {
      /**
       * Total
       * @default 0
       */
      total?: number;
      /**
       * Objects
       * @default []
       */
      objects?: (components["schemas"]["UserShortReadStatus"])[];
    };
    /** UserStatCreate */
    UserStatCreate: {
      /** User Id */
      user_id: string;
      /** Physical Training */
      physical_training: number;
      /** Fire Training */
      fire_training: number;
      /** Attendance */
      attendance: number;
      /** Activity */
      activity: number;
      /** Opinion Of Colleagues */
      opinion_of_colleagues: number;
      /** Opinion Of Management */
      opinion_of_management: number;
    };
    /** UserStatRead */
    UserStatRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** User Id */
      user_id?: string;
      /** Physical Training */
      physical_training?: number;
      /** Fire Training */
      fire_training?: number;
      /** Attendance */
      attendance?: number;
      /** Activity */
      activity?: number;
      /** Opinion Of Colleagues */
      opinion_of_colleagues?: number;
      /** Opinion Of Management */
      opinion_of_management?: number;
    };
    /** UserStatUpdate */
    UserStatUpdate: {
      /** User Id */
      user_id: string;
      /** Physical Training */
      physical_training: number;
      /** Fire Training */
      fire_training: number;
      /** Attendance */
      attendance: number;
      /** Activity */
      activity: number;
      /** Opinion Of Colleagues */
      opinion_of_colleagues: number;
      /** Opinion Of Management */
      opinion_of_management: number;
    };
    /** UserUpdate */
    UserUpdate: {
      /**
       * Email
       * Format: email
       */
      email?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Actual Staff Unit Id */
      actual_staff_unit_id?: string;
      /** Icon */
      icon?: string;
      /** Call Sign */
      call_sign?: string;
      /** Id Number */
      id_number?: string;
      /** Phone Number */
      phone_number?: string;
      /** Address */
      address?: string;
      /** Cabinet */
      cabinet?: string;
      /** Service Phone Number */
      service_phone_number?: string;
      /** Supervised By */
      supervised_by?: string;
      /** Is Military */
      is_military?: boolean;
      /** Personal Id */
      personal_id?: string;
      /**
       * Date Birth
       * Format: date
       */
      date_birth?: string;
      /** Iin */
      iin?: string;
      /** Is Active */
      is_active?: boolean;
      /** Id */
      id?: string;
      /** Description */
      description?: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VehicleCreate */
    VehicleCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Number */
      number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /** Profile Id */
      profile_id: string;
      /** Document Link */
      document_link?: string;
      /** Vin Code */
      vin_code: string;
    };
    /** VehicleRead */
    VehicleRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Number */
      number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /** Profile Id */
      profile_id: string;
      /** Document Link */
      document_link?: string;
      /** Vin Code */
      vin_code: string;
    };
    /** VehicleTypeCreate */
    VehicleTypeCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** VehicleTypeRead */
    VehicleTypeRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** VehicleTypeReadPagination */
    VehicleTypeReadPagination: {
      /** Total */
      total?: number;
      /** Objects */
      objects?: (components["schemas"]["VehicleTypeRead"])[];
    };
    /** VehicleTypeUpdate */
    VehicleTypeUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
    };
    /** VehicleUpdate */
    VehicleUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Number */
      number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from: string;
      /** Profile Id */
      profile_id: string;
      /** Document Link */
      document_link?: string;
      /** Vin Code */
      vin_code: string;
    };
    /** ViolationCreate */
    ViolationCreate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /**
       * Date
       * Format: date-time
       */
      date: string;
      /** Issued By */
      issued_by: string;
      /** Issued Bykz */
      issued_byKZ: string;
      /** Article Number */
      article_number: string;
      /** Article Numberkz */
      article_numberKZ: string;
      /** Consequence */
      consequence: string;
      /** Consequencekz */
      consequenceKZ: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
    };
    /** ViolationRead */
    ViolationRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /**
       * Date
       * Format: date-time
       */
      date: string;
      /** Issued By */
      issued_by: string;
      /** Issued Bykz */
      issued_byKZ?: string;
      /** Article Number */
      article_number: string;
      /** Article Numberkz */
      article_numberKZ?: string;
      /** Consequence */
      consequence: string;
      /** Consequencekz */
      consequenceKZ?: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
    };
    /** ViolationUpdate */
    ViolationUpdate: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /**
       * Date
       * Format: date-time
       */
      date: string;
      /** Issued By */
      issued_by: string;
      /** Issued Bykz */
      issued_byKZ: string;
      /** Article Number */
      article_number: string;
      /** Article Numberkz */
      article_numberKZ: string;
      /** Consequence */
      consequence: string;
      /** Consequencekz */
      consequenceKZ: string;
      /**
       * Document Link
       * Format: uri
       */
      document_link?: string;
      /** Profile Id */
      profile_id?: string;
    };
    /** UserRead */
    schemas__archive__archive_staff_unit__UserRead: {
      /** Id */
      id?: string;
      /** Badges */
      badges?: (components["schemas"]["BadgeRead"])[];
      rank?: components["schemas"]["RankRead"];
      /**
       * Email
       * Format: email
       */
      email?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Call Sign */
      call_sign?: string;
      /** Id Number */
      id_number?: string;
      /** Status */
      status?: string;
      /**
       * Status Till
       * Format: date-time
       */
      status_till?: string;
      /** Icon */
      icon?: string;
      /** Is Military */
      is_military?: boolean;
      /** Actual Staff Unit Id */
      actual_staff_unit_id?: string;
      actual_staff_unit?: components["schemas"]["ArchiveStaffUnitReadWithoutUser"];
    };
    /** UserReplacingRead */
    schemas__archive__archive_staff_unit__UserReplacingRead: {
      /** Id */
      id?: string;
      /** Badges */
      badges?: (components["schemas"]["BadgeRead"])[];
      rank?: components["schemas"]["RankRead"];
      /**
       * Email
       * Format: email
       */
      email?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Call Sign */
      call_sign?: string;
      /** Id Number */
      id_number?: string;
      /** Status */
      status?: string;
      /**
       * Status Till
       * Format: date-time
       */
      status_till?: string;
      /** Icon */
      icon?: string;
      /** Is Military */
      is_military?: boolean;
      /** Actual Staff Unit Id */
      actual_staff_unit_id?: string;
      actual_staff_unit?: components["schemas"]["ArchiveStaffUnitReadWithoutUser"];
      staff_unit?: components["schemas"]["UserReplacingArchiveStaffUnitRead"];
    };
    /** History */
    schemas__badge__History: {
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
    };
    /** MonthRead */
    schemas__bsp__schedule_day__MonthRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Order */
      order?: number;
      /**
       * Id
       * Format: uuid
       */
      id?: string;
    };
    /** MonthRead */
    schemas__bsp__schedule_month__MonthRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Id */
      id?: string;
    };
    /** MonthRead */
    schemas__bsp__schedule_year__MonthRead: {
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** Month Order */
      month_order?: number;
      /** Id */
      id?: string;
      /**
       * Has Schedule Month
       * @default true
       */
      has_schedule_month?: boolean;
    };
    /** ContractRead */
    schemas__contract__ContractRead: {
      /** Type Id */
      type_id: string;
      /** User Id */
      user_id: string;
      /** Id */
      id: string;
      type?: components["schemas"]["ContractTypeRead"];
    };
    /** EquipmentRead */
    schemas__equipment__EquipmentRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Type Of Equipment */
      type_of_equipment?: string;
      /** Type Of Army Equipment Model Id */
      type_of_army_equipment_model_id?: string;
      /** Inventory Number */
      inventory_number?: string;
      /** Inventory Count */
      inventory_count?: number;
      /** Count Of Ammo */
      count_of_ammo?: number;
      /** Cloth Eq Types Models Id */
      cloth_eq_types_models_id?: string;
      /** Type Of Other Equipment Model Id */
      type_of_other_equipment_model_id?: string;
      /** Clothing Size */
      clothing_size?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** User Id */
      user_id?: string;
    };
    /** ContractRead */
    schemas__history__history__ContractRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string;
      /** Contract Id */
      contract_id: string;
      /** Contract Type Id */
      contract_type_id: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Document Link */
      document_link?: string;
      /** Cancel Document Link */
      cancel_document_link?: string;
      /** Document Number */
      document_number?: string;
      /** Experience Years */
      experience_years?: number;
      /**
       * Date Credited
       * Format: date-time
       */
      date_credited?: string;
    };
    /** EquipmentRead */
    schemas__history__history__EquipmentRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Type Of Equipment */
      type_of_equipment?: string;
      /** User Id */
      user_id?: string;
      /** Type Of Army Equipment Model Id */
      type_of_army_equipment_model_id?: string;
      /** Inventory Number */
      inventory_number?: string;
      /** Inventory Count */
      inventory_count?: number;
      /** Count Of Ammo */
      count_of_ammo?: number;
      /** Clothing Size */
      clothing_size?: string;
      /** Cloth Eq Types Models Id */
      cloth_eq_types_models_id?: string;
      /** Type Of Other Equipment Model Id */
      type_of_other_equipment_model_id?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      type_of_army_equipment_model?: components["schemas"]["TypeOfArmyEquipmentModelRead"];
      cloth_eq_types_models?: components["schemas"]["TypeOfClothingEquipmentModelRead"];
      type_of_other_equipment_model?: components["schemas"]["TypeOfOtherEquipmentModelRead"];
    };
    /** PenaltyRead */
    schemas__history__history__PenaltyRead: {
      /** Id */
      id: string;
      /** Status */
      status?: string;
      /** Document Link */
      document_link?: string;
      /** Document Number */
      document_number?: string;
      /** Cancel Document Link */
      cancel_document_link?: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Reason */
      reason?: string;
      /** Reasonkz */
      reasonKZ?: string;
      /** Penalty Id */
      penalty_id?: string;
    };
    /** SecondmentRead */
    schemas__history__history__SecondmentRead: {
      /** Id */
      id: string;
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Staff Division */
      staff_division?: string;
      /** Staff Divisionkz */
      staff_divisionKZ?: string;
      /** Document Link */
      document_link?: string;
      /** State Body */
      state_body?: string;
    };
    /** UserShortRead */
    schemas__hr_document__UserShortRead: {
      /** Id */
      id?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Icon */
      icon?: string;
      /** Iin */
      iin?: string;
    };
    /** HrVacancyRead */
    schemas__hr_vacancy__HrVacancyRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Is Active */
      is_active?: boolean;
      /** Archive Staff Unit Id */
      archive_staff_unit_id?: string;
      /** Hr Vacancy Requirements */
      hr_vacancy_requirements?: (components["schemas"]["HrVacancyRequirementsRead"])[];
      staff_unit?: components["schemas"]["schemas__staff_unit__StaffUnitRead"];
      archive_staff_unit?: components["schemas"]["schemas__staff_unit__StaffUnitRead"];
      /** Candidates */
      candidates?: (components["schemas"]["HrVacancyCandidateRead"])[];
      /** Is Responded */
      is_responded?: boolean;
    };
    /** PenaltyRead */
    schemas__penalty__PenaltyRead: {
      /** User Id */
      user_id: string;
      /** Type Id */
      type_id: string;
      /** Id */
      id: string;
      type?: components["schemas"]["PenaltyTypeRead"];
    };
    /** UserShortRead */
    schemas__permission__UserShortRead: {
      /** Id */
      id?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Icon */
      icon?: string;
    };
    /** SecondmentRead */
    schemas__secondment__SecondmentRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Name */
      name?: string;
      /** Namekz */
      nameKZ?: string | null;
      /** User Id */
      user_id: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** State Body Id */
      state_body_id?: string;
    };
    /** HrVacancyRead */
    schemas__staff_division__HrVacancyRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Is Active */
      is_active?: boolean;
      /** Staff Unit Id */
      staff_unit_id?: string;
    };
    /** StaffUnitRead */
    schemas__staff_division__StaffUnitRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /** Position Id */
      position_id?: string;
      position?: components["schemas"]["PositionRead"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
      /** Users */
      users?: (components["schemas"]["schemas__staff_division__UserRead"])[];
      /** Actual Users */
      actual_users?: (components["schemas"]["schemas__staff_division__UserRead"])[];
      /** Hr Vacancy */
      hr_vacancy?: (components["schemas"]["schemas__staff_division__HrVacancyRead"])[];
      /** Requirements */
      requirements?: (Record<string, never>)[];
      /** Staff Functions */
      staff_functions?: (components["schemas"]["StaffFunctionRead"])[];
      user_replacing?: components["schemas"]["schemas__staff_division__UserReplacingRead"];
      /** User Replacing Id */
      user_replacing_id?: string;
    };
    /** UserRead */
    schemas__staff_division__UserRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Badges */
      badges?: (components["schemas"]["BadgeRead"])[];
      /** Icon */
      icon?: string | null;
      /** Address */
      address?: string | null;
      /** Cabinet */
      cabinet?: string;
      /** Service Phone Number */
      service_phone_number?: string;
      /** Supervised By */
      supervised_by?: string;
      /** Is Military */
      is_military?: boolean;
      rank?: components["schemas"]["RankRead"];
      /**
       * Email
       * Format: email
       */
      email?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /**
       * Last Signed At
       * Format: date-time
       */
      last_signed_at?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Call Sign */
      call_sign?: string;
      /** Id Number */
      id_number?: string;
      /** Personal Id */
      personal_id?: string;
      /**
       * Date Birth
       * Format: date
       */
      date_birth?: string;
      /** Iin */
      iin?: string;
      /** Statuses */
      statuses?: (components["schemas"]["StatusRead"])[];
      /**
       * Status Till
       * Format: date-time
       */
      status_till?: string;
    };
    /** UserReplacingRead */
    schemas__staff_division__UserReplacingRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Badges */
      badges?: (components["schemas"]["BadgeRead"])[];
      /** Icon */
      icon?: string | null;
      /** Address */
      address?: string | null;
      /** Cabinet */
      cabinet?: string;
      /** Service Phone Number */
      service_phone_number?: string;
      /** Supervised By */
      supervised_by?: string;
      /** Is Military */
      is_military?: boolean;
      rank?: components["schemas"]["RankRead"];
      /**
       * Email
       * Format: email
       */
      email?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /**
       * Last Signed At
       * Format: date-time
       */
      last_signed_at?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Call Sign */
      call_sign?: string;
      /** Id Number */
      id_number?: string;
      /** Personal Id */
      personal_id?: string;
      /**
       * Date Birth
       * Format: date
       */
      date_birth?: string;
      /** Iin */
      iin?: string;
      /** Statuses */
      statuses?: (components["schemas"]["StatusRead"])[];
      /**
       * Status Till
       * Format: date-time
       */
      status_till?: string;
      staff_unit?: components["schemas"]["schemas__staff_division__UserReplacingStaffUnitRead"];
    };
    /** UserReplacingStaffUnitRead */
    schemas__staff_division__UserReplacingStaffUnitRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Position Id */
      position_id?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Requirements */
      requirements?: (Record<string, never>)[];
      position?: components["schemas"]["PositionRead"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
      /** Users */
      users?: (components["schemas"]["schemas__staff_division__UserRead"])[];
      /** Actual Users */
      actual_users?: (components["schemas"]["schemas__staff_division__UserRead"])[];
      /** Hr Vacancy */
      hr_vacancy?: (components["schemas"]["schemas__staff_division__HrVacancyRead"])[];
    };
    /** HrVacancyRead */
    schemas__staff_unit__HrVacancyRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Staff Unit Id */
      staff_unit_id?: string;
    };
    /** StaffUnitRead */
    schemas__staff_unit__StaffUnitRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Position Id */
      position_id?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Requirements */
      requirements?: (components["schemas"]["StaffUnitRequirements"])[] | null;
      staff_division?: components["schemas"]["StaffUnitDivisionRead"];
      /** Staff Functions */
      staff_functions?: (components["schemas"]["StaffFunctionRead"])[];
      position?: components["schemas"]["PositionRead"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
      /** Users */
      users?: (components["schemas"]["schemas__staff_unit__UserRead"])[];
      /** Actual Users */
      actual_users?: (components["schemas"]["schemas__staff_unit__UserRead"])[];
      /** Hr Vacancy */
      hr_vacancy?: (components["schemas"]["schemas__staff_unit__HrVacancyRead"])[];
      /** User Replacing */
      user_replacing?: components["schemas"]["schemas__staff_unit__UserReplacingRead"] | null;
      /** User Replacing Id */
      user_replacing_id?: string | null;
    };
    /** UserRead */
    schemas__staff_unit__UserRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Badges */
      badges?: (components["schemas"]["BadgeRead"])[];
      rank?: components["schemas"]["RankRead"];
      /**
       * Email
       * Format: email
       */
      email?: string | null;
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      /** Father Name */
      father_name?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Call Sign */
      call_sign?: string;
      /** Id Number */
      id_number?: string;
      /** Icon */
      icon?: string | null;
      /** Status */
      status?: string;
      /**
       * Status Till
       * Format: date-time
       */
      status_till?: string;
      /** Actual Staff Unit Id */
      actual_staff_unit_id?: string;
      actual_staff_unit?: components["schemas"]["StaffUnitReadWithoutUser"];
    };
    /** UserReplacingRead */
    schemas__staff_unit__UserReplacingRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Badges */
      badges?: (components["schemas"]["BadgeRead"])[];
      rank?: components["schemas"]["RankRead"];
      /**
       * Email
       * Format: email
       */
      email?: string | null;
      /** First Name */
      first_name?: string | null;
      /** Last Name */
      last_name?: string | null;
      /** Father Name */
      father_name?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Call Sign */
      call_sign?: string;
      /** Id Number */
      id_number?: string;
      /** Icon */
      icon?: string | null;
      /** Status */
      status?: string;
      /**
       * Status Till
       * Format: date-time
       */
      status_till?: string;
      /** Actual Staff Unit Id */
      actual_staff_unit_id?: string;
      actual_staff_unit?: components["schemas"]["StaffUnitReadWithoutUser"];
      staff_unit?: components["schemas"]["schemas__staff_unit__UserReplacingStaffUnitRead"];
    };
    /** UserReplacingStaffUnitRead */
    schemas__staff_unit__UserReplacingStaffUnitRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Position Id */
      position_id?: string;
      /** Staff Division Id */
      staff_division_id?: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Requirements */
      requirements?: (components["schemas"]["StaffUnitRequirements"])[] | null;
      staff_division?: components["schemas"]["StaffUnitDivisionRead"];
      /** Staff Functions */
      staff_functions?: (components["schemas"]["StaffFunctionRead"])[];
      position?: components["schemas"]["PositionRead"];
      /** Actual Position Id */
      actual_position_id?: string;
      actual_position?: components["schemas"]["PositionRead"];
      /** Users */
      users?: (components["schemas"]["schemas__staff_unit__UserRead"])[];
      /** Actual Users */
      actual_users?: (components["schemas"]["schemas__staff_unit__UserRead"])[];
      /** Hr Vacancy */
      hr_vacancy?: (components["schemas"]["schemas__staff_unit__HrVacancyRead"])[];
    };
    /** History */
    schemas__status__History: {
      /**
       * Date From
       * Format: date-time
       */
      date_from?: string;
      /**
       * Date To
       * Format: date-time
       */
      date_to?: string;
      /** Status Name */
      status_name?: string;
    };
    /** OptionCreate */
    schemas__survey__option__OptionCreate: {
      /** Text */
      text?: string;
      /** Textkz */
      textKZ?: string;
      /** Question Id */
      question_id: string;
      /** Score */
      score?: number;
      /** Diagram Description */
      diagram_description?: string;
      /** Diagram Descriptionkz */
      diagram_descriptionKZ?: string;
      /** Report Description */
      report_description?: string;
      /** Report Descriptionkz */
      report_descriptionKZ?: string;
    };
    /** OptionCreate */
    schemas__survey__question__OptionCreate: {
      /** Text */
      text?: string;
      /** Textkz */
      textKZ?: string | null;
      /** Score */
      score?: number;
      /** Diagram Description */
      diagram_description?: string;
      /** Diagram Descriptionkz */
      diagram_descriptionKZ?: string;
      /** Report Description */
      report_description?: string;
      /** Report Descriptionkz */
      report_descriptionKZ?: string;
    };
    /** UserRead */
    schemas__user__UserRead: {
      /** Id */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Email
       * Format: email
       */
      email?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Staff Unit Id */
      staff_unit_id?: string;
      /** Actual Staff Unit Id */
      actual_staff_unit_id?: string;
      /** Icon */
      icon?: string;
      /** Call Sign */
      call_sign?: string;
      /** Id Number */
      id_number?: string;
      /** Phone Number */
      phone_number?: string;
      /** Address */
      address?: string;
      /** Cabinet */
      cabinet?: string;
      /** Service Phone Number */
      service_phone_number?: string;
      /** Supervised By */
      supervised_by?: string;
      /** Is Military */
      is_military?: boolean;
      /** Personal Id */
      personal_id?: string;
      /**
       * Date Birth
       * Format: date
       */
      date_birth?: string;
      /** Iin */
      iin?: string;
      /** Is Active */
      is_active?: boolean;
      /** Description */
      description?: string;
      /** Badges */
      badges?: (components["schemas"]["BadgeRead"])[];
      staff_unit?: components["schemas"]["ShortUserStaffUnitRead"];
      actual_staff_unit?: components["schemas"]["ShortUserStaffUnitRead"];
      rank?: components["schemas"]["RankRead"];
      /**
       * Last Signed At
       * Format: date-time
       */
      last_signed_at?: string;
      /**
       * Status Till
       * Format: date-time
       */
      status_till?: string;
      /** Statuses */
      statuses?: (components["schemas"]["StatusRead"])[];
    };
    /** UserShortRead */
    schemas__user__UserShortRead: {
      /** Id */
      id?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Father Name */
      father_name?: string;
      /** Icon */
      icon?: string;
      rank?: components["schemas"]["RankRead"];
    };
    /** CandidateStageQuestionRead */
    schemas__user_candidates__candidate_stage_answer__CandidateStageQuestionRead: {
      /** Question */
      question?: string;
      /** Question Type */
      question_type?: string;
    };
    /** CandidateStageQuestionRead */
    schemas__user_candidates__candidate_stage_question__CandidateStageQuestionRead: {
      /** Question */
      question?: string;
      /** Question Type */
      question_type?: string;
      /** Id */
      id?: string;
      /** Candidate Stage Type Id */
      candidate_stage_type_id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all ServiceID
   * @description Get all Profiles
   */
  get_all_api_v1_search_post: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchTypeListCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchTypeListRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Login
   * @description Login to the system.
   *
   * - **email**: required and should be a valid email format.
   * - **password**: required.
   */
  login_api_v1_auth_login_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Login by ecp
   * @description Login to the system.
   *
   * - **certificate_blob**: required. auth_certificate.
   */
  login_ecp_api_v1_auth_login_ecp_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EcpLoginForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Register
   * @description Register new user to the system.
   *
   * - **email**: string required and should be a valid email format.
   * - **first_name**: required.
   * - **last_name**: required.
   * - **father_name**: optional.
   * - **group_id**: UUID - required and should exist in the database
   * - **position_id**: UUID - required and should exist in the database.
   * - **icon**: image with url format. This parameter is optional.
   * - **call_sign**: required.
   * - **id_number**: unique employee number. This parameter is required.
   * - **phone_number**: format (+77xxxxxxxxx). This parameter is optional.
   * - **address**: optional.
   * - **birthday**: format (YYYY-MM-DD). This parameter is optional.
   * - **status**: the current status of the employee
   * (e.g. "working", "on vacation", "sick", etc.). This parameter is optional.
   * - **status_till**: the date when the current status of the employee will end.
   *     This parameter is optional.
   * - **role_name**: required.
   * - **password**: required.
   * - **re_password**: required and should match the password field.
   */
  register_api_v1_auth_register_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegistrationForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Register Candidate
   * @description Register new candidate to the system.
   *
   * - **iin**: str
   */
  register_candidate_api_v1_auth_register_candidate_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CandidateRegistrationForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Refresh Token */
  refresh_token_api_v1_auth_refresh_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get All Actions */
  get_all_actions_api_v1_actions_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get By User Id
   * @description Get User data through AutoTag
   *
   * Args:
   *     user_id (str): id of user from whom data is to be fetched
   *     auto_tag (str): auto_tag to be used to fetch data
   *     db (Session, optional): Instance of Session for database connection.
   *     Defaults to Depends(get_db).
   *     Authorize (AuthJWT, optional): JWTToken holder class. Defaults to Depends().
   *
   * Returns:
   *     Any: Result from AutoTag
   */
  get_by_user_id_api_v1_auto_tags__user_id___get: {
    parameters: {
      query: {
        auto_tag: string;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Генерация документа 'Заключение спец. проверки'
   * @description Генерация документа "Заключение спец. проверки"
   *
   * - **hr_document_template_id**: UUID - required
   * - **candidate_id**: UUID - required
   */
  generate_api_v1_render_render_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvertCandidateTemplate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Генерация документа 'Заключение на зачисление'
   * @description Генерация документа "Заключение на зачисление"
   *
   * - **hr_document_template_id**: UUID - required
   * - **candidate_id**: UUID - required
   */
  render_finish_candidate_api_v1_render_render_finish_candidate_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvertCandidateTemplate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Convert */
  convert_api_v1_render_convert_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HTML"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Convert Docx To Html */
  convert_docx_to_html_api_v1_render_convert_docx_to_html_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Convert Html To Pdf */
  convert_html_to_pdf_api_v1_render_convert_pdf_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HTML"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Inflect Word */
  inflect_word_api_v1_render_inflect_get: {
    parameters: {
      query: {
        word: string;
        septik_int: number;
        lang?: components["schemas"]["LanguageEnum"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Users
   * @description Get all Users
   *
   * - **hr_document_template_id**: str - The value which returns filtered
   *     results by hr_document_template_id.
   *     This parameter is optional and defaults to None
   * - **filter**: str - The value which returns filtered results.
   *     This parameter is optional and defaults to None
   * - **skip**: int - The number of users to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of users to return in response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_users_get: {
    parameters: {
      query?: {
        hr_document_template_id?: string;
        filter?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TableUserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Check if user has access to template
   * @description Check if user has access to template
   *
   * - **user_id**: str - The value which returns filtered results by user_id.
   */
  is_template_accessible_for_user_api_v1_users__user_id__templates__get: {
    parameters: {
      query: {
        hr_document_template_id: string;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Users
   * @description Get all Users
   * - **filter**: str - The value which returns filtered results.
   *     This parameter is optional and defaults to None
   * - **skip**: int - The number of users to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of users to return in response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_archived_api_v1_users_archived_get: {
    parameters: {
      query?: {
        filter?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TableUserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Users
   * @description Get all Users
   * - **filter**: str - The value which returns filtered results.
   * This parameter is optional and defaults to None
   * - **skip**: int - The number of users to skip before returning the results.
   * This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of users to return in response.
   * This parameter is optional and defaults to 10.
   */
  get_all_active_api_v1_users_active_get: {
    parameters: {
      query?: {
        filter?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TableUserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Users by Jurisdiction
   * @description Get all Users by juridction
   *
   * - **skip**: int - The number of users to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of users to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_by_jurisdiction_api_v1_users_jurisdiction_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["schemas__user__UserRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Users by Staff Unit
   * @description Get all Users by Staff Unit
   *
   * - **id**: UUID - required and should exist in the database.
   */
  get_all_by_staff_unit_api_v1_users_staff_unit__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["schemas__user__UserRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Users by Staff Unit
   * @description Get all Users by Position
   *
   * - **id**: UUID - required and should exist in the database.
   */
  get_all_by_position_api_v1_users_position__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["schemas__user__UserRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Users by ScheduleYear
   * @description Get all Users by Plan
   *
   * - **id**: UUID - required and should exist in the database.
   * - **skip**: int - The number of users to skip before returning the results.
   * This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of users to return in response.
   * This parameter is optional and defaults to 10.
   */
  get_all_by_schedule_id_api_v1_users_schedule__id__get: {
    parameters: {
      query: {
        skip: number;
        limit: number;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserShortReadStatusPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get User by id
   * @description Get User by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_users__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__user__UserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update User Patch
   * @description Update User
   *
   * - **id**: UUID - id of the User.
   * - **email**: string required and should be a valid email format.
   * - **first_name**: required.
   * - **last_name**: required.
   * - **father_name**: optional.
   * - **icon**: image with url format. This parameter is optional.
   * - **call_sign**: required.
   * - **id_number**: unique employee number. This parameter is required.
   * - **phone_number**: format (+77xxxxxxxxx). This parameter is optional.
   * - **address**: optional.
   * - **status**: the current status of the employee
   *     (e.g. "working", "on vacation", "sick", etc.).
   *     This parameter is optional.
   * - **status_till**: the date when the current status
   *     of the employee will end. This parameter is optional.
   */
  update_user_patch_api_v1_users__id___patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["schemas__user__UserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get fields
   * @description Get fields
   *
   * This endpoint does not accept any parameters and returns all fields.
   */
  get_fields_api_v1_users_fields_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get Profile */
  get_profile_api_v1_users_profile_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get Templates */
  get_templates_api_v1_users_templates__user_id___get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Short User */
  get_short_user_api_v1_users_short__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__user__UserShortRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Short User */
  get_short_user_api_v1_users_iins__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_get_short_user_api_v1_users_iins__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all HrDocumentStatus
   * @description Get all HrDocumentStatus
   *
   * - **skip**: int - The number of HrDocumentStatus
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrDocumentStatus
   *     to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_hr_document_status_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentStatusRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HrDocumentStatus by id
   * @description Get HrDocumentStatus by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_hr_document_status__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all not signed HrDocuments
   * @description Get all not signed HrDocuments
   *
   * - **skip**: int - The number of HrDocuments to skip
   *     before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrDocuments to return in the response.
   *     This parameter is optional and defaults to 10.
   * - **filter**: str - The value which returns filtered results.
   *     This parameter is optional and defaults to None
   */
  get_not_signed_api_v1_hr_documents_not_signed_get: {
    parameters: {
      query?: {
        parent_id?: string;
        filter?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all not signed HrDocuments
   * @description Get all not signed HrDocuments
   *
   * - **skip**: int - The number of HrDocuments to skip
   *     before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrDocuments to return in the response.
   *     This parameter is optional and defaults to 10.
   * - **filter**: str - The value which returns filtered results.
   *     This parameter is optional and defaults to None
   */
  get_signed_api_v1_hr_documents_signed_get: {
    parameters: {
      query?: {
        parent_id?: string;
        filter?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all initialized HrDocuments
   * @description Get all initialized HrDocuments
   *
   * - **skip**: int - The number of HrDocuments to skip
   *     before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrDocuments to return in the response.
   *     This parameter is optional and defaults to 10.
   * - **filter**: str - The value which returns filtered results.
   *     This parameter is optional and defaults to None
   */
  get_initialized_api_v1_hr_documents_initialized_get: {
    parameters: {
      query?: {
        parent_id?: string;
        filter?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all al HrDocuments by user
   * @description Get all all HrDocuments
   *
   * - **skip**: int - The number of HrDocuments to skip
   *     before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrDocuments to return in the response.
   *     This parameter is optional and defaults to 10.
   * - **filter**: str - The value which returns filtered results.
   *     This parameter is optional and defaults to None
   * - **user_id**: UUID - optional defaults to authorized user.
   *     User ID of the subject of the HrDocument.
   */
  get_all_api_v1_hr_documents_all__get: {
    parameters: {
      query?: {
        user_id?: string;
        filter?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all al HrDocuments by user
   * @description Get all HrDocuments
   *
   * - **skip**: int - The number of HrDocuments to skip
   *     before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrDocuments to return in the response.
   *     This parameter is optional and defaults to 10.
   * - **filter**: str - The value which returns filtered results.
   *     This parameter is optional and defaults to None
   * - **user_id**: UUID - optional defaults to authorized user.
   *     User ID of the subject of the HrDocument.
   */
  get_all_api_v1_hr_documents_allDocuments__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Sign HrDocument with ecp
   * @description Sign HrDocument
   *
   * The user must have a role that allows them to sign this HR document.
   *
   * - **id**: UUID - the ID of HrDocument. This is required.
   * - **comment**: A comment on the signed document.
   * - **is_signed**: bool - indicating whether the document is signed.
   */
  sign_ecp_all_api_v1_hr_documents_ecp_sign_all__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentSignEcpWithIds"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Sign HrDocument with ecp
   * @description Sign HrDocument
   *
   * The user must have a role that allows them to sign this HR document.
   *
   * - **id**: UUID - the ID of HrDocument. This is required.
   * - **comment**: A comment on the signed document.
   * - **is_signed**: bool - indicating whether the document is signed.
   */
  sign_ecp_api_v1_hr_documents_ecp_sign__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentSignEcp"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Initialize HrDocument
   * @description Initialize HrDocument
   *
   * The user must have a role that allows them to create HR documents.
   *
   * - **hr_document_template_id**: UUID - required.
   *     HrDocument will be initialized based on HrDocumentTemplate.
   * - **due_date**: the end date of this document - format (YYYY-MM-DD).
   *     This parameter is required.
   * - **properties**: A dictionary containing properties for the HrDocument.
   * - **user_ids**: UUID - required and should exist in database.
   *     A list of user IDs to be assigned to the HrDocument.
   * - **document_step_users_ids**: UUID - required and should exist in database.
   *     Dictionary of priority to user IDs to be assigned to the HrDocument.
   * - **certificate_blob**: string - required.
   *     The certificate's string representation.
   */
  initialize_with_certificate_api_v1_hr_documents_ecp_initialize_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentInitEcp"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HrDocumentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Initialize HrDocument
   * @description Initialize HrDocument
   *
   * The user must have a role that allows them to create HR documents.
   *
   * - **hr_document_template_id**: UUID - required.
   *     HrDocument will be initialized based on HrDocumentTemplate.
   * - **due_date**: the end date of this document - format (YYYY-MM-DD).
   *     This parameter is required.
   * - **properties**: A dictionary containing properties for the HrDocument.
   * - **user_ids**: UUID - required and should exist in database.
   *     A list of user IDs to be assigned to the HrDocument.
   * - **document_step_users_ids**: UUID - required and should exist in database.
   *     Dictionary of priority to user IDs to be assigned to the HrDocument.
   */
  initialize_api_v1_hr_documents_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentInit"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HrDocumentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Draft HrDocuments
   * @description Get all Draft HrDocuments
   * - **filter**: str - The value which returns filtered results.
   *     This parameter is optional and defaults to None
   * - **skip**: int - The number of HrDocuments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrDocuments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_draft_documents_api_v1_hr_documents_drafts_get: {
    parameters: {
      query?: {
        parent_id?: string;
        filter?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Save HrDocument to Draft
   * @description Save HrDocument
   *
   * The user must have a role that allows them to create HR documents.
   *
   *     - **hr_document_template_id**: UUID - required.
   *         HrDocument will be initialized based on HrDocumentTemplate.
   *     - **due_date**: the end date of this document - format (YYYY-MM-DD).
   *         This parameter is required.
   *     - **properties**: A dictionary containing properties for the HrDocument.
   *     - **user_ids**: UUID - required and should exist in database.
   *         A list of user IDs to be assigned to the HrDocument.
   */
  save_to_draft_api_v1_hr_documents_drafts_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DraftHrDocumentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HrDocumentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Initialize Draft HrDocument
   * @description Initialize Draft HrDocument
   *
   * The user must have a role that allows them to create HR documents.
   *
   * - **document_id**: UUID - required.
   * - **due_date**: the end date of this document - format (YYYY-MM-DD).
   *     This parameter is required.
   * - **properties**: A dictionary containing properties for the HrDocument.
   * - **user_ids**: UUID - required and should exist in database.
   *     A list of user IDs to be assigned to the HrDocument.
   */
  initialize_draft_document_api_v1_hr_documents_drafts__id__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DraftHrDocumentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HrDocumentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HrDocument by id
   * @description Get HrDocument by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_hr_documents__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update HrDocument
   * @description Update HrDocument
   *
   * - **id**: UUID - the id of HrDocument. This is required.
   * - **hr_document_template_id**: UUID - required.
   *     HrDocument will be initialized based on HrDocumentTemplate.
   * - **due_date**: the end date of this document - format (YYYY-MM-DD).
   *     This parameter is required.
   * - **properties**: A dictionary containing properties for the HrDocument.
   * - **user_ids**: UUID - required and should exist in database.
   *     A list of user IDs to be assigned to the HrDocument.
   * - **status**: the status of the HrDocument.
   *     This field should accept one of the following statuses:
   *
   * * Иницилизирован
   * * В процессе
   * * Завершен
   * * Отменен
   * * На доработке
   */
  update_api_v1_hr_documents__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Sign HrDocument
   * @description Sign HrDocument
   *
   * The user must have a role that allows them to sign this HR document.
   *
   * - **id**: UUID - the ID of HrDocument. This is required.
   * - **comment**: A comment on the signed document.
   * - **is_signed**: bool - indicating whether the document is signed.
   */
  sign_api_v1_hr_documents__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentSign"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete HrDocument
   * @description Delete HrDocument
   *
   * - **id**: UUID - required.
   */
  delete_api_v1_hr_documents__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Generate HrDocument
   * @description This endpoint generates a HR document based on the given document ID. (pdf)
   *
   * It takes a document ID as input,
   * retrieves the corresponding HR document from the database,
   * retrieves the HR document template associated with the document,
   * renders the template with the document's properties,
   * and saves the resulting Word document to a temporary file.
   * It then returns a FileResponse
   * containing the generated document as an attachment
   * that can be downloaded by the user.
   *
   * - **id**: UUID - required.
   */
  generate_api_v1_hr_documents_generate__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Generate HrDocument
   * @description This endpoint generates a HR document based on the given document ID. (html)
   *
   * It takes a document ID as input,
   * retrieves the corresponding HR document from the database,
   * retrieves the HR document template associated with the document,
   * renders the template with the document's properties,
   * and saves the resulting Word document to a temporary file.
   * It then returns a FileResponse containing
   * the generated document as an attachment that can be downloaded by the user.
   *
   * - **id**: UUID - required.
   */
  generate_html_api_v1_hr_documents_generate_html__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get data by option
   * @description Get data by option
   *
   * - **option**: required. This field should accept one of the following options:
   *
   * * staff_unit
   * * actual_staff_unit
   * * staff_division
   * * rank
   * * badges
   */
  get_data_by_option_api_v1_hr_documents_options_get: {
    parameters: {
      query: {
        option: string;
        data_taken?: string;
        id?: string;
        type?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Signee
   * @description Get signee
   *
   * - **id**: UUID - required.
   */
  get_signee_api_v1_hr_documents_signee__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__user__UserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Initialize HrDocument from staff list
   * @description Initialize HrDocument from staff list
   *
   * - **id**: UUID - required.
   */
  initialize_from_staff_list_api_v1_hr_documents_initialize_staff_list__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Qrs
   * @description Get qrs
   *
   * - **id**: hr_document_id - required.
   */
  get_qrs_api_v1_hr_documents_qrs__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["QrRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Generate draft for expiring contracts
   * @description Generate draft for expiring contracts
   */
  generate_document_for_expiring_api_v1_hr_documents_generate_document_for_expiring__contract_id___contract_type_id___get: {
    parameters: {
      path: {
        contract_id: string;
        contract_type_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ServiceStaffFunctionType
   * @description Get all ServiceStaffFunctionType
   *
   * - **skip**: int - The number of ServiceStaffFunctionType
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ServiceStaffFunctionType
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_service_staff_function_type_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ServiceStaffFunctionTypeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create ServiceStaffFunctionType
   * @description Create ServiceStaffFunctionType
   *
   * - **name**: required
   */
  create_api_v1_service_staff_function_type_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceStaffFunctionTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ServiceStaffFunctionTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ServiceStaffFunctionType by id
   * @description Get ServiceStaffFunctionType by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_service_staff_function_type__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceStaffFunctionTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ServiceFunction
   * @description Update ServiceFunction
   *
   * - **id**: UUID - the ID of ServiceStaffFunctionType to update. This is required.
   * - **name**: required.
   */
  update_api_v1_service_staff_function_type__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceStaffFunctionTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceStaffFunctionTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ServiceStaffFunctionType
   * @description Delete ServiceStaffFunctionType
   *
   * - **id**: UUID - required
   */
  delete_api_v1_service_staff_function_type__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ServiceStaffFunction
   * @description Get all ServiceStaffFunction
   *
   * - **skip**: int - The number of ServiceStaffFunction
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ServiceStaffFunction
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_service_staff_function_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ServiceStaffFunctionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create ServiceStaffFunction
   * @description Create ServiceStaffFunction
   *
   * - **name**: required
   * - **service_function_type_id**: UUID - required.
   *     The id of service function type.
   * - **spend_hours_per_week**: int - optional.
   */
  create_api_v1_service_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceStaffFunctionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ServiceStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ServiceStaffFunction by id
   * @description Get ServiceStaffFunction by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_service_staff_function__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ServiceStaffFunction
   * @description Update ServiceStaffFunction
   *
   * - **name**: required
   * - **service_function_type_id**: UUID - required.
   * The id of service function type.
   * - **spend_hours_per_week**: int - optional.
   */
  update_api_v1_service_staff_function__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceStaffFunctionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ServiceStaffFunction
   * @description Delete ServiceStaffFunction
   *
   * - **id**: UUID - required
   */
  delete_api_v1_service_staff_function__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Duplicate
   * @description Duplicate ServiceStaffFunction
   *
   * - **id**: UUID - required
   */
  duplicate_api_v1_service_staff_function_duplicate__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ServiceStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ServiceStaffFunctionType
   * @description Get all ServiceStaffFunctionType
   *
   * - **skip**: int - The number of ServiceStaffFunctionType
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ServiceStaffFunctionType
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_document_function_type_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["DocumentStaffFunctionTypeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create ServiceStaffFunctionType
   * @description Create ServiceStaffFunctionType
   *
   * - **name**: required
   */
  create_api_v1_document_function_type_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DocumentStaffFunctionTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DocumentStaffFunctionTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ServiceStaffFunctionType by id
   * @description Get ServiceStaffFunctionType by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_document_function_type__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentStaffFunctionTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ServiceFunction
   * @description Update ServiceFunction
   *
   * - **id**: UUID - the ID of ServiceStaffFunctionType to update. This is required.
   * - **name**: required.
   */
  update_api_v1_document_function_type__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DocumentStaffFunctionTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentStaffFunctionTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ServiceStaffFunctionType
   * @description Delete ServiceStaffFunctionType
   *
   * - **id**: UUID - required
   */
  delete_api_v1_document_function_type__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all DocumentStaffFunction
   * @description Get all DocumentStaffFunction
   *
   * - **skip**: int - The number of DocumentStaffFunction
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of DocumentStaffFunction
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_document_staff_function_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["DocumentStaffFunctionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Function */
  create_function_api_v1_document_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DocumentStaffFunctionAdd"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DocumentStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get DocumentStaffFunction by id
   * @description Get DocumentStaffFunction by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_document_staff_function__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update DocumentStaffFunction
   * @description Update DocumentStaffFunction
   */
  update_api_v1_document_staff_function__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DocumentStaffFunctionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DocumentStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete DocumentStaffFunction
   * @description Delete DocumentStaffFunction
   *
   * - **id**: UUID - required
   */
  delete_api_v1_document_staff_function__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Duplicate */
  duplicate_api_v1_document_staff_function_duplicate__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DocumentStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Function For Constructor */
  create_function_for_constructor_api_v1_document_staff_function_constructor__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DocumentStaffFunctionConstructorAdd"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DocumentStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Staff Units By Id */
  get_staff_units_by_id_api_v1_document_staff_function_staff_unit__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Append To Staff Unit */
  append_to_staff_unit_api_v1_document_staff_function_append_to_staff_unit__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DocumentStaffFunctionAppendToStaffUnit"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Staff Divisions
   * @description Get all Staff Divisions
   *
   * - **skip**: int - The number of staff divisions
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff divisions
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_staff_division_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Staff Division
   * @description Create Staff Division
   *
   * - **parent_group_id**: the id of the parent group. This parameter is optional.
   * - **name**: required
   * - **description**: a long description. This parameter is optional.
   */
  create_api_v1_staff_division_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffDivisionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["StaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Staff Divisions
   * @description Get all Staff Divisions
   *
   * - **skip**: int - The number of staff divisions
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff divisions
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_schedule_api_v1_staff_division_schedule__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Staff Divisions
   * @description Get all Staff Divisions
   *
   * - **skip**: int - The number of staff divisions
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff divisions
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_departments_api_v1_staff_division_departments__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["StaffDivisionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division and all his parents
   * @description Get all Staff Divisions
   *
   * - **id**: uuid - The id of staff division. This parameter is required.
   */
  get_division_parents_by_id_api_v1_staff_division_division_parents__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division and all his parents with fewer parameters
   * @description Get all Staff Divisions
   *
   * - **id**: uuid - The id of staff division. This parameter is required.
   */
  get_division_parents_by_id_minimized_api_v1_staff_division_division_parents_minimized__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffDivisionReadMinimized"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division by id
   * @description Get Staff Division by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_staff_division__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Staff Division
   * @description Update Staff Division
   *
   * - **id**: UUID - id of the Staff Division.
   * - **parent_group_id**: the id of the parent group. This parameter is optional.
   * - **name**: required
   * - **description**: a long description. This parameter is optional.
   */
  update_api_v1_staff_division__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffDivisionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update parent of Staff Division
   * @description Update parent of Staff Division
   *
   * - **id**: UUID - staff division id. It is required
   * - **parent_group_id**: the id of the parent group. It is required
   */
  update_parent_api_v1_staff_division__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffDivisionUpdateParentGroup"];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["StaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Staff Division
   * @description Delete Staff Division
   *
   * - **id**: UUID - required
   */
  delete_api_v1_staff_division__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division by id
   * @description Get Staff Division by id
   *
   * - **id**: UUID - required
   */
  get_by_id_schedule_api_v1_staff_division_schedule__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division one level by id
   * @description Get Department of staff division
   *
   * - **id**: uuid - The id of staff division. This parameter is required.
   */
  get_all_one_level_for_id_api_v1_staff_division_get_department_of__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffDivisionNamedModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division one level by id
   * @description Get all Staff Divisions
   *
   * - **id**: uuid - The id of staff division. This parameter is required.
   */
  get_all_one_level_for_id_api_v1_staff_division_one_level__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffDivisionStepRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division one level by id
   * @description Get all Staff Divisions
   *
   * - **id**: uuid - The id of staff division. This parameter is required.
   */
  get_all_one_level_for_id_api_v1_staff_division_one_level_matreshka_get: {
    parameters: {
      query?: {
        id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffDivisionMatreshkaStepRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division by id
   * @description Get Staff Division by id
   *
   * - **id**: UUID - required
   */
  get_full_name_by_id_api_v1_staff_division_name__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division types
   * @description Get all Staff Division Types
   */
  get_division_types_api_v1_staff_division_types_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["StaffDivisionTypeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get ids of all parents of Staff Division */
  get_parent_ids_api_v1_staff_division_ids__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all HrDocumentInfo
   * @description Get all HrDocumentInfo
   *
   * - **skip**: int - The number of HrDocumentInfo
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrDocumentInfo
   *     to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_hr_documents_info_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentInfoRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create HrDocumentInfo
   * @description Create HrDocumentInfo
   *
   * - **hr_document_step_id**: UUID - the id of HrDocumentStep associated
   *     with this document info. This is required.
   * - **signed_by**: UUID - the id of the user who signed this document info.
   *     This field is optional.
   * - **comment**: a comment regarding this document info.
   * - **is_signed**: bool - whether or not this document info has been signed.
   * - **hr_document_id**: UUID - the id of the HrDocument associated
   *     with this document info.
   * - **signed_at**: the datetime at which this document info was signed.
   *     This field is optional. Format (YYYY-MM-DD)
   */
  create_api_v1_hr_documents_info_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentInfoCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HrDocumentInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HrDocumentInfo by id
   * @description Get HrDocumentInfo by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_hr_documents_info__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update HrDocumentInfo
   * @description Update HrDocumentInfo
   *
   * - **id**: UUID - the id of the HrDocumentInfo. This is required.
   * - **hr_document_step_id**: UUID - the id of HrDocumentStep associated
   *     with this document info. This is required.
   * - **signed_by**: UUID - the id of the user who signed this document info.
   *     This field is optional.
   * - **comment**: a comment regarding this document info.
   * - **is_signed**: bool - whether or not this document info has been signed.
   * - **hr_document_id**: UUID - the id of the HrDocument
   *     associated with this document info.
   * - **signed_at**: the datetime at which this document info was signed.
   *     This field is optional. Format (YYYY-MM-DD)
   */
  update_api_v1_hr_documents_info__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentInfoUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete HrDocumentInfo
   * @description Delete HrDocumentInfo
   *
   * - **id**: UUId - required
   */
  delete_api_v1_hr_documents_info__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get History by document id
   * @description Get History by document id
   *
   * The function returns a list of HrDocumentHistoryRead objects,
   * which represent the history of the HR document.
   *
   * - **id**: UUID - required.
   */
  get_history_by_document_id_api_v1_hr_documents_info_history__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentHistoryRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all HrDocumentStep
   * @description Get all HrDocumentStep
   *
   * - **id**: UUID - the id of HrDocumentTemplate. This parameter is required.
   */
  get_all_api_v1_hr_documents_step_get: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrDocumentStepRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create HrDocumentStep
   * @description Crete HrDocumentStep
   *
   * - **hr_document_template_id**: UUID - the id of HrDocumentTemplate.
   *     This step will depend to this template. This field is required.
   * - **previous_step_id**: UUID - the id of previous HrDocumentStep.
   *     This parameter is optional.
   * - **staff_unit_id**: UUID - the id of StaffUnit. This is required.
   * - **staff_function_id**: UUID - the id of StaffFunction. This is required.
   */
  create_api_v1_hr_documents_step_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentStepCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HrDocumentStepRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HrDocumentStep by id
   * @description Get HrDocumentStep by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_hr_documents_step__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentStepRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update HrDocumentStep
   * @description Update HrDocumentStep
   *
   * - **id**: UUID - required
   * - **hr_document_template_id**: UUID - the id of HrDocumentTemplate.
   *     This step will depend on this template. This field is required.
   * - **previous_step_id**: UUID - the id of previous HrDocumentStep.
   *      This parameter is optional.
   * - **staff_unit_id**: UUID - the id of StaffUnit. This is required.
   * - **staff_function_id**: UUID - the id of StaffFunction.
   *     This is required.
   *
   * > Note that child steps **can not change** template type,
   * > and **template will be changed for every child steps**
   * if you want to change template for parent step
   */
  update_api_v1_hr_documents_step__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentStepUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentStepRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete HrDocumentStep
   * @description Delete HrDocumentStep
   *
   * - **id**: UUID - required
   */
  delete_api_v1_hr_documents_step__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all HrDocumentTemplate
   * @description Get all HrDocumentTemplate
   *
   * - **skip**: int - The number of HrDocumentTemplate
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrDocumentTemplate
   *     to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_hr_documents_template_get: {
    parameters: {
      query?: {
        skip?: number;
        name?: string;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentTemplatePaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create HrDocumentTemplate
   * @description Create HrDocumentTemplate
   *
   * - **name**: required
   * - **path**: string - the current location of this document.
   *     This is required.
   * - **subject_type**: int - the subject type of the HrDocumentTemplate.
   *     This field should necessarily accept one of the following types.
   * - **properties**: Dict[str, dict] - details which
   *     will be replaced while creating HrDocument.
   *     This is required.
   *
   * - CANDIDATE = 1
   * - EMPLOYEE = 2
   * - PERSONNEL = 3
   * - STAFF = 4
   */
  create_api_v1_hr_documents_template_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentTemplateCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HrDocumentTemplateRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Archived */
  get_all_archived_api_v1_hr_documents_template_archive_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get HrDocumentTemplate drafts */
  get_all_draft_api_v1_hr_documents_template_draft_get: {
    parameters: {
      query?: {
        skip?: number;
        name?: string;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentTemplatePaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create HrDocumentTemplate draft
   * @description Create HrDocumentTemplate draft
   *
   * - **name**: required
   * - **path**: string - the current location of this document.
   *     This is required.
   * - **subject_type**: int - the subject type of the HrDocumentTemplate.
   *     This field should necessarily accept one of the following types.
   * - **properties**: Dict[str, dict] - details which
   *     will be replaced while creating HrDocument.
   *
   * - CANDIDATE = 1
   * - EMPLOYEE = 2
   * - PERSONNEL = 3
   * - STAFF = 4
   */
  create_draft_api_v1_hr_documents_template_draft_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentTemplateCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HrDocumentTemplateRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HrDocumentTemplate by id
   * @description Get HrDocumentTemplate by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_hr_documents_template__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentTemplateRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update HrDocumentTemplate
   * @description Update HrDocumentTeplate
   *
   * - **id**: UUID - required.
   * - **name**: required
   * - **path**: string - the current location of this document.
   *     This is required.
   * - **subject_type**: int - the subject type of the HrDocumentTemplate.
   *     This field should necessarily accept one of the following types.
   * - **properties**: Dict[str, dict] - details which will be replaced
   *     while creating HrDocument. This is required.
   *
   * * CANDIDATE = 1
   * * EMPLOYEE = 2
   * * PERSONNEL = 3
   * * STAFF = 4
   */
  update_api_v1_hr_documents_template__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrDocumentTemplateUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrDocumentTemplateRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete HrDocumentTemplate
   * @description Delete HrDocumentTemplate
   *
   * - **id**: UUID - required.
   */
  delete_api_v1_hr_documents_template__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HrDocumentTemplate by step id
   * @description Get HrDocumentTemplate by step id
   *
   * - **id**: UUID - required.
   */
  get_steps_by_document_template_id_api_v1_hr_documents_template_steps__id__get: {
    parameters: {
      query: {
        user_id: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Duplicate */
  duplicate_api_v1_hr_documents_template_duplicate__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Suggest Corrections */
  suggest_corrections_api_v1_hr_documents_template_corrections__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SuggestCorrections"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all UserStats
   * @description Get all UserStats
   *
   * - **skip**: int - The number of UserStats
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of UserStats
   *      to return in the response.
   *      This parameter is optional and defaults to 10.
   */
  get_all_api_v1_user_stats_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["UserStatRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create UserStat
   * @description Create UserStat
   *
   * - **user_id**: UUID - the ID of the user.
   *     This parameter is required and should exist in database.
   * - **physical_training**: int - representing the user's
   *     physical training score.
   * - **fire_training**: int - representing the user's fire training score.
   * - **attendance**: int - representing the user's attendance score.
   * - **activity**: int - representing the user's activity score.
   * - **opinion_of_colleagues**: int - representing the user's opinion
   *     of colleagues score.
   * - **opinion_of_management**: int - representing the user's opinion
   *     of management score.
   */
  create_api_v1_user_stats_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserStatCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserStatRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get UserStat by id
   * @description Get UserStat by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_user_stats__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserStatRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update UserStat
   * @description Update UserStat
   *
   * - **id**: UUID - the ID of the UserStat.
   *     This is required.
   * - **user_id**: UUID - the ID of the user.
   *     This parameter is required and should exist in database.
   * - **physical_training**: int - representing the user's
   *     physical training score.
   *     This is required.
   * - **fire_training**: int - representing the user's fire
   *     training score.
   *     This is required.
   * - **attendance**: int - representing the user's attendance score.
   *     This is required.
   * - **activity**: int - representing the user's activity score.
   *     This is required.
   * - **opinion_of_colleagues**: int - representing the user's
   *     opinion of colleagues score.
   *      This is required.
   * - **opinion_of_management**: int - representing the user's
   *     opinion of management score.
   *     This is required.
   */
  update_api_v1_user_stats__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserStatUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserStatRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete UserStat
   * @description Delete UserStat
   *
   * - **id**: UUID - required
   */
  delete_api_v1_user_stats__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Staff Units
   * @description Get all Staff Units
   *
   * - **skip**: int - The number of staff units
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff units
   *      to return in the response.
   *      This parameter is optional and defaults to 10.
   */
  get_all_api_v1_staff_unit_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["schemas__staff_unit__StaffUnitRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Staff Unit
   * @description Create Staff Unit
   *
   * - **name**: required
   * - **max_rank_id**: UUID - required and should exist in the database
   * - **description**: a long description. This parameter is optional.
   */
  create_api_v1_staff_unit_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffUnitCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["schemas__staff_unit__StaffUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Staff Unit
   * @description Create Staff Unit with new position
   *
   * - **max_rank_id**: UUID - required and should exist in the database
   */
  create_with_position_api_v1_staff_unit_position__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffUnitCreateWithPosition"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["schemas__staff_unit__StaffUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Unit by id
   * @description Get Staff Unit by id
   *
   * - **id** - UUID - required
   */
  get_by_id_api_v1_staff_unit__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__staff_unit__StaffUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Staff Unit
   * @description Update Staff Unit
   *
   * - **id**: UUID - required
   * - **name**: required
   * - **position_id**: id of position.
   *     This parameter is optional.
   * - **staff_division_id**: id of staff_division.
   *     This parameter is optional.
   */
  update_api_v1_staff_unit__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffUnitUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__staff_unit__StaffUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Staff Unit
   * @description Delete Staff Unit
   *
   * - **id** - UUID - required
   */
  delete_api_v1_staff_unit__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ServiceStaffFunctions by StaffUnit id
   * @description Get ServiceStaffFunctions by StaffUnit id
   *
   * - **id** - UUID - required
   */
  get_service_staff_functions_api_v1_staff_unit_get_service_staff_functions__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ServiceStaffFunctionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add ServiceStaffFunction
   * @description Add ServiceStaffFunction to StaffUnit
   */
  add_service_staff_function_api_v1_staff_unit_add_service_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffUnitFunctions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Remove ServiceStaffFunction
   * @description Remove ServiceStaffFunction from StaffUnit
   */
  remove_service_staff_function_api_v1_staff_unit_remove_service_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffUnitFunctions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get DocumentStaffFunctions by StaffUnit id
   * @description Get DocumentStaffFunctions by StaffUnit id
   *
   * - **id** - UUID - required
   */
  get_document_staff_functions_api_v1_staff_unit_get_document_staff_functions__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["DocumentStaffFunctionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add DocumentStaffFunction
   * @description Add DocumentStaffFunction to StaffUnit
   */
  add_document_staff_function_api_v1_staff_unit_add_document_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffUnitFunctions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add DocumentStaffFunction
   * @description Add DocumentStaffFunction to StaffUnit
   */
  add_document_staff_function_by_position_api_v1_staff_unit_add_document_staff_function_position_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffUnitFunctionsByPosition"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Remove DocumentStaffFunction
   * @description Remove DocumentStaffFunction from StaffUnit
   */
  remove_document_staff_function_api_v1_staff_unit_remove_document_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffUnitFunctions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Units by staff_division_id
   * @description Get Staff Units by staff_division_id
   *
   * - **staff_division_id** - UUID - required
   * - **skip**: int - The number of staff units
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff units
   *     to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_by_staff_division_id_api_v1_staff_unit_staff_division__id___get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffUnitMatreshkaOptionReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Equipments
   * @description Get all Equipments
   *
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_equipments_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["schemas__equipment__EquipmentRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Equipment
   * @description Create Equipment
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_api_v1_equipments_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EquipmentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EquipmentCreate"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Equipment by id
   * @description Get Equipment by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_equipments__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__equipment__EquipmentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Equipment
   * @description Update Equipment
   *
   * - **id**: UUID - the id of equipment to update. This parameter is required
   * - **name**: required
   * - **quantity**: required
   */
  update_api_v1_equipments__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EquipmentUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__equipment__EquipmentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Equipment
   * @description Delete Equipment
   *
   * - **id**: UUID - required
   */
  delete_api_v1_equipments__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Clothing Equipments
   * @description Get all Clothing Equipments
   *
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_clothing_api_v1_equipments_type_clothing__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeClothingEquipmentReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Army Equipments Type */
  create_cloth_eq_type_api_v1_equipments_type_clothing__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeClothingEquipmentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeClothingEquipmentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Clothing Equipment type by id */
  get_clothing_by_id_api_v1_equipments_type_clothing__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeClothingEquipmentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Clothing Equipments
   * @description Get all Clothing Equipments
   *
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_clothing_api_v1_equipments_model_clothing__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["TypeClothingEquipmentModel"])[];
        };
      };
    };
  };
  /** Create Army Equipments Model */
  create_cloth_eq_model_api_v1_equipments_model_clothing__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeClothingEquipmentModelCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Army Equipments
   * @description Get all Army Equipments
   *
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_army_api_v1_equipments_type_army__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeArmyEquipmentReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Army Equipments Type */
  create_army_eq_type_api_v1_equipments_type_army__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeArmyEquipmentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeArmyEquipmentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Army Equipment type by id */
  get_army_by_id_api_v1_equipments_type_army__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeArmyEquipmentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Other Equipments
   * @description Get all Other Equipments
   *
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_other_api_v1_equipments_type_other__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeOtherEquipmentReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Other Equipments Type */
  create_other_eq_type_api_v1_equipments_type_other__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeOtherEquipmentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeOtherEquipmentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Other Equipment type by id */
  get_other_by_id_api_v1_equipments_type_other__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeOtherEquipmentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Types of Equipments
   * @description Get all Types of Equipments
   *
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_types_api_v1_equipments_type_all_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all available Equipments for user
   * @description Get all available Equipments for user
   *
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_available_api_v1_equipmentsavailable__user_id___get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Other Equipments Model */
  create_other_eq_model_api_v1_equipments_model_other__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeOtherEquipmentModelCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeOtherEquipmentModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Army Equipments Model */
  create_army_eq_model_api_v1_equipments_model_army__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TypeArmyEquipmentModelCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TypeArmyEquipmentModel"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Badges
   * @description Get all Badges
   *
   * - **skip**: int - The number of badges to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of badges to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_badges_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["BadgeTypeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new badge
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_badges_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BadgeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["BadgeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Badge by id
   * @description Get badge by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_badges__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BadgeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Badge
   * @description Update badge
   *
   * - **id**: UUID - the ID of badge to update. This is required.
   * - **name**: required.
   * - **url**: image url. This parameter is required.
   */
  update_api_v1_badges__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BadgeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BadgeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Badge
   * @description Delete badge
   *
   * - **id**: UUId - required
   */
  delete_api_v1_badges__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Black Beret
   * @description Get black beret badge
   */
  black_beret_api_v1_badges_black_beret_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all Ranks
   * @description Get all Ranks
   *
   * - **skip**: int - The number of ranks
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ranks
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_ranks_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RankPaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Rank
   * @description Create Rank
   *
   * - **name**: required
   */
  create_api_v1_ranks_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RankCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["RankRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Ranks by name
   * @description Get all Ranks
   *
   * - **skip**: int - The number of ranks
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ranks
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_ranks_by_name__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RankRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Rank by id
   * @description Get Rank by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_ranks__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RankRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Rank
   * @description Update Rank
   *
   * - **id**: UUID - the ID of badge to update. This is required.
   * - **name**: required.
   */
  update_api_v1_ranks__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RankUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RankRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Rank
   * @description Delete Rank
   *
   * - **id**: UUID - required
   */
  delete_api_v1_ranks__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Ranks
   * @description Get all Ranks
   *
   * - **skip**: int - The number of ranks
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ranks
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_contracts_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__contract__ContractRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Rank
   * @description Create Rank
   *
   * - **name**: required
   */
  create_api_v1_contracts_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["schemas__contract__ContractRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Contract Types
   * @description Get all Contract Types
   *
   * - **skip**: int - The number of contract types
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of contract types
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_contract_types_api_v1_contracts_types_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContractTypeReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create contract type */
  create_contract_type_api_v1_contracts_types_post: {
    parameters: {
      query: {
        isFinite: boolean;
        years: number;
        name: string;
        nameKZ: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Rank by id
   * @description Get Rank by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_contracts__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__contract__ContractRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Rank
   * @description Update Rank
   *
   * - **id**: UUID - the ID of badge to update. This is required.
   * - **name**: required.
   */
  update_api_v1_contracts__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__contract__ContractRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Rank
   * @description Delete Rank
   *
   * - **id**: UUID - required
   */
  delete_api_v1_contracts__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Jurisdictions
   * @description Get all Jurisdictions
   *
   * - **skip**: int - The number of Jurisdictions
   *  to skip before returning the results.
   *  This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Jurisdictions
   *  to return in the response.
   *  This parameter is optional and defaults to 100.
   */
  get_all_api_v1_jurisdictions_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["JurisdictionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Jurisdiction by id
   * @description Get Jurisdiction by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_jurisdictions__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JurisdictionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Notifications
   * @description Get all Notifications
   *
   * - **skip**: int - The number of Notifications
   *  to skip before returning the results.
   *  This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Notifications
   *  to return in the response.
   *  This parameter is optional and defaults to 10.
   */
  get_all_api_v1_notifications_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Notification
   * @description Create Notification
   *
   * **name** - required - str
   */
  create_api_v1_notifications_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["NotificationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Notification
   * @description Delete Notification
   *
   * - **id** - UUID - required
   */
  delete_api_v1_notifications__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Test Notifications
   * @description Test all Notifications
   */
  test_api_v1_notifications_test_get: {
    parameters: {
      query?: {
        message?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Detailed Notifications
   * @description Get all Detailed Notifications
   *
   * - **skip**: int - The number of Notifications
   *  to skip before returning the results.
   *  This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Notifications
   *  to return in the response.
   *  This parameter is optional and defaults to 10.
   */
  get_all_detailed_api_v1_notifications_detailed_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DetailedNotificationReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Detailed Notification
   * @description Create Detailed Notifications
   *
   * **name** - required - str
   */
  create_api_v1_notifications_detailed_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DetailedNotificationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DetailedNotificationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Privelege Emergencies
   * @description Get all Military Units
   *
   * - **skip**: int - The number of Military Units
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Military Units
   *      to return in the response.
   *      This parameter is optional and defaults to 10.
   */
  get_all_api_v1_privelege_emergencies_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PrivelegeEmergencyRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Military Unit
   * @description Create Military Unit
   *
   * **name** - required - str
   */
  create_api_v1_privelege_emergencies_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrivelegeEmergencyCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PrivelegeEmergencyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Privelege Emergency Forms
   * @description Get all Privelege Emergency Forms
   */
  get_all_forms_api_v1_privelege_emergencies_forms__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get Privelege Emergency Unit by id
   * @description Get Privelege Emergency by id
   *
   * - **id** - UUID - required
   */
  get_by_id_api_v1_privelege_emergencies__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PrivelegeEmergencyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Privelege Emergency
   * @description Update Privelege Emergency
   *
   * **name** - required - str
   */
  update_api_v1_privelege_emergencies__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrivelegeEmergencyUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PrivelegeEmergencyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Privelege Emergency
   * @description Delete Military Unit
   *
   * - **id** - UUID - required
   */
  delete_api_v1_privelege_emergencies__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Privelege Emergency Unit by user id
   * @description Get Privelege Emergency by user id
   *
   * - **user_id** - UUID - required
   */
  get_by_user_id_api_v1_privelege_emergencies_user__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PrivelegeEmergencyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Coolness
   * @description Get all Coolness
   *
   * - **skip**: int - The number of Coolness to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Coolness to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_coolness_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CoolnessRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Coolness
   * @description Create Coolness
   *
   * **name** - required - str
   */
  create_api_v1_coolness_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CoolnessCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CoolnessRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Coolness types
   * @description Get all Coolness types
   */
  get_all_types_api_v1_coolness_types__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CoolnessTypeRead"])[];
        };
      };
    };
  };
  /**
   * Get all Coolness statuses
   * @description Get all Coolness statuses
   */
  get_all_types_api_v1_coolness_statuses__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all Specialty Enum
   * @description Get all Specialty Enum
   */
  get_all_forms_api_v1_coolness_forms__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get Coolness by id
   * @description Get Coolness by id
   *
   * - **id** - UUID - required
   */
  get_by_id_api_v1_coolness__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CoolnessRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Coolness
   * @description Update Coolness
   *
   * **name** - required - str
   */
  update_api_v1_coolness__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CoolnessUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CoolnessRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Coolness
   * @description Delete Coolness
   *
   * - **id** - UUID - required
   */
  delete_api_v1_coolness__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Privelege Emergencies
   * @description Get all Military Units
   *
   * - **skip**: int - The number of Military Units
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Military Units
   *      to return in the response.
   *      This parameter is optional and defaults to 10.
   */
  get_all_api_v1_personnal_reserve_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PersonnalReserveRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Military Unit
   * @description Create Military Unit
   *
   * **name** - required - str
   */
  create_api_v1_personnal_reserve_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PersonnalReserveCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PersonnalReserveRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Reserve Enum
   * @description Get all Privelege Emergency Forms
   */
  get_all_forms_api_v1_personnal_reserve_forms__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get Privelege Emergency Unit by id
   * @description Get Privelege Emergency by id
   *
   * - **id** - UUID - required
   */
  get_by_id_api_v1_personnal_reserve__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PersonnalReserveRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Privelege Emergency
   * @description Update Privelege Emergency
   *
   * **name** - required - str
   */
  update_api_v1_personnal_reserve__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PersonnalReserveUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PersonnalReserveRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Privelege Emergency
   * @description Delete Military Unit
   *
   * - **id** - UUID - required
   */
  delete_api_v1_personnal_reserve__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all AcademicDegrees
   * @description Get all AcademicDegrees
   *
   * - **skip**: int - The number of AcademicDegrees
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of AcademicDegrees
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_academic_degrees_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AcademicDegreeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new AcademicDegree
   *
   * - **name**: required
   */
  create_api_v1_education_academic_degrees_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcademicDegreeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AcademicDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get AcademicDegree by id
   * @description Get AcademicDegree by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_academic_degrees__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update AcademicDegree
   * @description Update AcademicDegree
   *
   * - **id**: UUID - the ID of AcademicDegree to update.
   *     This is required.
   * - **name**: required.
   */
  update_api_v1_education_academic_degrees__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcademicDegreeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete AcademicDegree
   * @description Delete AcademicDegree
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_academic_degrees__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all AcademicDegreeDegrees
   * @description Get all AcademicDegreeDegrees
   *
   * - **skip**: int - The number of AcademicDegreeDegrees
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of AcademicDegreeDegrees
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_academic_degree_degrees_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicDegreeDegreeReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new AcademicDegreeDegree
   *
   * - **name**: required
   */
  create_api_v1_education_academic_degree_degrees_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcademicDegreeDegreeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AcademicDegreeDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get AcademicDegreeDegree by id
   * @description Get AcademicDegreeDegree by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_academic_degree_degrees__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicDegreeDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update AcademicDegreeDegree
   * @description Update AcademicDegreeDegree
   *
   * - **id**: UUID - the ID of AcademicDegreeDegree to update.
   *     This is required.
   * - **name**: required.
   */
  update_api_v1_education_academic_degree_degrees__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcademicDegreeDegreeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicDegreeDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete AcademicDegreeDegree
   * @description Delete AcademicDegreeDegree
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_academic_degree_degrees__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all AcademicTitles
   * @description Get all AcademicTitles
   *
   * - **skip**: int - The number of AcademicTitles
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of AcademicTitles
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_academic_titles_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AcademicTitleRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new AcademicTitle
   *
   * - **name**: required
   */
  create_api_v1_education_academic_titles_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcademicTitleCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AcademicTitleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get AcademicTitle by id
   * @description Get AcademicTitle by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_academic_titles__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicTitleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update AcademicTitle
   * @description Update AcademicTitle
   *
   * - **id**: UUID - the ID of AcademicTitle to update.
   *     This is required.
   * - **name**: required.
   */
  update_api_v1_education_academic_titles__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcademicTitleUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicTitleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete AcademicTitle
   * @description Delete AcademicTitle
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_academic_titles__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Educations
   * @description Get all Educations
   *
   * - **skip**: int - The number of Educations
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Educations
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_educations_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["EducationRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new Education
   *
   * - **name**: required
   */
  create_api_v1_education_educations_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EducationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EducationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Education by id
   * @description Get Education by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_educations__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EducationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Education
   * @description Update Education
   *
   * - **id**: UUID - the ID of Education to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_educations__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EducationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EducationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Education
   * @description Delete Education
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_educations__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all EducationalProfiles
   * @description Get all EducationalProfiles
   *
   * - **skip**: int - The number of EducationalProfiles
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of EducationalProfiles
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_educational_profiles_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new EducationalProfile
   *
   * - **name**: required
   */
  create_api_v1_education_educational_profiles_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EducationalProfileCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EducationalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get EducationalProfile by id
   * @description Get EducationalProfile by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_educational_profiles__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EducationalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update EducationalProfile
   * @description Update EducationalProfile
   *
   * - **id**: UUID - the ID of EducationalProfile to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_educational_profiles__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EducationalProfileUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EducationalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete EducationalProfile
   * @description Delete EducationalProfile
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_educational_profiles__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Profile */
  get_profile_api_v1_education_educational_profiles_profile_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EducationalProfileRead"];
        };
      };
    };
  };
  /** Get Profile By Id */
  get_profile_by_id_api_v1_education_educational_profiles_profile__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EducationalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Institutions
   * @description Get all Institutions
   *
   * - **skip**: int - The number of Institutions
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Institutions
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_institutions_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new Institution
   *
   * - **name**: required
   */
  create_api_v1_education_institutions_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["InstitutionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Institution by id
   * @description Get Institution by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_institutions__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Institution
   * @description Update Institution
   *
   * - **id**: UUID - the ID of Institution to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_institutions__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Institution
   * @description Delete Institution
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_institutions__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all InstitutionDegreeTypes
   * @description Get all InstitutionDegreeTypes
   *
   * - **skip**: int - The number of InstitutionDegreeTypes
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of InstitutionDegreeTypes
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_institution_degree_types_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionDegreeTypeReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new InstitutionDegreeType
   *
   * - **name**: required
   */
  create_api_v1_education_institution_degree_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionDegreeTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["InstitutionDegreeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get InstitutionDegreeType by id
   * @description Get InstitutionDegreeType by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_institution_degree_types__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionDegreeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update InstitutionDegreeType
   * @description Update InstitutionDegreeType
   *
   * - **id**: UUID - the ID of InstitutionDegreeType to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_institution_degree_types__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionDegreeTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionDegreeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete InstitutionDegreeType
   * @description Delete InstitutionDegreeType
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_institution_degree_types__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Languages
   * @description Get all Languages
   *
   * - **skip**: int - The number of Languages
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Languages
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_languages_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new Language
   *
   * - **name**: required
   */
  create_api_v1_education_languages_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["LanguageRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Language by id
   * @description Get Language by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_languages__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Language
   * @description Update Language
   *
   * - **id**: UUID - the ID of Language to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_languages__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Language
   * @description Delete Language
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_languages__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all LanguageProficiencies
   * @description Get all LanguageProficiencies
   *
   * - **skip**: int - The number of LanguageProficiencies
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of LanguageProficiencies
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_language_proficiencies_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["LanguageProficiencyRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new LanguageProficiency
   *
   * - **name**: required
   */
  create_api_v1_education_language_proficiencies_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageProficiencyCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["LanguageProficiencyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get LanguageProficiency by id
   * @description Get LanguageProficiency by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_language_proficiencies__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageProficiencyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update LanguageProficiency
   * @description Update LanguageProficiency
   *
   * - **id**: UUID - the ID of LanguageProficiency to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_language_proficiencies__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageProficiencyUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageProficiencyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete LanguageProficiency
   * @description Delete LanguageProficiency
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_language_proficiencies__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Sciences
   * @description Get all Sciences
   *
   * - **skip**: int - The number of Sciences
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Sciences
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_sciences_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScienceReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new Science
   *
   * - **name**: required
   */
  create_api_v1_education_sciences_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScienceCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ScienceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Science by id
   * @description Get Science by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_sciences__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScienceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Science
   * @description Update Science
   *
   * - **id**: UUID - the ID of Science to update.
   *     This is required.
   * - **name**: required.
   */
  update_api_v1_education_sciences__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScienceUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScienceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Science
   * @description Delete Science
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_sciences__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Specialties
   * @description Get all Specialties
   *
   * - **skip**: int - The number of Specialties
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Specialties
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_specialties_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpecialtyReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new Specialty
   *
   * - **name**: required
   */
  create_api_v1_education_specialties_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpecialtyCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SpecialtyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Specialty by id
   * @description Get Specialty by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_specialties__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpecialtyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Specialty
   * @description Update Specialty
   *
   * - **id**: UUID - the ID of Specialty to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_specialties__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpecialtyUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpecialtyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Specialty
   * @description Delete Specialty
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_specialties__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Courses
   * @description Get all Courses
   *
   * - **skip**: int - The number of Courses
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Courses
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_courses_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CourseRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new Course
   *
   * - **name**: required
   */
  create_api_v1_education_courses_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CourseCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CourseRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Course by id
   * @description Get Course by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_courses__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CourseRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Course
   * @description Update Course
   *
   * - **id**: UUID - the ID of Course to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_courses__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CourseUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CourseRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Course
   * @description Delete Course
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_courses__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all CourseProviders
   * @description Get all CourseProviders
   *
   * - **skip**: int - The number of CourseProviders
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of CourseProviders
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_course_providers_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CourseProviderReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new CourseProvider
   *
   * - **name**: required
   */
  create_api_v1_education_course_providers_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CourseProviderCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CourseProviderRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get CourseProvider by id
   * @description Get CourseProvider by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_course_providers__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CourseProviderRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update CourseProvider
   * @description Update CourseProvider
   *
   * - **id**: UUID - the ID of CourseProvider to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_course_providers__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CourseProviderUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CourseProviderRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete CourseProvider
   * @description Delete CourseProvider
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_course_providers__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all AcademicTitleDegrees
   * @description Get all AcademicTitleDegrees
   *
   * - **skip**: int - The number of AcademicTitleDegrees
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of AcademicTitleDegrees
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_education_academic_title_degrees_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicTitleDegreeReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new AcademicTitleDegree
   *
   * - **name**: required
   */
  create_api_v1_education_academic_title_degrees_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcademicTitleDegreeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AcademicTitleDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get AcademicTitleDegree by id
   * @description Get AcademicTitleDegree by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_education_academic_title_degrees__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicTitleDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update AcademicTitleDegree
   * @description Update AcademicTitleDegree
   *
   * - **id**: UUID - the ID of AcademicTitleDegree to update. This is required.
   * - **name**: required.
   */
  update_api_v1_education_academic_title_degrees__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcademicTitleDegreeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AcademicTitleDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete AcademicTitleDegree
   * @description Delete AcademicTitleDegree
   *
   * - **id**: UUId - required
   */
  delete_api_v1_education_academic_title_degrees__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all AnthropometricData
   * @description Get all AnthropometricData
   *
   * - **skip**: int - The number of AnthropometricData
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of AnthropometricData
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_medical_anthropometric_data_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AnthropometricDataRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create AnthropometricData
   * @description Create new AnthropometricData
   *
   * - **head_circumference**: int
   * - **shoe_size**: int
   * - **neck_circumference**: int
   * - **shape_size**: int
   * - **bust_size**: int
   * - **profile_id**: str
   */
  create_api_v1_medical_anthropometric_data_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AnthropometricDataCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AnthropometricDataRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get AnthropometricData by id
   * @description Get Anthropometric Data by id
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_medical_anthropometric_data__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AnthropometricDataRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update AnthropometricData
   * @description Update AnthropometricData
   *
   * - **id**: UUID - the ID of AnthropometricData to update. This is required.
   * - **head_circumference**: int
   * - **shoe_size**: int
   * - **neck_circumference**: int
   * - **shape_size**: int
   * - **bust_size**: int
   * - **profile_id**: str
   */
  update_api_v1_medical_anthropometric_data__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AnthropometricDataUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AnthropometricDataRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete AnthropometricData
   * @description Delete AnthropometricData
   * - **id**: UUId - required
   */
  delete_api_v1_medical_anthropometric_data__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all DispensaryRegistration
   * @description Get all DispensaryRegistration
   *
   * - **skip**: int - The number of DispensaryRegistration
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of DispensaryRegistration
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_medical_dispensary_registration_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["DispensaryRegistrationRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create DispensaryRegistration
   * @description Create new DispensaryRegistration
   *
   * - **initiator**: str
   * - **start_date**: datetime.datetime
   * - **end_date**: datetime.datetime
   * - **document_link**: str
   * - **profile_id**: str
   */
  create_api_v1_medical_dispensary_registration_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DispensaryRegistrationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DispensaryRegistrationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get DispensaryRegistration by id
   * @description Get DispensaryRegistration by id
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_medical_dispensary_registration__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DispensaryRegistrationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update DispensaryRegistration
   * @description Update AcademicDegree
   *
   * - **id**: UUID - the ID of DispensaryRegistration to update. This is required.
   * - **initiator**: str
   * - **start_date**: datetime.datetime
   * - **end_date**: datetime.datetime
   * - **document_link**: str
   * - **profile_id**: str
   */
  update_api_v1_medical_dispensary_registration__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DispensaryRegistrationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DispensaryRegistrationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete DispensaryRegistration
   * @description Delete a DispensaryRegistration
   * - **id**: UUId - required
   */
  delete_api_v1_medical_dispensary_registration__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all AgeGroup
   * @description Get all AgeGroupEnum
   */
  get_all_api_v1_medical_age_group_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all GeneralUserInformation
   * @description Get all GeneralUserInformation
   *
   * - **skip**: int - The number of GeneralUserInformation
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of GeneralUserInformation
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_medical_general_user_information_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["GeneralUserInformationRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create GeneralUserInformation
   * @description Create new GeneralUserInformation
   *
   * - **height**: int
   * - **blood_group**: str
   * - **age_group**: int
   * - **profile_id**: str
   */
  create_api_v1_medical_general_user_information_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralUserInformationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["GeneralUserInformationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get GeneralUserInformation by id
   * @description Get GeneralUserInformation by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_medical_general_user_information__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GeneralUserInformationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update GeneralUserInformation
   * @description Update GeneralUserInformation
   *
   * - **id**: UUID - the ID of GeneralUserInformation to update. This is required.
   * - **height**: int
   * - **blood_group**: str
   * - **age_group**: int
   * - **profile_id**: str
   */
  update_api_v1_medical_general_user_information__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralUserInformationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GeneralUserInformationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete GeneralUserInformation
   * @description Delete a GeneralUserInformation
   *
   * - **id**: UUID - required
   */
  delete_api_v1_medical_general_user_information__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all HospitalData
   * @description Get all HospitalData
   *
   * - **skip**: int - The number of HospitalData
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HospitalData
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_medical_hospital_data_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HospitalDataRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create HospitalData
   * @description Create new HospitalData
   *
   * - **code**: str
   * - **reason**: str
   * - **place**: str
   * - **start_date**: datetime.datetime
   * - **end_date**: datetime.datetime
   * - **document_link**: str
   * - **profile_id**: str
   */
  create_api_v1_medical_hospital_data_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HospitalDataCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HospitalDataRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HospitalData by id
   * @description Get Hospital Data by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_medical_hospital_data__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HospitalDataRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update HospitalData
   * @description Update HospitalData
   *
   * - **id**: UUID - the ID of Hospital Data to update. This is required.
   * - **code**: str
   * - **reason**: str
   * - **place**: str
   * - **start_date**: datetime.datetime
   * - **end_date**: datetime.datetime
   * - **document_link**: str
   * - **profile_id**: str
   */
  update_api_v1_medical_hospital_data__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HospitalDataUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HospitalDataRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete HospitalData
   * @description Delete a HospitalData
   *
   * - **id**: UUId - required
   */
  delete_api_v1_medical_hospital_data__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all MedicalProfile
   * @description Get all Medical Profile
   *
   * - **skip**: int - The number of MedicalProfile
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of MedicalProfile
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_medical_medical_profile_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["MedicalProfileRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create MedicalProfile
   * @description Create new MedicalProfile
   *
   * - **profile_id**: str
   */
  create_api_v1_medical_medical_profile_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MedicalProfileCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["MedicalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get MedicalProfile by id
   * @description Get MedicalProfile by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_medical_medical_profile__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MedicalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update MedicalProfile
   * @description Update Medical Profile
   *
   * - **id**: UUID - the ID of MedicalProfile to update. This is required.
   * - **profile_id**: str
   */
  update_api_v1_medical_medical_profile__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MedicalProfileUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MedicalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete MedicalProfile
   * @description Delete a MedicalProfile
   *
   * - **id**: UUId - required
   */
  delete_api_v1_medical_medical_profile__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Profile */
  get_profile_api_v1_medical_medical_profile_profile_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MedicalProfileRead"];
        };
      };
    };
  };
  /** Get Profile By Id */
  get_profile_by_id_api_v1_medical_medical_profile_profile__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MedicalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all UserLiberation
   * @description Get all UserLiberation
   *
   * - **skip**: int - The number of UserLiberation
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of UserLiberation
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_medical_user_liberations_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["UserLiberationRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create UserLiberation
   * @description Create new UserLiberation
   *
   * - **reason**: str
   * - **liberation_name**: str
   * - **initiator**: str
   * - **start_date**: datetime.datetime
   * - **end_date**: datetime.datetime
   * - **profile_id**: str
   */
  create_api_v1_medical_user_liberations_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLiberationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserLiberationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get UserLiberation by id
   * @description Get UserLiberation by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_medical_user_liberations__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserLiberationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update UserLiberation
   * @description Update UserLiberation
   *
   * - **id**: UUID - the ID of UserLiberation to update. This is required.
   * - **reason**: str
   * - **liberation_name**: str
   * - **initiator**: str
   * - **start_date**: datetime.datetime
   * - **end_date**: datetime.datetime
   * - **profile_id**: str
   */
  update_api_v1_medical_user_liberations__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLiberationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserLiberationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete UserLiberation
   * @description Delete a UserLiberation
   *
   * - **id**: UUId - required
   */
  delete_api_v1_medical_user_liberations__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Liberation
   * @description Get all Liberation
   *
   * - **skip**: int - The number of Liberation
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Liberation
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_medical_liberations_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LiberationReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Liberation
   * @description Create new Liberation
   *
   * - **name**: str -required
   */
  create_api_v1_medical_liberations_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LiberationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["LiberationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Liberation by id
   * @description Get Hospital Data by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_medical_liberations__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LiberationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Liberation
   * @description Update Liberation
   *
   * - **id**: UUID - required.
   * - **name**: str -required
   */
  update_api_v1_medical_liberations__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LiberationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LiberationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Liberation
   * @description Delete a Liberation
   *
   * - **id**: UUId - required
   */
  delete_api_v1_medical_liberations__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All */
  get_all_api_v1_medical_blood_types_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all Profiles
   * @description Get all Profiles
   */
  get_all_api_v1_profile_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ProfileRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new profile
   *
   * no parameters required.
   */
  create_api_v1_profile_post: {
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ProfileRead"];
        };
      };
    };
  };
  /**
   * Get Profile by id
   * @description Get profile by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_profile__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Profile
   * @description Update Profile
   */
  update_api_v1_profile__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfileUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Profile
   * @description Delete Profile
   *
   * - **id**: UUId - required
   */
  delete_api_v1_profile__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all FamilyStatus
   * @description Get all FamilyStatus
   *
   * - **skip**: int - The number of FamilyStatus
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of FamilyStatus
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_family_status_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["FamilyStatusRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get FamilyStatus by id
   * @description Get FamilyStatus by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_family_status__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyStatusRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Profile By Id */
  get_profile_by_id_api_v1_personal_family_status_user__user_id__get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyStatusRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all BiographicInfo
   * @description Get all BiographicInfo
   *
   * - **skip**: int - The number of BiographicInfo
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of BiographicInfo
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_biographic_info_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["BiographicInfoRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create BiographicInfo
   * @description Create new BiographicInfo
   *
   * - **place_birth**: datetime.date -
   * - **gender**: bool
   * - **citizenship**: str
   * - **nationality**: str
   * - **family_status**: str
   * - **address**: str
   * - **profile_id**: str
   */
  create_api_v1_personal_biographic_info_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BiographicInfoCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["BiographicInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get BiographicInfo by id
   * @description Get BiographicInfo by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_biographic_info__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BiographicInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update BiographicInfo
   * @description Update BiographicInfo
   *
   * - **id**: UUID - the ID of BiographicInfo to update. This is required.
   * - **residence_address**: str
   */
  update_api_v1_personal_biographic_info__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BiographicInfoUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BiographicInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete BiographicInfo
   * @description Delete BiographicInfo
   *
   * - **id**: UUId - required
   */
  delete_api_v1_personal_biographic_info__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all DrivingLicense
   * @description Get all DrivingLicense
   *
   * - **skip**: int - The number of DrivingLicense
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of DrivingLicense
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_driving_license_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["DrivingLicenseRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create DrivingLicense
   * @description Create new DrivingLicense
   *
   * - **document_number**: str
   * - **category**: List[str]
   * - **date_of_issue**: datetime.date
   * - **date_to**: datetime.date
   * - **document_link**: str
   * - **profile_id**: str
   */
  create_api_v1_personal_driving_license_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DrivingLicenseCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DrivingLicenseRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get DrivingLicense by id
   * @description Get DrivingLicense by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_driving_license__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DrivingLicenseRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update DrivingLicense
   * @description Update DrivingLicense
   *
   * - **id**: UUID - the ID of DrivingLicense to update. This is required.
   * - **document_link**: str (url)
   */
  update_api_v1_personal_driving_license__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DrivingLicenseUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DrivingLicenseRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete DrivingLicense
   * @description Delete DrivingLicense
   *
   * - **id**: UUId - required
   */
  delete_api_v1_personal_driving_license__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update DrivingLicense document_link
   * @description Update DrivingLicense document_link
   *
   * - **id**: UUID - the ID of DrivingLicense to update. This is required.
   * - **document_link**: str (url)
   */
  update_document_link_api_v1_personal_driving_license__id__document_link__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DrivingLicenseLinkUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all IdentificationCard
   * @description Get all IdentificationCard
   *
   * - **skip**: int - The number of IdentificationCard
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of IdentificationCard
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_identification_card_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["IdentificationCardRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create IdentificationCard
   * @description Create new IdentificationCard
   *
   * - **document_number**: str
   * - **date_of_issue**: datetime.date
   * - **date_to: datetime**.date
   * - **issued_by**: str
   * - **document_link**: str
   * - **profile_id**: str
   */
  create_api_v1_personal_identification_card_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentificationCardCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["IdentificationCardRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get IdentificationCard by id
   * @description Get IdentificationCard by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_identification_card__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["IdentificationCardRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update IdentificationCard
   * @description Update IdentificationCard
   *
   * - **id**: UUID - the ID of IdentificationCard to update. This is required.
   * - **document_link**: str (url)
   */
  update_api_v1_personal_identification_card__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentificationCardUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["IdentificationCardRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete IdentificationCard
   * @description Delete IdentificationCard
   *
   * - **id**: UUId - required
   */
  delete_api_v1_personal_identification_card__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Passport
   * @description Get all Passport
   *
   * - **skip**: int - The number of Passport
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Passport
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_passport_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PassportRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Passport
   * @description Create new Passport
   *
   * - **document_number**: str
   * - **date_of_issue**: datetime.date
   * - **date_to**: datetime.date
   * - **document_link**: str
   * - **profile_id**: str
   */
  create_api_v1_personal_passport_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PassportCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PassportRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Passport by id
   * @description Get Passport by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_passport__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PassportRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Passport
   * @description Update Passport
   *
   * - **id**: UUID - the ID of Passport to update. This is required.
   * - **document_link**: str (url)
   */
  update_api_v1_personal_passport__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PassportUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PassportRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Passport
   * @description Delete Passport
   *
   * - **id**: UUId - required
   */
  delete_api_v1_personal_passport__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all PersonalProfiles
   * @description Get all PersonalProfiles
   *
   * - **skip**: int - The number of PersonalProfiles
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of PersonalProfiles
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_personal_profile_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PersonalProfileRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create PersonalProfiles
   * @description Create new PersonalProfiles
   *
   * no parameters required
   */
  create_api_v1_personal_personal_profile_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PersonalProfileCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PersonalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get random personal document
   * @description Get all PersonalProfiles
   *
   * - **skip**: int - The number of PersonalProfiles
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of PersonalProfiles
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_rand_api_v1_personal_personal_profile_rand__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get PersonalProfiles by id
   * @description Get PersonalProfiles by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_personal_profile__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PersonalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete PersonalProfiles
   * @description Delete PersonalProfiles
   *
   * - **id**: UUId - required
   */
  delete_api_v1_personal_personal_profile__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Profile */
  get_profile_api_v1_personal_personal_profile_profile_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PersonalProfileRead"];
        };
      };
    };
  };
  /** Get Profile By Id */
  get_profile_by_id_api_v1_personal_personal_profile_profile__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PersonalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all SportAchievement
   * @description Get all SportAchievement
   *
   * - **skip**: int - The number of SportAchievement
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of SportAchievement
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_sport_achievement_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["SportAchievementRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create SportAchievement
   * @description Create new SportAchievement
   *
   * - **name**: str
   * - **assignment_date**: datetime.date
   * - **document_link**: str
   * - **profile_id**: str
   */
  create_api_v1_personal_sport_achievement_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SportAchievementCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SportAchievementRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get SportAchievement by id
   * @description Get SportAchievement by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_sport_achievement__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportAchievementRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update SportAchievement
   * @description Update SportAchievement
   *
   * - **id**: UUID - the ID of SportAchievement to update. This is required.
   * - **name**: str
   * - **assignment_date**: datetime.date
   * - **document_link**: str
   * - **profile_id**: str
   */
  update_api_v1_personal_sport_achievement__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SportAchievementUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportAchievementRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete SportAchievement
   * @description Delete SportAchievement
   *
   * - **id**: UUId - required
   */
  delete_api_v1_personal_sport_achievement__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all SportDegree
   * @description Get all SportDegree
   *
   * - **skip**: int - The number of SportDegree
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of SportDegree
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_sport_degree_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["SportDegreeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create SportDegree
   * @description Create new SportDegree
   *
   * - **name**: str
   * - **assignment_date**: datetime.date
   * - **document_link**: str
   * - **profile_id**: str
   */
  create_api_v1_personal_sport_degree_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SportDegreeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SportDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get SportDegree by id
   * @description Get SportDegree by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_sport_degree__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update SportDegree
   * @description Update SportDegree
   *
   * - **id**: UUID - the ID of SportDegree to update. This is required.
   * - **name**: str
   * - **assignment_date**: datetime.date
   * - **document_link**: str
   * - **profile_id**: str
   */
  update_api_v1_personal_sport_degree__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SportDegreeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportDegreeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete SportDegree
   * @description Delete SportDegree
   *
   * - **id**: UUId - required
   */
  delete_api_v1_personal_sport_degree__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all TaxDeclaration
   * @description Get all TaxDeclaration
   *
   * - **skip**: int - The number of TaxDeclaration
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of TaxDeclaration
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_tax_declaration_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["TaxDeclarationRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create TaxDeclaration
   * @description Create new TaxDeclaration
   *
   * - **id**: UUID - the ID of TaxDeclaration to update. This is required.
   * - **year**: str
   * - **is_paid**: bool
   * - **profile_id**: str
   */
  create_api_v1_personal_tax_declaration_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaxDeclarationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TaxDeclarationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get TaxDeclaration by id
   * @description Get TaxDeclaration by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_tax_declaration__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TaxDeclarationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update TaxDeclaration
   * @description Update TaxDeclaration
   *
   * - **year**: str
   * - **is_paid**: bool
   * - **profile_id**: str
   */
  update_api_v1_personal_tax_declaration__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaxDeclarationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TaxDeclarationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete TaxDeclaration
   * @description Delete TaxDeclaration
   *
   * - **id**: UUId - required
   */
  delete_api_v1_personal_tax_declaration__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all UserFinancialInfo
   * @description Get all UserFinancialInfo
   *
   * - **skip**: int - The number of UserFinancialInfo
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of UserFinancialInfo
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_user_financial_info_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["UserFinancialInfoRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create UserFinancialInfo
   * @description Create new UserFinancialInfo
   *
   * - **iban**: str
   * - **housing_payments_iban**: str
   * - **profile_id**: str
   */
  create_api_v1_personal_user_financial_info_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserFinancialInfoCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserFinancialInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get UserFinancialInfo by id
   * @description Get UserFinancialInfo by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_personal_user_financial_info__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserFinancialInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update UserFinancialInfo
   * @description Update UserFinancialInfo
   *
   * - **id**: UUID - the ID of UserFinancialInfo to update. This is required.
   * - **iban**: str
   * - **housing_payments_iban**: str
   * - **profile_id**: str
   */
  update_api_v1_personal_user_financial_info__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserFinancialInfoUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserFinancialInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete UserFinancialInfo
   * @description Delete UserFinancialInfo
   *
   * - **id**: UUId - required
   */
  delete_api_v1_personal_user_financial_info__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all SportType
   * @description Get all SportType
   *
   * - **skip**: int - The number of SportType
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of SportType
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_sport_type_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportTypePaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create SportType
   * @description Create new SportType
   *
   * - **name**: str
   */
  create_api_v1_personal_sport_type_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SportTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SportTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get SportType by id
   * @description Get SportType by id
   */
  get_by_id_api_v1_personal_sport_type__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update SportType by id
   * @description Update SportType by id
   *
   * - **name**: str
   */
  update_api_v1_personal_sport_type__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SportTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete SportType by id
   * @description Delete SportType by id
   */
  delete_api_v1_personal_sport_type__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all SportDereeTypes
   * @description Get all SportDegreeTypes
   *
   * - **skip**: int - The number of SportType
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of SportType
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_personal_sport_degree_type_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportDegreeTypePaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create SportDegreeType
   * @description Create new SportDegreeType
   *
   * - **name**: str
   */
  create_api_v1_personal_sport_degree_type_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SportDegreeTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SportDegreeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get SportDegreeType by id
   * @description Get SportDegreeType by id
   */
  get_by_id_api_v1_personal_sport_degree_type__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportDegreeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update SportDegreeType by id
   * @description Update SportDegreeType by id
   *
   * - **name**: str
   */
  update_api_v1_personal_sport_degree_type__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SportDegreeTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportDegreeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete SportDegreeType by id
   * @description Delete SportDegreeType by id
   */
  delete_api_v1_personal_sport_degree_type__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SportDegreeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Abroad Travel
   * @description Get all Abroad Travel
   *
   * - **skip**: int - The number of abroad travel to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of abroad travel to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_abroad_travel_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AbroadTravelRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new abroad travel
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_abroad_travel_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AbroadTravelCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AbroadTravelRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Abroad Travel by id
   * @description Update abroad travel by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_abroad_travel__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AbroadTravelUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AbroadTravelRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Abroad Travel by id
   * @description Delete abroad travel by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_abroad_travel__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AbroadTravelRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Additional Profile
   * @description Get all Abroad Travel
   *
   * - **skip**: int - The number of abroad travel to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of abroad travel to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_additional_profile_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AdditionalProfileRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new abroad travel
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_additional_profile_post: {
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["AdditionalProfileCreate"];
        };
      };
    };
  };
  /**
   * Get Additional Profile by id
   * @description Get additional profile by id
   *
   * - **name**: required
   */
  get_by_id_api_v1_additional_additional_profile__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AdditionalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Abroad Travel by id
   * @description Update abroad travel by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_additional_profile__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdditionalProfileUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AdditionalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Abroad Travel by id
   * @description Delete abroad travel by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_additional_profile__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AdditionalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Profile */
  get_profile_api_v1_additional_additional_profile_profile_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AdditionalProfileRead"];
        };
      };
    };
  };
  /** Get Profile By Id */
  get_profile_by_id_api_v1_additional_additional_profile_profile__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AdditionalProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Polygraph Check
   * @description Get all Abroad Travel
   *
   * - **skip**: int - The number of abroad travel to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of abroad travel to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_polygraph_check_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PolygraphCheckRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new polyhraph_check
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_polygraph_check_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PolygraphCheckCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PolygraphCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update polyhraph_check by id
   * @description Update polyhraph_check by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_polygraph_check__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PolygraphCheckUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PolygraphCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete polyhraph_check by id
   * @description Delete polyhraph_check by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_polygraph_check__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PolygraphCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all psychological check
   * @description Get all psychological check
   *
   * - **skip**: int - The number of psychological check to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of psychological check to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_psychological_check_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PsychologicalCheckRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new psychological check
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_psychological_check_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PsychologicalCheckCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PsychologicalCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update psychological check by id
   * @description Update psychological check by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_psychological_check__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PsychologicalCheckUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PsychologicalCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete psychological check by id
   * @description Delete psychological check by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_psychological_check__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PsychologicalCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Polygraph Check
   * @description Get all special_check
   *
   * - **skip**: int - The number of special_check to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of special_check to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_special_check_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["SpecialCheckRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new special_check
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_special_check_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpecialCheckCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SpecialCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Abroad Travel by id
   * @description Update special_check by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_special_check__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpecialCheckUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpecialCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete special_check by id
   * @description Delete special_check by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_special_check__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SpecialCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Polygraph Check
   * @description Get all Abroad Travel
   *
   * - **skip**: int - The number of abroad travel to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of abroad travel to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_violation_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ViolationRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new abroad travel
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_violation_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ViolationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ViolationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Abroad Travel by id
   * @description Update abroad travel by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_violation__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ViolationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ViolationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Abroad Travel by id
   * @description Delete abroad travel by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_violation__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ViolationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Properties
   * @description Get all Properties
   *
   * - **skip**: int - The number of Propertiers to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Properties to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_properties_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PropertiesRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new abroad travel
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_properties_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertiesCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PropertiesRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update property by id
   * @description Update property by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_properties__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertiesUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PropertiesRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete properties by id
   * @description Delete properties by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_properties__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PropertiesRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Properties
   * @description Get all Properties
   *
   * - **skip**: int - The number of Properties to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Properties to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_property_types_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyTypePaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new abroad travel
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_property_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertyTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PropertyTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Property Type by id
   * @description Get property type by id
   */
  get_by_id_api_v1_additional_property_types__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Property Type by id
   * @description Update Property Type by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_property_types__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertyTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete properties by id
   * @description Delete properties by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_property_types__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Service Housings
   * @description Get all Service Housings
   *
   * - **skip**: int - The number of Service Housings to skip before returning
   *             the results
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Service Housings to return in the response
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_service_housings_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ServiceHousingRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new abroad travel
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_service_housings_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceHousingCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ServiceHousingRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Update Service Housing
   *
   * - **id**: required
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_service_housings__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceHousingUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceHousingRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete
   * @description Delete Service Housing
   *
   * - **id**: required
   */
  delete_api_v1_additional_service_housings__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceHousingRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Vehicles
   * @description Get all vehicle
   *
   * - **skip**: int - The number of vehicle to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of vehicle to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_vehicle_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["VehicleRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Vehicle
   * @description Create new vehicle
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_vehicle_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VehicleCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["VehicleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Vehicle by id
   * @description Get vehicle by id
   *
   * - **skip**: int - The number of vehicle to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of vehicle to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_by_id_api_v1_additional_vehicle__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Vehicle by id
   * @description Update abroad travel by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_vehicle__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VehicleUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Vehicle by id
   * @description Delete vehicle by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_vehicle__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Country
   * @description Get all Country
   *
   * - **skip**: int - The number of country to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of country to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_country_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CountryReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new country
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_country_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CountryCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CountryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Country by id
   * @description Get country by id
   */
  get_by_id_api_v1_additional_country__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CountryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update
   * @description Update country
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_country__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CountryUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CountryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete
   * @description Delete country
   */
  delete_api_v1_additional_country__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CountryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all VehicleTypes
   * @description Get all vehicle_type
   *
   * - **skip**: int - The number of vehicle_type to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of vehicle_type to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_additional_vehicle_type_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleTypeReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create VehicleType
   * @description Create new vehicle_type
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_additional_vehicle_type_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VehicleTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["VehicleTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get VehicleType by id
   * @description Get vehicle_type by id
   *
   * - **skip**: int - The number of vehicle_type to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of vehicle_type to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_by_id_api_v1_additional_vehicle_type__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update VehicleType by id
   * @description Update abroad travel by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  update_api_v1_additional_vehicle_type__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VehicleTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete VehicleType by id
   * @description Delete vehicle_type by id
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  delete_api_v1_additional_vehicle_type__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VehicleTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All */
  get_all_api_v1_family_families_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["FamilyRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_api_v1_family_families_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FamilyCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["FamilyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add Violation */
  add_violation_api_v1_family_families_violation__family_id___post: {
    parameters: {
      path: {
        family_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ViolationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["FamilyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add Abroad Travel */
  add_violation_api_v1_family_families_abroad_travel__family_id___post: {
    parameters: {
      path: {
        family_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AbroadTravelCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["FamilyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get */
  get_api_v1_family_families__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update */
  update_api_v1_family_families__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FamilyUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete */
  delete_api_v1_family_families__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All */
  get_all_api_v1_family_family_relations_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyRelationReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get By Id */
  get_by_id_api_v1_family_family_relations__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyRelationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All */
  get_all_api_v1_family_family_profiles_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["FamilyProfileRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_api_v1_family_family_profiles_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FamilyProfileCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["FamilyProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get */
  get_api_v1_family_family_profiles__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update */
  update_api_v1_family_family_profiles__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FamilyProfileUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete */
  delete_api_v1_family_family_profiles__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get By Profile */
  get_by_profile_api_v1_family_family_profiles_profile_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyProfileRead"];
        };
      };
    };
  };
  /** Get By Profile Id */
  get_by_profile_id_api_v1_family_family_profiles_profile__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FamilyProfileRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Staff Lists
   * @description Get all Staff Lists
   *
   * - **skip**: int - The number of staff divisions
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff divisions
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_staff_list_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["StaffListRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Staff List
   * @description Create Staff List
   * - **parent_group_id**: the id of the parent group. This parameter is optional.
   * - **name**: required
   * - **description**: a long description. This parameter is optional.
   */
  create_api_v1_staff_list_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffListUserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff List history
   * @description Get Staff Lists drafts
   *
   * - **skip**: int - The number of staff divisions
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff divisions
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_drafts_api_v1_staff_list_drafts__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["StaffListStatusRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff List history
   * @description Get Staff Lists signed
   *
   * - **skip**: int - The number of staff divisions
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff divisions
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_signed_api_v1_staff_list_signed__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["StaffListStatusRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Staff List task status */
  get_result_api_v1_staff_list_task_status__task_id__get: {
    parameters: {
      path: {
        task_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff List by id
   * @description Get Staff List by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_staff_list__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffListRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Staff List
   * @description Update Staff List
   *
   * - **id**: UUID - id of the Staff Division.
   * - **parent_group_id**: the id of the parent group.
   *     This parameter is optional.
   * - **name**: required
   * - **description**: a long description.
   *     This parameter is optional.
   */
  update_api_v1_staff_list__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffListUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffListRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Staff List
   * @description Delete Staff List
   *
   * - **id**: UUID - required
   */
  delete_api_v1_staff_list__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Apply Staff List
   * @description Update Staff List
   *
   * - **id**: UUID - id of the Staff List.
   * - **signed_by**: required
   * - **document_creation_date**: required
   * - **date_from**: date - format (YYYY-MM-DD).
   *     This parameter is required.
   */
  apply_staff_list_api_v1_staff_list_apply__id___post: {
    parameters: {
      query: {
        signed_by: string;
        document_creation_date: string;
        rank: string;
        document_number: string;
        document_link?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StaffListApplyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Duplicate Staff List
   * @description Duplicate Staff List
   *
   * - **id**: UUID - id of the Staff List.
   */
  duplicate_api_v1_staff_list_duplicate__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffListUserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["StaffListRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Staff Divisions
   * @description Get all Staff Divisions
   *
   * - **skip**: int - The number of staff divisions
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff divisions
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_archive_staff_division_get: {
    parameters: {
      query: {
        staff_list_id: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ArchiveStaffDivisionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Staff Division
   * @description Create Staff Division
   *
   * - **parent_group_id**: the id of the parent group. This parameter is optional.
   * - **name**: required
   * - **description**: a long description. This parameter is optional.
   */
  create_api_v1_archive_staff_division_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArchiveStaffDivisionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division one level by id
   * @description Get all Staff Divisions
   *
   * - **id**: uuid - The id of staff division. This parameter is required.
   */
  get_all_one_level_for_id_api_v1_archive_staff_division_one_level__get: {
    parameters: {
      query: {
        staff_division_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffDivisionStepRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Archive Staff Division and all his parents
   * @description Get all Staff Divisions
   *
   * - **id**: uuid - The id of staff division. This parameter is required.
   */
  get_division_parents_by_id_api_v1_archive_staff_division_division_parents__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Duplicate Staff Division by id
   * @description Get Staff Division by id
   *
   * - **id**: UUID - required
   */
  duplicate_api_v1_archive_staff_division_duplicate__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Division by id
   * @description Get Staff Division by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_archive_staff_division__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Staff Division
   * @description Update Staff Division
   *
   * - **id**: UUID - id of the Staff Division.
   * - **parent_group_id**: the id of the parent group. This parameter is optional.
   * - **name**: required
   * - **description**: a long description. This parameter is optional.
   */
  update_api_v1_archive_staff_division__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArchiveStaffDivisionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update parent of Staff Division
   * @description Update parent of Staff Division
   *
   * - **id**: UUID - staff division id. It is required
   * - **parent_group_id**: the id of the parent group. It is required
   */
  update_parent_api_v1_archive_staff_division__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArchiveStaffDivisionUpdateParentGroup"];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffDivisionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Staff Division
   * @description Delete Staff Division
   *
   * - **id**: UUID - required
   */
  delete_api_v1_archive_staff_division__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ArchiveStaffFunction
   * @description Get all ArchiveStaffFunction
   *
   * - **skip**: int - The number of ArchiveStaffFunction
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ArchiveStaffFunction
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_service_archive_staff_function_type_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ServiceArchiveStaffFunctionTypeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create ArchiveStaffFunction
   * @description Create ArchiveStaffFunction
   *
   * - **parent_group_id**: the id of the parent group.
   *     This parameter is optional.
   * - **name**: required
   * - **description**: a long description. This parameter is optional.
   */
  create_api_v1_service_archive_staff_function_type_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewServiceArchiveStaffFunctionTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ServiceArchiveStaffFunctionTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ArchiveStaffFunction by id
   * @description Get ArchiveStaffFunction by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_service_archive_staff_function_type__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceArchiveStaffFunctionTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ArchiveStaffFunction
   * @description Update ArchiveStaffFunction
   *
   * - **id**: UUID - id of the ArchiveStaffFunction.
   * - **parent_group_id**: the id of the parent group.
   *     This parameter is optional.
   * - **name**: required
   * - **description**: a long description.
   *     This parameter is optional.
   */
  update_api_v1_service_archive_staff_function_type__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewServiceArchiveStaffFunctionTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceArchiveStaffFunctionTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ArchiveStaffFunction
   * @description Delete ArchiveStaffFunction
   *
   * - **id**: UUID - required
   */
  delete_api_v1_service_archive_staff_function_type__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ServiceStaffFunction
   * @description Get all ServiceStaffFunction
   *
   * - **skip**: int - The number of ServiceStaffFunction
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ServiceStaffFunction
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_archive_service_staff_function_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ArchiveServiceStaffFunctionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create ServiceStaffFunction
   * @description Create ServiceStaffFunction
   *
   * - **name**: required
   * - **service_function_type_id**: UUID - required.
   *     The id of service function type.
   * - **spend_hours_per_week**: int - optional.
   */
  create_api_v1_archive_service_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArchiveServiceStaffFunctionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ArchiveServiceStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ServiceStaffFunction by id
   * @description Get ServiceStaffFunction by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_archive_service_staff_function__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveServiceStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ServiceStaffFunction
   * @description Update ServiceStaffFunction
   *
   * - **name**: required
   * - **service_function_type_id**: UUID - required.
   *     The id of service function type.
   * - **spend_hours_per_week**: int - optional.
   */
  update_api_v1_archive_service_staff_function__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArchiveServiceStaffFunctionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveServiceStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ServiceStaffFunction
   * @description Delete ServiceStaffFunction
   *
   * - **id**: UUID - required
   */
  delete_api_v1_archive_service_staff_function__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Duplicate
   * @description Duplicate ServiceStaffFunction
   *
   * - **id**: UUID - required
   */
  duplicate_api_v1_archive_service_staff_function_duplicate__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ArchiveServiceStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ArchiveDocumentStaffFunction
   * @description Get all DocumentStaffFunction
   *
   * - **skip**: int - The number of DocumentStaffFunction
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of DocumentStaffFunction
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_archive_document_staff_function_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ArchiveDocumentStaffFunctionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ArchiveDocumentStaffFunction by id
   * @description Get DocumentStaffFunction by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_archive_document_staff_function__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveDocumentStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ArchiveDocumentStaffFunction
   * @description Update DocumentStaffFunction
   */
  update_api_v1_archive_document_staff_function__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArchiveDocumentStaffFunctionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveDocumentStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all StaffFunction
   * @description Get all StaffFunction
   *
   * - **skip**: int - The number of StaffFunction to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of StaffFunction to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_archive_staff_function_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AllArchiveStaffFunctionsRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create StaffFunction
   * @description Create StaffFunction
   *
   * - **name**: required
   * - **service_function_type_id**: UUID - required.
   *     The id of service function type.
   * - **spend_hours_per_week**: int - optional.
   */
  create_api_v1_archive_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArchiveStaffFunctionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get StaffFunction by id
   * @description Get StaffFunction by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_archive_staff_function__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update StaffFunction
   * @description Update StaffFunction
   *
   * - **name**: required
   * - **service_function_type_id**: UUID - required.
   *     The id of service function type.
   * - **spend_hours_per_week**: int - optional.
   */
  update_api_v1_archive_staff_function__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArchiveStaffFunctionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete StaffFunction
   * @description Delete StaffFunction
   *
   * - **id**: UUID - required
   */
  delete_api_v1_archive_staff_function__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Duplicate
   * @description Duplicate StaffFunction
   *
   * - **id**: UUID - required
   */
  duplicate_api_v1_archive_staff_function_duplicate__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffFunctionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Staff Units
   * @description Get all Staff Units
   *
   * - **skip**: int - The number of staff units to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff units to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_archive_staff_unit_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ArchiveStaffUnitRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Staff Unit
   * @description Create Staff Unit
   *
   * - **name**: required
   * - **max_rank_id**: UUID - required and should exist in the database
   * - **description**: a long description. This parameter is optional.
   */
  create_api_v1_archive_staff_unit_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArchiveStaffUnitCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Unit by id
   * @description Get Staff Unit by id
   *
   * - **id** - UUID - required
   */
  get_by_id_api_v1_archive_staff_unit__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Staff Unit
   * @description Update Staff Unit
   *
   * - **id**: UUID - required
   * - **name**: required
   * - **max_rank_id**: UUID - required and should exist in the database
   * - **description**: a long description. This parameter is optional.
   */
  update_api_v1_archive_staff_unit__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArchiveStaffUnitUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Staff Unit
   * @description Delete Staff Unit
   *
   * - **id** - UUID - required
   */
  delete_api_v1_archive_staff_unit__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Dispose all Staff Units by ids
   * @description Update Archive Staff Unit
   *
   * - **staff_unit_ids**: List of the UUIDs - required
   * - **staff_list_id**: UUID - required
   */
  send_to_disposition_api_v1_archive_staff_unit_disposition_all__put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArchiveStaffUnitUpdateDispose"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ArchiveStaffUnitRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Unit by id
   * @description Get Staff Unit by user
   *
   * - **id** - UUID - required
   */
  get_by_user_id_api_v1_archive_staff_unituser__user_id___get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ServiceStaffFunctions by StaffUnit id
   * @description Get ServiceStaffFunctions by StaffUnit id
   *
   * - **id** - UUID - required
   */
  get_service_staff_functions_api_v1_archive_staff_unit_get_service_staff_functions__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ArchiveServiceStaffFunctionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add ServiceStaffFunction
   * @description Add ServiceStaffFunction to StaffUnit
   */
  add_service_staff_function_api_v1_archive_staff_unit_add_service_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArchiveStaffUnitFunctions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Remove ServiceStaffFunction
   * @description Remove ServiceStaffFunction from StaffUnit
   */
  remove_service_staff_function_api_v1_archive_staff_unit_remove_service_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArchiveStaffUnitFunctions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get DocumentStaffFunctions by StaffUnit id
   * @description Get DocumentStaffFunctions by StaffUnit id
   *
   * - **id** - UUID - required
   */
  get_document_staff_functions_api_v1_archive_staff_unit_get_document_staff_functions__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ArchiveDocumentStaffFunctionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Add DocumentStaffFunction
   * @description Add DocumentStaffFunction to StaffUnit
   */
  add_document_staff_function_api_v1_archive_staff_unit_add_document_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArchiveStaffUnitFunctions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Remove DocumentStaffFunction
   * @description Remove DocumentStaffFunction from StaffUnit
   */
  remove_document_staff_function_api_v1_archive_staff_unit_remove_document_staff_function_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ArchiveStaffUnitFunctions"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Staff Units by staff_division_id
   * @description Get Staff Units by staff_division_id
   *
   * - **staff_division_id** - UUID - required
   * - **skip**: int - The number of staff units
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of staff units
   *     to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_by_staff_division_id_api_v1_archive_staff_unit_staff_division__id___get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ArchiveStaffUnitReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Candidate
   * @description Get all Candidates.
   *
   * - **skip**: int - The number of Candidate
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Candidate
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_candidates_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CandidateRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create a Candidate
   * @description Create a Candidate.
   *
   * - **staff_unit_curator_id**: UUID - required and should exist in the database.
   *     This is a staff unit who is the supervisor of a certain candidate
   * - **staff_unit_id**: UUID - required and should exist in the database.
   */
  create_api_v1_candidates_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CandidateCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Draft Candidate
   * @description Get all Draft Candidates.
   *
   * - **skip**: int - The number of Candidate to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Candidate to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_draft_candidates_api_v1_candidates_drafts_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CandidateRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get a Candidate by id
   * @description Get a Candidate by id.
   *
   * - **id**: UUID - required and should exist in the database.
   */
  get_by_id_api_v1_candidates__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update a Candidate
   * @description Update a Candidate.
   *
   * - **staff_unit_curator_id**: UUID - optional and should exist in the database.
   *     This is a staff unit who is the supervisor of a certain candidate
   * - **staff_unit_id**: UUID - optional and should exist in the database.
   * - **status**: str - optional. Available statuses are provided below:
   *
   * 1. Активный
   * 2. Черновик
   */
  update_api_v1_candidates__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete a Candidate
   * @description Delete a Candidate.
   *
   * - **id**: required and should exist in the database.
   */
  delete_api_v1_candidates__id__delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Essay for Candidate
   * @description Update a Candidate.
   *
   * - **id**: UUID - required and should exist in the database.
   * - **essay_id**: UUID - required and should exist in the database.
   */
  update_essay_api_v1_candidates__id__patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateEssayUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Finish studying the candidate
   * @description Finish studying the candidate.
   *
   * - **id**: UUID - required and should exist in the database.
   * - **essay_id**: UUID - required and should exist in the database.
   */
  finish_candidate_api_v1_candidates__id__finish__post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Incoming CandidateStageInfo
   * @description Get all Incoming CandidateStageInfo.
   *
   * - **skip**: int - The number of CandidateStageInfo
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of CandidateStageInfo
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_candidate_stage_info_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CandidateStageInfoRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create a CandidateStageInfo
   * @description Create a CandidateStageInfo.
   *
   * - **candidate_id**: UUID - required and should exist in the database.
   * - **candidate_stage_type_id**: UUID - required and should exist in the database.
   * - **staff_unit_coordinate_id**: UUID - required and should exist in the database.
   * - **is_waits**: bool - optional.
   */
  create_api_v1_candidate_stage_info_post: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageInfoCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CandidateStageInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get a CandidateStageInfo by id
   * @description Get a CandidateStageInfo by id.
   *
   * - **id**: UUID - required and should exist in the database.
   */
  get_by_id_api_v1_candidate_stage_info__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateStageInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all CandidateStageInfo by candidate_id
   * @description Get all CandidateStageInfo by candidate_id.
   *
   * - **candidate_id**: UUID - required and should exist in the database.
   */
  get_all_by_candidate_id_api_v1_candidate_stage_info_all_candidate__candidate_id__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      path: {
        candidate_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CandidateStageInfoRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Send CandidateStageInfo send to Approval
   * @description Send CandidateStageInfo send to Approval
   *
   * - **id**: UUID - required.
   * - **staff_unit_coordinate_id**: uuid - optional and should exists in database
   */
  send_to_approval_api_v1_candidate_stage_info__id__send_put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageInfoSendToApproval"];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["CandidateStageInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Sign a CandidateStageInfo
   * @description Sign a CandidateStageInfo
   *
   * - **id**: UUID - required.
   */
  sign_candidate_api_v1_candidate_stage_info__id__sign_put: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["CandidateStageInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Sign a CandidateStageInfo
   * @description Sign a CandidateStageInfo
   *
   * - **id**: UUID - required.
   */
  sign_ecp_api_v1_candidate_stage_info_sign_ecp__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CandidateStageInfoSignEcp"];
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["CandidateStageInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Reject a CandidateStageInfo
   * @description Reject a CandidateStageInfo
   *
   * - **id**: UUID - required and should exist in the database.
   */
  reject_candidate_api_v1_candidate_stage_info__id__reject_put: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      202: {
        content: {
          "application/json": components["schemas"]["CandidateStageInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update a CandidateStageInfo
   * @description Update a CandidateStageInfo.
   *
   * - **id**: UUID - required and should exist in the database.
   * - **candidate_id**: UUID - optional and should exist in the database.
   * - **candidate_stage_type_id**: UUID - optional and should exist in the database.
   * - **status**: str - optional.
   */
  update_api_v1_candidate_stage_info__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageInfoUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateStageInfoRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all CandidateStageType
   * @description Get all Candidates.
   *
   * - **skip**: int - The number of badges
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of badges
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_candidate_stage_type_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CandidateStageTypeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create a CandidateStageType
   * @description Create a CandidateStageType.
   *
   * - **name**: str - required
   */
  create_api_v1_candidate_stage_type_post: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CandidateStageTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get a CandidateStageType by id
   * @description Get a CandidateStageType by id.
   *
   * - **id**: UUID - required and should exist in the database.
   */
  get_by_id_api_v1_candidate_stage_type__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateStageTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update a CandidateStageType
   * @description Update a CandidateStageType.
   *
   * - **id**: UUID - required and should exist in the database.
   * - **name**: str - required
   */
  update_api_v1_candidate_stage_type__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateStageTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete a CandidateStageType
   * @description Delete a CandidateStageType.
   *
   * - **id**: UUID - required and should exist in the database.
   */
  delete_api_v1_candidate_stage_type__id__delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all CandidateStageQuestionTypeEnum
   * @description Get all CandidateStageQuestionTypeEnumEnum
   */
  get_all_api_v1_candidate_stage_question_type_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all CandidateStageQuestion
   * @description Get all CandidateStageQuestion.
   *
   * - **skip**: int - The number of CandidateStageQuestion
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of CandidateStageQuestion
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_candidate_stage_question_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["schemas__user_candidates__candidate_stage_question__CandidateStageQuestionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create a CandidateStageQuestion
   * @description Create a Candidate.
   *
   * - **question**: str - required
   * - **question_type**: str - required
   */
  create_api_v1_candidate_stage_question_post: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageQuestionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["schemas__user_candidates__candidate_stage_question__CandidateStageQuestionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get a CandidateStageQuestion by id
   * @description Get a CandidateStageQuestion by id.
   *
   * - **id**: UUID - required and should exist in the database.
   */
  get_by_id_api_v1_candidate_stage_question__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__user_candidates__candidate_stage_question__CandidateStageQuestionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update a CandidateStageQuestion
   * @description Update a CandidateStageQuestion.
   *
   * - **id**: UUID - required and should exist in the database.
   * - **question**: str - required
   * - **question_type**: str - required
   * - **candidate_stage_type_id**: UUID - required and should exist in the database.
   */
  update_api_v1_candidate_stage_question__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageQuestionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__user_candidates__candidate_stage_question__CandidateStageQuestionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete a CandidateStageQuestion
   * @description Delete a CandidateStageQuestion.
   *
   * - **id**: UUID - required and should exist in the database.
   */
  delete_api_v1_candidate_stage_question__id__delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all CandidateEssayType
   * @description Get all CandidateEssayType.
   *
   * - **skip**: int - The number of CandidateEssayType
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of CandidateEssayType
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_candidate_essay_type_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CandidateEssayTypeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create a CandidateEssayType
   * @description Create a CandidateEssayType.
   *
   * - **name**: str - required
   */
  create_api_v1_candidate_essay_type_post: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateEssayTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CandidateEssayTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get a CandidateEssayType by id
   * @description Get a CandidateEssayType by id.
   *
   * - **id**: required and should exist in the database.
   */
  get_by_id_api_v1_candidate_essay_type__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateEssayTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update a CandidateEssayType
   * @description Update a CandidateEssayType.
   *
   * - **id**: required and should exist in the database.
   * - **name**: str - required
   */
  update_api_v1_candidate_essay_type__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateEssayTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CandidateEssayTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete a CandidateEssayType
   * @description Delete a CandidateEssayType.
   *
   * - **id**: required and should exist in the database.
   */
  delete_api_v1_candidate_essay_type__id__delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create a CandidateEssayType and set to Candidate
   * @description Create a CandidateEssayType and set to Candidate.
   *
   * - **id**: UUID - optional and should exist in the database.
   * - **name**: str - optional
   *
   * 1. If candidate chooses from existing essay types then you can set id of essay
   * 2. If candidate creates a new essay you can send name of the new essay to create
   */
  create_and_set_to_candidate_api_v1_candidate_essay_type_candidate__candidate_id__post: {
    parameters: {
      path: {
        candidate_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateEssayTypeSetToCandidate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CandidateEssayTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all CandidateCategory
   * @description Get all CandidateCategory
   *
   * - **skip**: int - The number of CandidateCategory
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of CandidateCategory
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_candidate_categories_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all CandidateStageAnswer
   * @description Get all CandidateStageAnswer.
   *
   * - **skip**: int - The number of CandidateStageAnswer
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of CandidateStageAnswer
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_candidate_stage_answer_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["CandidateStageAnswerRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create a CandidateStageAnswer for single question
   * @description Create a CandidateStageAnswer for single question
   *
   * - **candidate_stage_question_id**: UUID - required.
   *     Уникальный идентификатор для вопроса, на который дается ответ.
   * - **type**: str - optional.
   *     Тип данных ответа, который может быть:
   *     String, Choice, Text, Document, Essay, Sport score, Dropdown
   * - **answer_str**: str - optional.
   *     Фактический ответ, предоставленный кандидатом,
   *     если тип ответа - строка.
   * - **answer_bool**: boolean - optional.
   *     Логическое значение, представляющее ответ,
   *     если тип ответа является логическим.
   * - **answer**: str - optional.
   *     Фактический ответ, предоставленный кандидатом,
   *     если тип ответа TEXT.
   * - **document_link**: str - optional.
   *     Ссылка на документ или ресурс, подтверждающий ответ,
   *     предоставленный кандидатом, если тип ответа Document.
   * - **document_number**: str - optional.
   *     Уникальный идентификатор документа или ресурса,
   *     на который ссылается поле document_link.
   * - **candidate_essay_type_id**: UUID - optional.
   *     Уникальный идентификатор для типа вопроса эссе,
   *     на который требуется ответить, если type Essay
   * - **candidate_id**: UUID - required.
   *     Уникальный идентификатор кандидата,
   *     который предоставляет ответ.
   * - **category_id**: UUID - optional.
   *     Уникальный идентификатор для категории dropdown вопроса,
   *     на который дается ответ.
   * - **sport_score**: int - optional. Числовая оценка.
   */
  create_api_v1_candidate_stage_answer_post: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageAnswerCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CandidateStageAnswerRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get a CandidateStageAnswer by id
   * @description Get a CandidateStageAnswer by id.
   *
   * - **id**: required and should exist in the database.
   */
  get_by_id_api_v1_candidate_stage_answer__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateStageAnswerRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update a CandidateStageAnswer
   * @description Update a CandidateStageAnswer.
   *
   * - **id**: required and should exist in the database.
   * - **candidate_stage_question_id**: UUID - required.
   *     Уникальный идентификатор для вопроса,
   *     на который дается ответ.
   * - **type**: str - optional.
   *     Тип данных ответа, который может быть:
   *     String, Choice, Text, Document,
   *     Essay, Sport score, Dropdown
   * - **answer_str**: str - optional.
   *     Фактический ответ,
   *     предоставленный кандидатом,
   *     если тип ответа - строка.
   * - **answer_bool**: boolean - optional.
   *     Логическое значение, представляющее ответ,
   *     если тип ответа является логическим.
   * - **answer**: str - optional.
   *     Фактический ответ, предоставленный кандидатом,
   *     если тип ответа TEXT.
   * - **document_link**: str - optional.
   *     Ссылка на документ или ресурс,
   *     подтверждающий ответ, предоставленный кандидатом,
   *     если тип ответа Document.
   * - **document_number**: str - optional.
   *     Уникальный идентификатор документа или ресурса,
   *     на который ссылается поле document_link.
   * - **candidate_essay_type_id**: UUID - optional.
   *     Уникальный идентификатор для типа вопроса эссе,
   *     на который требуется ответить, если type Essay
   * - **candidate_id**: UUID - required.
   *     Уникальный идентификатор кандидата,
   *     который предоставляет ответ.
   * - **category_id**: UUID - optional.
   *     Уникальный идентификатор для категории
   *     dropdown вопроса, на который дается ответ.
   */
  update_api_v1_candidate_stage_answer__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageAnswerUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CandidateStageAnswerRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete a CandidateStageAnswer
   * @description Delete a CandidateStageAnswer.
   *
   * - **id**: required and should exist in the database.
   */
  delete_api_v1_candidate_stage_answer__id__delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all CandidateStageAnswer by candidate_id
   * @description Get all CandidateStageAnswer by candidate_id.
   *
   * - **candidate_id**: required and should exist in the database.
   */
  get_all_by_candidate_id_api_v1_candidate_stage_answer_all_candidate__candidate_id__get: {
    parameters: {
      path: {
        candidate_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create CandidateStageAnswer for multiple questions
   * @description Create CandidateStageAnswer for multiple questions
   *
   * - **candidate_stage_question_id**: UUID - required.
   *     Уникальный идентификатор для вопроса,
   *     на который дается ответ.
   * - **type**: str - optional.
   *     Тип данных ответа, который может быть:
   *     String, Choice, Text, Document, Essay,
   *     Sport score, Dropdown
   * - **answer_str**: str - optional.
   *     Фактический ответ, предоставленный кандидатом,
   *     если тип ответа - строка.
   * - **answer_bool**: boolean - optional.
   *     Логическое значение, представляющее ответ,
   *     если тип ответа является логическим.
   * - **answer**: str - optional.
   *     Фактический ответ,
   *     предоставленный кандидатом, если тип ответа TEXT.
   * - **document_link**: str - optional.
   *     Ссылка на документ или ресурс,
   *     подтверждающий ответ, предоставленный кандидатом,
   *     если тип ответа Document.
   * - **document_number**: str - optional.
   *     Уникальный идентификатор документа или ресурса,
   *     на который ссылается поле document_link.
   * - **candidate_essay_type_id**: UUID - optional.
   *     Уникальный идентификатор для типа вопроса эссе,
   *     на который требуется ответить, если type Essay
   * - **candidate_id**: UUID - required.
   *     Уникальный идентификатор кандидата,
   *     который предоставляет ответ.
   * - **category_id**: UUID - optional.
   *     Уникальный идентификатор для категории dropdown вопроса,
   *     на который дается ответ.
   * - **sport_score**: int - optional. Числовая оценка.
   */
  create_list_api_v1_candidate_stage_answer_list_post: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CandidateStageListAnswerCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": (components["schemas"]["CandidateStageAnswerRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Histories
   * @description Get all Histories
   *
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_histories_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HistoryRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create History
   * @description Create History
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_api_v1_histories_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all History Enums
   * @description Get all History Enums
   */
  get_all_enums_api_v1_histories_enums_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (string)[];
        };
      };
    };
  };
  /**
   * Get all Histories by user id
   * @description Get all Histories by user id
   *
   * - **user_id**: UUID - required
   * - **date_from**: date - format (YYYY-MM). This parameter is optional.
   */
  get_all_personal_api_v1_histories_personal__user_id__get: {
    parameters: {
      query?: {
        date_from?: string;
        date_to?: string;
        skip?: number;
        limit?: number;
      };
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Service and Details by user id
   * @description Get all Histories by user id
   *
   * - **user_id**: UUID - required
   */
  get_all_by_user_id_api_v1_histories_user__user_id___get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryServiceDetailRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Contract History
   * @description Create contract history
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_contract_history_api_v1_histories_contract_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryContractCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Badge History
   * @description Create badge history
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_badge_history_api_v1_histories_bagde_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryBadgeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Black Beret History
   * @description Create badge history
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_black_beret_history_api_v1_histories_black_beret_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryBlackBeretCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Secondment History
   * @description Create secondment history
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_secondement_history_api_v1_histories_secondement_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistorySecondmentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Penalty History
   * @description Create penalty history
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_penalty_history_api_v1_histories_penalty_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryPenaltyCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Status History
   * @description Create status history
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_status_history_api_v1_histories_status_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryStatusCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Coolness History
   * @description Create status history
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_coolness_history_api_v1_histories_coolness_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryCoolnessCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Attestation History
   * @description Create attestation history
   *
   * - **name**: required
   * - **quantity**: required
   */
  create_attestation_history_api_v1_histories_attestation_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryAttestationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get History by id
   * @description Get Equipment by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_histories__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update History
   * @description Update Equipment
   *
   * - **id**: UUID - the id of equipment to update. This parameter is required
   * - **name**: required
   * - **quantity**: required
   */
  update_api_v1_histories__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete History
   * @description Delete Equipment
   *
   * - **id**: UUID - required
   */
  delete_api_v1_histories__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Histories by type
   * @description Get all Histories by type
   *
   * - **type**: str - required
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_by_type_api_v1_histories_type__type___get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      path: {
        type: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update History
   * @description Update secondment history
   *
   * - **id**: UUID - the id of history to update. This parameter is required
   * - **name**: required
   * - **quantity**: required
   */
  update_secondment_api_v1_histories_secondment__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update History
   * @description Update badge history
   *
   * - **id**: UUID - the id of history to update. This parameter is required
   * - **name**: required
   * - **quantity**: required
   */
  update_badge_api_v1_histories_badge__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update History
   * @description Update badge history
   *
   * - **id**: UUID - the id of history to update. This parameter is required
   * - **name**: required
   * - **quantity**: required
   */
  update_status_api_v1_histories_status__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Black Beret History
   * @description Delete Equipment
   *
   * - **id**: UUID - required
   */
  delete_api_v1_histories_black_beret__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Histories by type and user id
   * @description Get all Histories by type and user id
   *
   * - **type**: str - required
   * - **user_id**: UUID - required
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_by_type_and_user_id_api_v1_histories_all_type__type___user_id__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      path: {
        type: string;
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Histories by type and user id
   * @description Get timeline for user id
   *
   * - **user_id**: UUID - required
   */
  get_all_by_type_and_user_id_api_v1_histories_timeline_get: {
    parameters: {
      query?: {
        date_till?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Expiring Contracts */
  get_expiring_contracts_api_v1_histories_expiring_contracts_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all ServiceID
   * @description Get all Profiles
   */
  get_all_api_v1_service_id_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ServiceIDRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new ServiceID
   *
   * no parameters required.
   */
  create_api_v1_service_id_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceIDCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ServiceIDRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ServiceID by id
   * @description Get ServiceID by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_service_id__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceIDRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ServiceID
   * @description Update ServiceID
   */
  update_api_v1_service_id__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServiceIDUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceIDRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ServiceID
   * @description Delete Profile
   *
   * - **id**: UUId - required
   */
  delete_api_v1_service_id__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ServiceID statuses
   * @description Get all ServiceID statuses
   */
  get_all_statuses_api_v1_service_idstatuses__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (Record<string, never>)[];
        };
      };
    };
  };
  /**
   * Get all History Name Changes
   * @description Get all History Name Changes
   *
   * - **skip**: int - The number of equipments to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of equipments to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_history_name_change_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HistoryNameChangeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create History Name Change
   * @description Create History Name Change
   *
   * - **name**: str - required
   * - **type**: str - required
   */
  create_api_v1_history_name_change_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryNameChangeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HistoryNameChangeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get History by id
   * @description Get Equipment by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_history_name_change__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryNameChangeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update History
   * @description Update Equipment
   *
   * - **id**: UUID - the id of equipment to update. This parameter is required
   * - **name**: required
   * - **quantity**: required
   */
  update_api_v1_history_name_change__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HistoryNameChangeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HistoryNameChangeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete History Name Change
   * @description Delete History Name Change
   *
   * - **id**: UUID - required
   */
  delete_api_v1_history_name_change__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get History Name Changes by user id
   * @description Get History Name Changes by user id
   *
   * - **user_id**: UUID - required
   */
  get_by_user_id_api_v1_history_name_change_user__user_id___get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all User Oaths
   * @description Get all User Oaths
   *
   * - **skip**: int - The number of User Oaths
   *  to skip before returning the results.
   *  This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of User Oaths
   *  to return in the response.
   *  This parameter is optional and defaults to 10.
   */
  get_all_api_v1_user_oaths_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["UserOathRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create User Oath
   * @description Create User Oath
   *
   * **date** - required - datetime
   * **user_id** - required - uuid
   * **military_unit_id** - required - uuid
   */
  create_api_v1_user_oaths_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserOathCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["UserOathRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get User Oath by id
   * @description Get User Oath by id
   *
   * - **id** - UUID - required
   */
  get_by_id_api_v1_user_oaths__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserOathRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update User Oath
   * @description Update User Oath
   *
   * **date** - required - datetime
   * **user_id** - required - uuid
   * **military_unit_id** - required - uuid
   */
  update_api_v1_user_oaths__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserOathUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserOathRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete User Oath
   * @description Delete User Oath
   *
   * - **id** - UUID - required
   */
  delete_api_v1_user_oaths__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Military Units
   * @description Get all Military Units
   *
   * - **skip**: int - The number of Military Units
   *  to skip before returning the results.
   *  This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Military Units
   *  to return in the response.
   *  This parameter is optional and defaults to 10.
   */
  get_all_api_v1_military_units_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MilitaryUnitReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Military Unit
   * @description Create Military Unit
   *
   * **name** - required - str
   */
  create_api_v1_military_units_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MilitaryUnitCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["MilitaryUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Military Unit by id
   * @description Get Military Unit by id
   *
   * - **id** - UUID - required
   */
  get_by_id_api_v1_military_units__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MilitaryUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Military Unit
   * @description Update Military Unit
   *
   * **name** - required - str
   */
  update_api_v1_military_units__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MilitaryUnitUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MilitaryUnitRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Military Unit
   * @description Delete Military Unit
   *
   * - **id** - UUID - required
   */
  delete_api_v1_military_units__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Recommender Users
   * @description Get all Recommender Users
   *
   * - **skip**: int - The number of ranks
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ranks
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_recommender_users_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["RecommenderUserRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Recommender User
   * @description Create Recommender User
   */
  create_api_v1_recommender_users_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RecommenderUserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["RecommenderUserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Recommender User by id
   * @description Get Recommender User by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_recommender_users__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RecommenderUserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Recommender User
   * @description Update Recommender User
   *
   * - **id**: UUID - the ID of badge to update. This is required.
   * - **name**: required.
   */
  update_api_v1_recommender_users__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RecommenderUserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RecommenderUserRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Recommender User
   * @description Delete Recommender User
   *
   * - **id**: UUID - required
   */
  delete_api_v1_recommender_users__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all HrVacancies
   * @description Get all HrVacancies
   */
  get_all_api_v1_hr_vacancies_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["schemas__hr_vacancy__HrVacancyRead"])[];
        };
      };
    };
  };
  /**
   * Create HrVacancy
   * @description Create HrVacancy
   *
   * - **staff_unit_id**: uuid - required
   * - **hr_vacancy_requirements_ids**: List of uuid - optional
   */
  create_api_v1_hr_vacancies_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrVacancyCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["schemas__hr_vacancy__HrVacancyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all HrVacancies by department
   * @description Get all HrVacancies by department
   *
   * - **staff_division_id**: uuid - required.
   */
  get_all_by_department_api_v1_hr_vacancies_department__staff_division_id__get: {
    parameters: {
      path: {
        staff_division_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all not active HrVacancies
   * @description Get all HrVacancies
   *
   * - **skip**: int - The number of HrVacancies
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrVacancies
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_not_active_api_v1_hr_vacancies_not_active_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["schemas__hr_vacancy__HrVacancyRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all candidates of Vacancy
   * @description Get all Candidates of HrVacancy
   *
   * - **id**: uuid - the id of HrVacancy.
   */
  get_all_candidates_api_v1_hr_vacancies__id__candidates_get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrVacancyCandidateRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Respond to Candidate (Отклик)
   * @description Respond to the Hrvacancy
   *
   * - **id**: uuid - the id of HrVacancy.
   */
  respond_api_v1_hr_vacancies__id__respond_post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__hr_vacancy__HrVacancyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create HrVacancy by archieve staff unit
   * @description Create HrVacancy by archieve staff unit
   *
   * - **staff_unit_id**: uuid - required. The id of ArchieveStaffUnit
   * - **hr_vacancy_requirements_ids**: List of uuid - optional
   */
  create_by_archieve_staff_unit_api_v1_hr_vacancies_archieve_staff_unit_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrVacancyCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["schemas__hr_vacancy__HrVacancyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HrVacancy by id
   * @description Get HrVacancy by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_hr_vacancies__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__hr_vacancy__HrVacancyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update HrVacancy
   * @description Update HrVacancy
   *
   * - **id**: uuid - required
   * - **archive_staff_unit_id**: uuid - optional. The id of ArchiveStaffUnit
   * - **staff_unit_id**: uuid - optional. The id of StaffUnit
   * - **is_active**: bool - optional
   * - **hr_vacancy_requirements_ids**: List of uuid - optional
   */
  update_api_v1_hr_vacancies__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrVacancyUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__hr_vacancy__HrVacancyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update HrVacancy
   * @description Update HrVacancy
   *
   * - **id**: uuid - required
   * - **archive_staff_unit_id**: uuid - optional. The id of ArchiveStaffUnit
   * - **staff_unit_id**: uuid - optional. The id of StaffUnit
   * - **is_active**: bool - optional
   * - **hr_vacancy_requirements_ids**: List of uuid - optional
   */
  update_by_archieve_staff_unit_api_v1_hr_vacancies__id__archieve_staff_unit_put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrVacancyUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__hr_vacancy__HrVacancyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HrVacancy by archieve staff unit
   * @description Get HrVacancy by archieve staff unit
   *
   * - **archieve_staff_unit_id**: UUID - required
   */
  get_by_archieve_staff_unit_id_api_v1_hr_vacancies_archieve_staff_unit__archieve_staff_unit_id___get: {
    parameters: {
      path: {
        archieve_staff_unit_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__hr_vacancy__HrVacancyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all HrVacancyRequirements
   * @description Get all HrVacancyRequirements
   *
   * - **skip**: int - The number of HrVacancyRequirements
   *  to skip before returning the results.
   *  This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of HrVacancyRequirements
   *  to return in the response.
   *  This parameter is optional and defaults to 100.
   */
  get_all_api_v1_hr_vacancy_requirements_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HrVacancyRequirementsRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create HrVacancyRequirements */
  create_api_v1_hr_vacancy_requirements_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrVacancyRequirementsCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["HrVacancyRequirementsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get HrVacancyRequirements by id
   * @description Get HrVacancyRequirements by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_hr_vacancy_requirements__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrVacancyRequirementsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update HrVacancyRequirements */
  update_api_v1_hr_vacancy_requirements__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["HrVacancyRequirementsUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HrVacancyRequirementsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete HrVacancyRequirements */
  delete_api_v1_hr_vacancy_requirements__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Positions without specials
   * @description Get all Positions without specials
   *
   * - **skip**: int - The number of Positions
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Positions
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_positions_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PositionPaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Position
   * @description Create Position
   *
   * - **name**: required
   */
  create_api_v1_positions_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PositionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PositionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Positions
   * @description Get all Positions
   *
   * - **skip**: int - The number of Positions
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Positions
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_positions_all_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PositionPaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get lower positions than position by id
   * @description Get Position by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_positions_lower__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PositionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Position by id
   * @description Get Position by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_positions__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PositionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Position
   * @description Update Position
   *
   * - **id**: UUID - the ID of badge to update. This is required.
   * - **name**: required.
   */
  update_api_v1_positions__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PositionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PositionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Position
   * @description Delete position
   *
   * - **id**: UUId - required
   */
  delete_api_v1_positions__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Category Codes */
  get_category_codes_api_v1_positions_category_codes_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all data for Dashboard
   * @description Количество всей штатки
   */
  get_all_state_api_v1_dashboard_states_all_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all data by list for Dashboard
   * @description Количество сотрудников по списку
   */
  get_state_by_list_api_v1_dashboard_states_by_list__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all data of vacancies for Dashboard
   * @description Количество вакансии
   */
  get_hr_vacancy_count_by_division_api_v1_dashboard_states_vacancies__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all data of users in line for Dashboard
   * @description Количество сотрудников которые в строю
   */
  get_in_line_count_by_status_api_v1_dashboard_states_inline__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get data of all out line users for Dashboard
   * @description Общее количество сотрудников которые отсутствуют
   */
  get_count_by_status_all_users_api_v1_dashboard_states_outline_all__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get data by every status of out line users for Dashboard
   * @description Количество сотрудников которые отсутствуют по статусам
   */
  get_count_by_every_status_users_api_v1_dashboard_states_outline_bystatus__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all data of active candidates for Dashboard
   * @description Количество изучающихся кандидатов
   */
  get_all_active_candidates_api_v1_dashboard_candidates_active__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get passed candidate stage infos
   * @description Get passed candidate stage infos
   */
  get_statistic_passed_candidate_stage_infos_api_v1_dashboard_candidates_stages_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get duration candidates
   * @description Get duration candidates
   */
  get_statistic_duration_candidate_learning_api_v1_dashboard_candidates_duration_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get completed candidates
   * @description Get completed candidates
   */
  get_statistic_completed_candidates_api_v1_dashboard_candidates_completed_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all data of candidates curators for Dashboard
   * @description Количество изучающих кандидатов кураторы
   */
  get_curators_by_candidates_api_v1_dashboard_candidates_curators__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all data of candidates curators for Dashboard
   * @description Количество изучающих кандидатов кураторы
   */
  get_curators_by_candidates_duration_api_v1_dashboard_candidates_curators_duration_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * All users in ecosystem ERP
   * @description Количество изучающих кандидатов кураторы
   */
  get_all_users_of_erp_api_v1_dashboard_users_all_inErp_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * How match users are added
   * @description Количество изучающих кандидатов кураторы
   */
  get_all_new_users_at_week_api_v1_dashboard_users_added_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Online users
   * @description Количество изучающих кандидатов кураторы
   */
  get_all_active_api_v1_dashboard_users_active_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all data of users activity by three days
   * @description Количество изучающих кандидатов кураторы
   */
  get_users_at_three_day_by_active_api_v1_dashboard_users_active_statistics_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all SurveyJurisdictionType
   * @description Get all SurveyJurisdictionTypeEnum (Опрос проводится в рамках)
   */
  get_all_api_v1_survey_jurisdiction_type_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all SurveyStaffPosition
   * @description Get all SurveyStaffPosition (Служебное положение опроса)
   */
  get_all_api_v1_survey_staff_position_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all Surveys
   * @description Get all Surveys
   *
   * - **skip**: int - The number of surveys to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of surveys to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_active_api_v1_surveys_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SurveyReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new survey
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_surveys_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurveyCreateWithJurisdiction"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SurveyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all competence forms
   * @description Get all competence forms
   *
   * - **skip**: int - The number of surveys to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of surveys to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_competence_forms_api_v1_surveys_competence_forms_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SurveyReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all archive Surveys
   * @description Get all archive Surveys
   *
   * - **skip**: int - The number of surveys to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of surveys to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_archives_api_v1_surveys_archives_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SurveyReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all draft Surveys
   * @description Get all draft Surveys
   *
   * - **skip**: int - The number of surveys to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of surveys to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_draft_api_v1_surveys_drafts_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SurveyReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Surveys & Quizzes by jurisdiction
   * @description Get all Surveys by jurisdiction
   *
   * - **skip**: int - The number of surveys to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of surveys to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_surveys_and_quizzes_by_jurisdiction_api_v1_surveys_my_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SurveyReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Surveys & Quizzes by jurisdiction
   * @description Get all Surveys by jurisdiction
   *
   * - **skip**: int - The number of surveys to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of surveys to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_competence_forms_by_jurisdiction_api_v1_surveys_my_competence_forms_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SurveyReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Duplicate
   * @description Duplicate the survey
   *
   * - **id**: required
   */
  duplicate_api_v1_surveys__id__duplicate_post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SurveyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Repeat
   * @description Repeat the survey
   *
   * - **id**: required
   */
  repeat_api_v1_surveys__id__repeat_post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SurveyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Save as draft
   * @description Create new survey
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  save_as_draft_api_v1_surveys_draft_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurveyCreateWithJurisdiction"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["SurveyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Survey by id
   * @description Get survey by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_surveys__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SurveyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Survey
   * @description Update survey
   *
   * - **id**: UUID - the ID of survey to update. This is required.
   * - **name**: required.
   * - **url**: image url. This parameter is required.
   */
  update_api_v1_surveys__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurveyUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SurveyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Survey
   * @description Delete survey
   *
   * - **id**: UUId - required
   */
  delete_api_v1_surveys__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all QuestionTypeEnum
   * @description Get all QuestionTypeEnumEnum
   */
  get_all_api_v1_question_type_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get all Questions
   * @description Get all Question
   *
   * - **skip**: int - The number of questions to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of questions to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_questions_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["QuestionReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new question
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_questions_post: {
    requestBody: {
      content: {
        "application/json": (components["schemas"]["QuestionCreateList"])[];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": (components["schemas"]["QuestionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Questions by survey id
   * @description Get all Question by survey
   *
   * - **skip**: int - The number of questions to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of questions to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_by_survey_api_v1_questions_survey_id__get: {
    parameters: {
      query: {
        survey_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["QuestionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Question by id
   * @description Get question by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_questions__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["QuestionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Question
   * @description Update question
   *
   * - **id**: UUID - the ID of question to update. This is required.
   * - **name**: required.
   * - **url**: image url. This parameter is required.
   */
  update_api_v1_questions__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuestionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["QuestionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Question
   * @description Delete question
   *
   * - **id**: UUId - required
   */
  delete_api_v1_questions__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Options
   * @description Get all Option
   *
   * - **skip**: int - The number of options to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of options to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_options_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OptionReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new question
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_options_post: {
    requestBody: {
      content: {
        "application/json": (components["schemas"]["schemas__survey__option__OptionCreate"])[];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": (components["schemas"]["OptionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Options by question id
   * @description Get all Option by question id
   */
  get_by_question_api_v1_options_question_id__get: {
    parameters: {
      query: {
        question_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["OptionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Option by id
   * @description Get question by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_options__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OptionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Option
   * @description Update question
   *
   * - **id**: UUID - the ID of question to update. This is required.
   * - **name**: required.
   * - **url**: image url. This parameter is required.
   */
  update_api_v1_options__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OptionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OptionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Option
   * @description Delete question
   *
   * - **id**: UUId - required
   */
  delete_api_v1_options__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Answers
   * @description Get all Answer
   *
   * - **skip**: int - The number of answers to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of answers to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_answers_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AnswerReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create
   * @description Create new question
   *
   * - **name**: required
   * - **url**: image url. This parameter is required
   */
  create_api_v1_answers_post: {
    requestBody: {
      content: {
        "application/json": (components["schemas"]["AnswerCreate"])[];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": (components["schemas"]["AnswerRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all by survey
   * @description Get all Answer by survey
   *
   * - **skip**: int - The number of answers to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of answers to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_by_survey_id_api_v1_answers_survey__survey_id__get: {
    parameters: {
      query?: {
        user_id?: string;
      };
      path: {
        survey_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AnswerRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get responded users
   * @description Get responded users
   */
  get_responded_users_api_v1_answers_survey__survey_id__users_get: {
    parameters: {
      path: {
        survey_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all by survey
   * @description Get all Answer by survey
   *
   * - **skip**: int - The number of answers to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of answers to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  analyze_by_staff_division_api_v1_answers_survey__survey_id__statistics_get: {
    parameters: {
      path: {
        survey_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all by question
   * @description Get all Answer by question
   *
   * - **skip**: int - The number of answers to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of answers to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  analyze_by_questions_api_v1_answers_survey__survey_id__questions_get: {
    parameters: {
      path: {
        survey_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Analyze question with text type
   * @description Get all Answer by question
   *
   * - **skip**: int - The number of answers to skip before returning the results.
   *         This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of answers to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  analyze_by_questions_api_v1_answers_question_text__question_id___get: {
    parameters: {
      path: {
        question_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Answer by id
   * @description Get question by id
   *
   * - **id**: UUID - required.
   */
  get_by_id_api_v1_answers__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AnswerRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Answer
   * @description Update question
   *
   * - **id**: UUID - the ID of question to update. This is required.
   * - **name**: required.
   * - **url**: image url. This parameter is required.
   */
  update_api_v1_answers__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AnswerUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AnswerRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Answer
   * @description Delete question
   *
   * - **id**: UUId - required
   */
  delete_api_v1_answers__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Activity
   * @description Get all Activity
   *
   * - **skip**: int - The number of Activity
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Activity
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_activity_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ActivityRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Activity by id
   * @description Get Activity by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_activity__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Activity
   * @description Update Activity
   */
  update_api_v1_activity__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Activity
   * @description Delete Activity
   */
  delete_api_v1_activity__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Activity
   * @description Create Activity
   */
  create_api_v1_activity__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ActivityRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Attendance
   * @description Get all Attendance
   *
   * - **skip**: int - The number of Attendance
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Attendance
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_attendance_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AttendanceRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all nearest Attendances
   * @description Get all Attendance
   *
   * - **skip**: int - The number of Attendance
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Attendance
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_nearest_api_v1_attendance_nearest_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        is_mine?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttendanceReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all users in Attendance
   * @description Get all users by attendance
   */
  get_attendance_users_api_v1_attendance_users__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AttendedUserRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Attendance by id
   * @description Get Attendance by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_attendance__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttendanceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Attendance
   * @description Update Attendance
   */
  update_api_v1_attendance__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttendanceUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttendanceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Attendance
   * @description Delete Attendance
   */
  delete_api_v1_attendance__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttendanceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Attendance by id
   * @description Get Attendance by id
   *
   * - **id**: UUID - required
   */
  get_attendance_percentage_api_v1_attendance_percentage_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AttendancePercentageRead"])[];
        };
      };
    };
  };
  /**
   * Get all absent days by user for the ScheduleYear
   * @description Get all absent users for the ScheduleYear
   *
   * - **id**: String - required. ScheduleYear id
   * - **user_id**: String - required. User id
   */
  get_absent_days_by_user_api_v1_attendance_user_absent__id___get: {
    parameters: {
      query: {
        user_id: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["AttendanceReadShort"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all absent users for the ScheduleYear
   * @description Get all absent users for the ScheduleYear
   *
   * - **id**: UUID - required. ScheduleYear id
   * - **skip**: int - The number of Attendance
   * to skip before returning the results.
   * This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Attendance
   * to return in the response.
   * This parameter is optional and defaults to 10.
   */
  get_absent_users_api_v1_attendance_absent__id___get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserShortReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Attendance
   * @description Create Attendance
   */
  create_api_v1_attendance__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttendanceCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttendanceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Change Attendance status
   * @description Change Attendance status
   */
  change_attendance_status_api_v1_attendance_status_change_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttendanceChangeStatus"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Change Attendance status by schedule and date
   * @description Change Attendance status
   */
  change_attendance_status_by_schedule_api_v1_attendance_status_change_schedule_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttendanceChangeStatusWithSchedule"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ExamSchedule
   * @description Get all ExamSchedule
   *
   * - **skip**: int - The number of ExamSchedule
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ExamSchedule
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_exam_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExamScheduleReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ExamSchedule
   * @description Get all ExamSchedule
   *
   * - **skip**: int - The number of ExamSchedule
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ExamSchedule
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_for_tablet_api_v1_exam_tablet__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExamTabletRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ExamSchedule users by id
   * @description Get ExamSchedule users by id
   */
  get_exam_users_api_v1_exam_users__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ExamResultRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ExamSchedule by id
   * @description Get ExamResults by authorized user
   *
   * - **skip**: int - The number of ExamSchedule
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ExamSchedule
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_exam_results_api_v1_exam_results__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExamResultReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ScheduleMonths by month
   * @description Get ScheduleMonths by month
   *
   * - **month**: int - The number of month when you want to get ScheduleMonth
   */
  get_by_month_api_v1_exam_month_get: {
    parameters: {
      query?: {
        month_num?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ExamScheduleRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get nearest ScheduleMonths
   * @description Get nearest ScheduleMonths
   *
   * - **limit**: int - The maximum number of ScheduleMonth
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_nearest_api_v1_exam_nearest_get: {
    parameters: {
      query?: {
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ExamScheduleRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ScheduleMonths by date
   * @description Get ScheduleMonths by date
   *
   * - **limit**: int - The maximum number of ScheduleMonth
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   * - **date**: date (yyyy-mm-dd) - The date when you want to get ScheduleMonth
   */
  get_by_date_api_v1_exam_date_get: {
    parameters: {
      query: {
        limit?: number;
        date: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ExamScheduleRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ExamSchedule by id
   * @description Get ExamSchedule by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_exam__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExamScheduleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ExamSchedule
   * @description Update ExamSchedule
   */
  update_api_v1_exam__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExamScheduleUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExamScheduleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ExamSchedule
   * @description Delete ExamSchedule
   */
  delete_api_v1_exam__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExamScheduleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create ExamSchedule
   * @description Create ExamSchedule
   */
  create_api_v1_exam__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExamScheduleCreateWithInstructors"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ExamScheduleRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Change Exam Results
   * @description Change Exam Results
   */
  change_results_api_v1_exam_results_update_put: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExamChangeResults"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Places
   * @description Get all Places
   *
   * - **skip**: int - The number of Place
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Place
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_place_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PlaceRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Place by id
   * @description Get Place by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_place__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlaceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Place
   * @description Update Place
   */
  update_api_v1_place__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlaceUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlaceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Place
   * @description Delete Place
   */
  delete_api_v1_place__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlaceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Place
   * @description Create Place
   */
  create_api_v1_place__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlaceCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PlaceRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all BspPlan
   * @description Get all BspPlans
   *
   * - **skip**: int - The number of BspPlan
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of BspPlan
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_plan_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all BspPlan
   * @description Get all draft BspPlans
   *
   * - **skip**: int - The number of BspPlan
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of BspPlan
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_draft_api_v1_plan_draft__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all BspPlan
   * @description Get all draft BspPlans
   *
   * - **skip**: int - The number of BspPlan
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of BspPlan
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_signed_api_v1_plan_signed__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all BspPlan
   * @description Sign BspPlan
   */
  sign_api_v1_plan_sign__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Send BspPlan to draft
   * @description Send BspPlan to draft
   */
  send_to_draft_api_v1_plan_draft__id___post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get BspPlan by id
   * @description Get BspPlan by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_plan__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update BspPlan
   * @description Update BspPlan
   */
  update_api_v1_plan__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BspPlanUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete BspPlan
   * @description Delete BspPlan
   */
  delete_api_v1_plan__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Duplicate BspPlan by id
   * @description Duplicate BspPlan by id
   *
   * - **id**: UUID - required
   */
  duplicate_api_v1_plan_duplicate__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create BspPlan
   * @description Create BspPlan
   */
  create_api_v1_plan__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BspPlanCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BspPlanRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ScheduleDay
   * @description Get all ScheduleDay
   *
   * - **skip**: int - The number of ScheduleDay
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ScheduleDay
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_schedule_day_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ScheduleDayRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ScheduleDay by id
   * @description Get ScheduleDay by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_schedule_day__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleDayRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ScheduleDay
   * @description Update ScheduleDay
   */
  update_api_v1_schedule_day__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleDayUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleDayRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ScheduleDay
   * @description Delete ScheduleDay
   */
  delete_api_v1_schedule_day__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleDayRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create ScheduleDay
   * @description Create ScheduleDay
   */
  create_api_v1_schedule_day__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleDayCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleDayRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ScheduleMonth
   * @description Get all ScheduleMonth
   *
   * - **skip**: int - The number of ScheduleMonth
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ScheduleMonth
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_schedule_month_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ScheduleMonthRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create ScheduleMonth
   * @description Create ScheduleMonth
   */
  create_api_v1_schedule_month_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleMonthCreateWithDay"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get nearest ScheduleMonths
   * @description Get nearest ScheduleMonths
   *
   * - **limit**: int - The maximum number of ScheduleMonth
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_nearest_api_v1_schedule_month_nearest_get: {
    parameters: {
      query?: {
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ScheduleMonthRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ScheduleMonths by date
   * @description Get ScheduleMonths by date
   *
   * - **limit**: int - The maximum number of ScheduleMonth
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   * - **date**: date (yyyy-mm-dd) - The date when you want to get ScheduleMonth
   */
  get_by_date_api_v1_schedule_month_date_get: {
    parameters: {
      query: {
        limit?: number;
        date: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ScheduleMonthRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ScheduleMonths by month
   * @description Get ScheduleMonths by month
   *
   * - **month**: int - The number of month when you want to get ScheduleMonth
   */
  get_by_month_api_v1_schedule_month_month_get: {
    parameters: {
      query?: {
        month_num?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["ScheduleMonthRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ScheduleMonth by id
   * @description Get ScheduleMonth by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_schedule_month__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleMonthRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ScheduleMonth
   * @description Update ScheduleMonth
   */
  update_api_v1_schedule_month__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleMonthUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleMonthRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ScheduleMonth
   * @description Delete ScheduleMonth
   */
  delete_api_v1_schedule_month__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleMonthRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ScheduleYear
   * @description Get all ScheduleYear
   *
   * - **skip**: int - The number of ScheduleYear
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ScheduleYear
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_api_v1_schedule_year_get: {
    parameters: {
      query?: {
        filter?: unknown;
        filter_year?: string;
        filter_month?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ScheduleYear by plan id
   * @description Get all ScheduleYears by plan id
   *
   * - **skip**: int - The number of ScheduleYear
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ScheduleYear
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_by_plan_api_v1_schedule_year_plan__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ScheduleYear by staff_division id
   * @description Get all ScheduleYears by plan id
   */
  get_all_by_staff_division_api_v1_schedule_year_staff_division__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all ScheduleYear by staff_division_id and plan_id
   * @description Get all ScheduleYears by staff_division_id and plan_id
   */
  get_all_by_staff_division_and_plan_api_v1_schedule_year_division_plan__id___get: {
    parameters: {
      query: {
        plan_id: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Schedule Year by plan year
   * @description Get all Schedule Year by plan year
   *
   * - **year**: int - year on which to get the schedule
   * - **skip**: int - The number of ScheduleYear
   *     to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of ScheduleYear
   *     to return in the response.
   *     This parameter is optional and defaults to 100.
   */
  get_all_by_year_api_v1_schedule_year_year__get: {
    parameters: {
      query?: {
        year?: number;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get ScheduleYear by id
   * @description Get ScheduleYear by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_schedule_year__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update ScheduleYear
   * @description Update ScheduleYear
   */
  update_api_v1_schedule_year__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleYearUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ScheduleYear
   * @description Delete ScheduleYear
   */
  delete_api_v1_schedule_year__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create ScheduleYear
   * @description Create ScheduleYear
   */
  create_api_v1_schedule_year__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleYearCreateString"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete ScheduleYear
   * @description Delete ScheduleYear
   */
  delete_division_api_v1_schedule_year_division__schedule_id___division_id___delete: {
    parameters: {
      path: {
        schedule_id: string;
        division_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduleYearRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Permissions
   * @description Get all Permissions
   *
   * - **skip**: int - The number of permissions
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of permissions
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_permissions_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionPaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Permission
   * @description Create Permission
   *
   * - **name**: required
   */
  create_api_v1_permissions_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PermissionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * If user has permission
   * @description Check if authorized user has permission for permission_type
   *
   * - **permission_type**: str - permission_type name
   */
  has_permission_api_v1_permissions_has_permission_get: {
    parameters: {
      query: {
        permission_type: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": boolean;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Permissions of user
   * @description Get all permissions of user
   *
   * - **permission_type**: str - permission_type name
   */
  has_permission_api_v1_permissions_user_permissions_get: {
    parameters: {
      query?: {
        user_id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PermissionRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Permissions Types
   * @description Get all Permissions Types
   *
   * - **skip**: int - The number of permission types
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of permission types
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_permissions_types_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["PermissionTypeRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Permission by id
   * @description Get Permission by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_permissions__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Permission
   * @description Update Permission
   *
   * - **id**: UUID - the ID of permission to update. This is required.
   * - **name**: required.
   */
  update_api_v1_permissions__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Permission
   * @description Delete Permission
   *
   * - **id**: UUID - required
   */
  delete_api_v1_permissions__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Badge types
   * @description Get all Badge types
   *
   * - **skip**: int - The number of Badge types
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Badge types
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_badge_types_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BadgeTypePaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Badge type
   * @description Create Badge type
   *
   * - **name**: required
   */
  create_api_v1_badge_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BadgeTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["BadgeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Badge type by id
   * @description Get Badge type by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_badge_types__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BadgeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Badge type
   * @description Update Badge type
   *
   * - **id**: UUID - the ID of badge to update. This is required.
   * - **name**: required.
   */
  update_api_v1_badge_types__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BadgeTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BadgeTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Badge type
   * @description Delete Badge type
   *
   * - **id**: UUID - required
   */
  delete_api_v1_badge_types__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Penalty types
   * @description Get all Penalty types
   *
   * - **skip**: int - The number of Penalty types
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Penalty types
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_penalty_types_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PenaltyTypePaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Penalty type
   * @description Create Penalty type
   *
   * - **name**: required
   */
  create_api_v1_penalty_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PenaltyTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["PenaltyTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Penalty type by id
   * @description Get Penalty type by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_penalty_types__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PenaltyTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Penalty type
   * @description Update Penalty type
   *
   * - **id**: UUID - the ID of badge to update. This is required.
   * - **name**: required.
   */
  update_api_v1_penalty_types__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PenaltyTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PenaltyTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Penalty type
   * @description Delete Penalty type
   *
   * - **id**: UUID - required
   */
  delete_api_v1_penalty_types__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Status types
   * @description Get all Status types
   *
   * - **skip**: int - The number of Status types
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Status types
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_status_types_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StatusTypePaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Status type
   * @description Create Status type
   *
   * - **name**: required
   */
  create_api_v1_status_types_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatusTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["StatusTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Status type by id
   * @description Get Status type by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_status_types__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StatusTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Status type
   * @description Update Status type
   *
   * - **id**: UUID - the ID of badge to update. This is required.
   * - **name**: required.
   */
  update_api_v1_status_types__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatusTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StatusTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Status type
   * @description Delete Status type
   *
   * - **id**: UUID - required
   */
  delete_api_v1_status_types__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get last hexagon
   * @description Get last hexagon
   */
  get_last_hexagon_api_v1_hexagon_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HexagonRead"];
        };
      };
    };
  };
  /**
   * Get average scores for hexagon
   * @description Get average scores for hexagon
   */
  get_last_hexagon_api_v1_hexagon_average_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HexagonAveragesRead"];
        };
      };
    };
  };
  /**
   * Get hexagons by date
   * @description Get hexagons by date
   */
  get_last_hexagon_api_v1_hexagon_date_get: {
    parameters: {
      query: {
        date_from: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": (components["schemas"]["HexagonRead"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Join records
   * @description Change all records with ids_to_change to correct_id
   *
   * - **entity**: str - table where records will be joined
   * - **correct_id**: str - id that will have updated records.
   * - **ids_to_change**: str - ids that will be switched by
   *      correct_id
   */
  join_records_api_v1_dictionary_operations_join_records_post: {
    parameters: {
      query: {
        entity: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JoinRecordsBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Soft update record
   * @description Change all records with ids_to_change to correct_id
   *
   * - **entity**: str - entity which records will be soft updated
   * - **id**: str - id to update
   */
  soft_update_api_v1_dictionary_operations_soft_update_post: {
    parameters: {
      query: {
        entity: string;
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Penalties
   * @description Get all Penalties
   *
   * - **skip**: int - The number of Penalties
   *      to skip before returning the results.
   *      This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Penalties
   *      to return in the response.
   *      This parameter is optional and defaults to 100.
   */
  get_all_api_v1_penalty_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PenaltyPaginationRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Penalty type
   * @description Create Penalty type
   *
   * - **name**: required
   */
  create_api_v1_penalty_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PenaltyCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["schemas__penalty__PenaltyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Penalty type by id
   * @description Get Penalty type by id
   *
   * - **id**: UUID - required
   */
  get_by_id_api_v1_penalty__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__penalty__PenaltyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Penalty type
   * @description Update Penalty type
   *
   * - **id**: UUID - the ID of badge to update. This is required.
   * - **name**: required.
   */
  update_api_v1_penalty__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PenaltyUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["schemas__penalty__PenaltyRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Penalty type
   * @description Delete Penalty type
   *
   * - **id**: UUID - required
   */
  delete_api_v1_penalty__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get all Coolness
   * @description Get all Coolness Type
   *
   * - **skip**: int - The number of Coolness to skip before returning the results.
   *     This parameter is optional and defaults to 0.
   * - **limit**: int - The maximum number of Coolness to return in the response.
   *     This parameter is optional and defaults to 10.
   */
  get_all_api_v1_coolness_type_get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        filter?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CoolnessTypeReadPagination"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Create Coolness Type
   * @description Create Coolness Type
   *
   * **name** - required - str
   */
  create_api_v1_coolness_type_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CoolnessTypeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CoolnessTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Coolness by id
   * @description Get Coolness Type by id
   *
   * - **id** - UUID - required
   */
  get_by_id_api_v1_coolness_type__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CoolnessTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Update Coolness Type
   * @description Update Coolness Type
   *
   * **name** - required - str
   */
  update_api_v1_coolness_type__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CoolnessTypeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CoolnessTypeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Delete Coolness
   * @description Delete Coolness Type
   *
   * - **id** - UUID - required
   */
  delete_api_v1_coolness_type__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Ip */
  get_ip_api_v1_ip_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
